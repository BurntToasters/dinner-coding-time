var SEARCH_LIMIT = 20;

var index, list;
/*START INDEX*/
index = {"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["text"],"id":"text","weight":1,"src":"text"},{"path":["address"],"id":"address","weight":1,"src":"address"}],"records":[{"i":0,"$":{"0":{"v":"Error: 404 Not Found","n":0.5},"1":{"v":"Error: 404 Not FoundThis page could not be found in the system. This could be caused by a typo in the address bar.Please make sure that the address is correct. You can try:Going to the previous page to try again\r\n            Refreshing the page\r\n            Looking for typos in the address\r\n            Asking whoever gave you this link for a working one\r\n            Disabling adblocker (RARELY, an adblocker can cause problems for specific pages)","n":0.12},"2":{"v":"/404.html","n":1}}},{"i":1,"$":{"0":{"v":"About This Site","n":0.577},"1":{"v":"About This SiteThis is a site with answers for CodeHS, specifically the A.P. Computer Science A lessons.It's originally for my high school's curriculum, but it seems like some other people might like it too.\r\n                nice!FAQIs this legal?? Like, taking stuff from CodeHS?Yep! Check out the Fair Use StatementDo you track users?I've got a custom page analytics script based on Matomo. It only records\r\n                the following information:\r\n            \r\n                Someone viewed a page\r\n                The address of the page that was viewed\r\n                How quickly the page loaded\r\n                What browser/OS you used\r\n                Your general location (i.e. region of the country)\r\n            \r\n            Your IP address is not saved, and no cookies are used. I don't sell your data. No personally identifiable\r\n            information is recorded, ever. I don't want your information. Keep that stuff to yourself, man :/My teacher gave me a challenge that isn't on here-- huh?Some teachers have implemented their own challenges on CodeHS. I don't have those unique challenges,\r\n                sorry; I'd be glad to help you with them, though!If you have a question that Dinner Coding Time can't answer, please ask it on the Discord! I might not be able to answer\r\n                it right away, but someone should be able to help you ASAP.","n":0.071},"2":{"v":"/about.html","n":1}}},{"i":2,"$":{"0":{"v":"Author","n":1},"1":{"v":"AuthorThis page is a placeholder for authors who want to remain anonymous, or who don't care about detailed attribution.Thank you to everyone who's volunteered their time or code to help others grow!","n":0.177},"2":{"v":"/author.html","n":1}}},{"i":3,"$":{"0":{"v":"String-1 > comboString","n":0.577},"1":{"v":"String-1 > comboStringpublic String comboString(String a, String b) {\r\n  if (a.length() > b.length()) {\r\n    return b + a + b;\r\n  } else {\r\n    return a + b + a;\r\n  }\r\n}","n":0.183},"2":{"v":"/classwork/codingbat/string-1/comboString.html","n":1}}},{"i":4,"$":{"0":{"v":"String-1 > extraEnd","n":0.577},"1":{"v":"String-1 > extraEndpublic String extraEnd(String str) {\r\n  String temp = str.substring(str.length() - 2);\r\n  return temp + temp + temp;\r\n}","n":0.229},"2":{"v":"/classwork/codingbat/string-1/extraEnd.html","n":1}}},{"i":5,"$":{"0":{"v":"String-1 > firstHalf","n":0.577},"1":{"v":"String-1 > firstHalfpublic String firstHalf(String str) {\r\n  return str.substring(0, str.length()/2);\r\n}","n":0.316},"2":{"v":"/classwork/codingbat/string-1/firstHalf.html","n":1}}},{"i":6,"$":{"0":{"v":"String-1 > firstTwo","n":0.577},"1":{"v":"String-1 > firstTwopublic String firstTwo(String str) {\r\n  if (str.length() == 0) {\r\n    return \"\";\r\n  } else if (str.length() == 1) {\r\n    return str;\r\n  } else {\r\n    return str.substring(0, 2);\r\n  }\r\n}","n":0.183},"2":{"v":"/classwork/codingbat/string-1/firstTwo.html","n":1}}},{"i":7,"$":{"0":{"v":"String-1 > helloName","n":0.577},"1":{"v":"String-1 > helloNamepublic String helloName(String name) {\r\n  return \"Hello \" + name + \"!\";\r\n}","n":0.267},"2":{"v":"/classwork/codingbat/string-1/helloName.html","n":1}}},{"i":8,"$":{"0":{"v":"String-1 > left2","n":0.577},"1":{"v":"String-1 > left2public String left2(String str) {\r\n  String start = str.substring(0, 2);\r\n  String end = str.substring(2);\r\n  \r\n  return end + start;\r\n}","n":0.218},"2":{"v":"/classwork/codingbat/string-1/left2.html","n":1}}},{"i":9,"$":{"0":{"v":"String-1 > makeAbba","n":0.577},"1":{"v":"String-1 > makeAbbapublic String makeAbba(String a, String b) {\r\n  return a + b + b + a;\r\n}","n":0.243},"2":{"v":"/classwork/codingbat/string-1/makeAbba.html","n":1}}},{"i":10,"$":{"0":{"v":"String-1 > makeOutWord","n":0.577},"1":{"v":"String-1 > makeOutWordpublic String makeOutWord(String out, String word) {\r\n  return out.substring(0,2) + word + out.substring(2);\r\n}","n":0.258},"2":{"v":"/classwork/codingbat/string-1/makeOutWord.html","n":1}}},{"i":11,"$":{"0":{"v":"String-1 > makeTags","n":0.577},"1":{"v":"String-1 > makeTagspublic String makeTags(String tag, String word) {\r\n  return \"<\" + tag + \">\" + word + \"</\" + tag + \">\";\r\n}","n":0.209},"2":{"v":"/classwork/codingbat/string-1/makeTags.html","n":1}}},{"i":12,"$":{"0":{"v":"String-1 > nonStart","n":0.577},"1":{"v":"String-1 > nonStartpublic String nonStart(String a, String b) {\r\n  String concat1 = a.substring(1);\r\n  String concat2 = b.substring(1);\r\n  \r\n  return concat1 + concat2;\r\n}","n":0.213},"2":{"v":"/classwork/codingbat/string-1/nonStart.html","n":1}}},{"i":13,"$":{"0":{"v":"String-1 > right2","n":0.577},"1":{"v":"String-1 > right2public String right2(String str) {\r\n  String end = str.substring(str.length() - 2);\r\n  String start = str.substring(0, str.length() - 2);\r\n  \r\n  return end + start;\r\n}","n":0.2},"2":{"v":"/classwork/codingbat/string-1/right2.html","n":1}}},{"i":14,"$":{"0":{"v":"String-1 > withoutEnd","n":0.577},"1":{"v":"String-1 > withoutEndpublic String withoutEnd(String str) {\r\n  return str.substring(1, str.length() - 1);\r\n  \r\n}","n":0.277},"2":{"v":"/classwork/codingbat/string-1/withoutEnd.html","n":1}}},{"i":15,"$":{"0":{"v":"String-3 > countYZ","n":0.577},"1":{"v":"String-3 > countYZpublic int countYZ(String str) {\r\n                int words = 0;\r\n                \r\n                for(int i = 0; i < str.length(); i++) {\r\n              \r\n                  if(\r\n                      //put end-checker first so that it'll short-circuit if we're at the end and not try to get an undefined character for the space\r\n                      (i + 1 == str.length() || !Character.isLetter(str.charAt(i+1))) && \r\n                      (str.toLowerCase().charAt(i) == 'y' || str.toLowerCase().charAt(i) == 'z')\r\n                    ) {\r\n                      words++;\r\n                    }\r\n                }\r\n                \r\n                return words;\r\n              }","n":0.119},"2":{"v":"/classwork/codingbat/string-3/countYZ.html","n":1}}},{"i":16,"$":{"0":{"v":"Classwork","n":1},"1":{"v":"ClassworkBelow are all Classwork answers. This includes CodingBat, as well as some select projects.CodingBat\r\n                \r\n                    \r\n                        \r\n                            \r\n                                String-1\r\n                            \r\n                            \r\n                                \r\n                                    helloName\r\n                                \r\n                                \r\n                                    makeAbba\r\n                                \r\n                                \r\n                                    makeTags\r\n                                \r\n                                \r\n                                    makeOutWord\r\n                                \r\n                                \r\n                                    extraEnd\r\n                                \r\n                                \r\n                                    firstTwo\r\n                                \r\n                                \r\n                                    firstHalf\r\n                                \r\n                                \r\n                                    withoutEnd\r\n                                \r\n                                \r\n                                    comboString\r\n                                \r\n                                \r\n                                    nonStart\r\n                                \r\n                                \r\n                                    left2\r\n                                \r\n                                \r\n                                    right2\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                String-3\r\n                            \r\n                            \r\n                                \r\n                                    countYZ","n":0.121},"2":{"v":"/classwork/","n":1}}},{"i":17,"$":{"0":{"v":"CodeHS Courses","n":0.707},"1":{"v":"CodeHS CoursesJava\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    Python 3\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    Python 2\r\n                    Coming soon!\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    Javascript\r\n                    Coming soon!\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    HTML\r\n                    Coming soon!","n":0.171},"2":{"v":"/codehs/","n":1}}},{"i":18,"$":{"0":{"v":"1.2.6 ASCII Art","n":0.577},"1":{"v":"1.2.6 ASCII Artpublic class Art \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   System.out.println(\"   /)___\");\r\n                   System.out.println(\"  /     O|___\");\r\n                   System.out.println(\" /           )\");\r\n                   System.out.println(\"/       )___/\");\r\n                }\r\n            \r\n            }","n":0.196},"2":{"v":"/codehs/java/1/2/ascii-art.html","n":1}}},{"i":19,"$":{"0":{"v":"1.2.7 Fixing a Paragraph","n":0.5},"1":{"v":"1.2.7 Fixing a Paragraphpublic class TomatoEssay\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Start here!\r\n                    System.out.println(\"Is a tomato a fruit or a vegetable?\");\r\n                    System.out.println(\"While biologically speaking a tomato is a fruit, legally speaking it is a vegetable!\");\r\n                    System.out.println(\"In Supreme Court Case Nix v. Hedden, the Court ruled that tomatoes should be classified as a vegetable under U.S Customs regulations because they are consumed more like a vegetable than a fruit, and should be taxed as such.\");\r\n                    System.out.println(\"When tomatos are shipped into the U.S, they are now taxed as vegetables even though their anatomy suggests otherwise.\");\r\n                }\r\n            }","n":0.101},"2":{"v":"/codehs/java/1/2/fixing-a-paragraph.html","n":1}}},{"i":20,"$":{"0":{"v":"1.2.8 Making Popcorn","n":0.577},"1":{"v":"1.2.8 Making Popcornpublic class MakingPopcorn\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"3 Ways to Heat Anything\");\r\n            System.out.println(\"Each of the 3 methods below is an example of the three ways that heat can be transferred.\");\r\n            System.out.println(\"\");\r\n            System.out.println(\"Conduction\");\r\n            System.out.println(\"Conduction is heat transfer through matter. Metals conduct heat well, but air does not. This is a direct contact type of heat transfer.\");\r\n            System.out.println(\"\");\r\n            System.out.println(\"Convection\");\r\n            System.out.println(\"Convection is heat transfer by the movement of mass from one place to another. It can take place only in liquids and gases. Heat gained by conduction or radiation is moved by convection.\");\r\n            System.out.println(\"\");\r\n            System.out.println(\"Radiation\");\r\n            System.out.println(\"Radiation can transfer heat through the relative emptiness of space. All other forms of heat transfer require motion of molecules like air or water to move heat.\");\r\n            \r\n                }\r\n            }","n":0.089},"2":{"v":"/codehs/java/1/2/making-popcorn.html","n":1}}},{"i":21,"$":{"0":{"v":"1.2.9 Personal Timeline","n":0.577},"1":{"v":"1.2.9 Personal Timelinepublic class Timeline\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Age  | M/YY Description\");\r\n                    System.out.println(\"7    | \");\r\n                    System.out.println(\"     | 5/08 - lorem ipsum\");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"9    | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"11   | 1/14 - amet sit dolor\");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | 6/14 - consectetur \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"13   | 2/16 - adipiscing elit, \");\r\n                    System.out.println(\"     | 3/16 - sed do eiusmod\");\r\n                    System.out.println(\"     | 9/16 - tempor incididunt ut labore\");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"15   | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                }\r\n            }","n":0.101},"2":{"v":"/codehs/java/1/2/personal-timeline.html","n":1}}},{"i":22,"$":{"0":{"v":"1.2.5 Welcome Program","n":0.577},"1":{"v":"1.2.5 Welcome Programpublic class Welcome \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Your code will go here\r\n        // These lines are comments\r\n        // Java ignores anything that comes after \r\n        // two forward slashes\r\n        // You can delete the comments or leave them in\r\n        // Java ignores them anyway!\r\n        System.out.println(\"My name is Quin.\");\r\n        System.out.println(\"I like video games.\");\r\n    } \r\n}","n":0.129},"2":{"v":"/codehs/java/1/2/welcome-program.html","n":1}}},{"i":23,"$":{"0":{"v":"1.3.8 Answering Questions","n":0.577},"1":{"v":"1.3.8 Answering Questionspublic class Variables \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String myName = \"Karel the Dog\";\r\n                    int luckyNumber = 11;\r\n                    double currentTemperature = 75.3;\r\n                    boolean isStudent = true;\r\n                    \r\n                    System.out.println(myName);\r\n                    System.out.println(luckyNumber);\r\n                    System.out.println(currentTemperature);\r\n                    System.out.println(isStudent);\r\n                }\r\n            }","n":0.162},"2":{"v":"/codehs/java/1/3/answering-questions.html","n":1}}},{"i":24,"$":{"0":{"v":"1.3.5 Our First Integer","n":0.5},"1":{"v":"1.3.5 Our First Integerpublic class Variables\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int thisYear = 1970;\r\n                    System.out.println(\"The current year is\" + thisYear);\r\n                }\r\n            }","n":0.2},"2":{"v":"/codehs/java/1/3/our-first-integer.html","n":1}}},{"i":25,"$":{"0":{"v":"1.3.9 Team Rankings","n":0.577},"1":{"v":"1.3.9 Team Rankingspublic class TeamRanks\r\n            {\r\n                public static void main(String[] args) {\r\n                    String team1 = \"Alabama\";\r\n                    String team2 = \"Ohio State\";\r\n                    String team3 = \"Florida State\";\r\n                    String team4 = \"USC\";\r\n                    String team5 = \"Clemson\";\r\n                    String team6 = \"Penn State\";\r\n                    String team7 = \"Oklahoma\";\r\n                    String team8 = \"Maryland\";\r\n                    String team9 = \"Wisconsin\";\r\n                    String team10 = \"Michigan\";\r\n            \r\n                    /*\r\n                     * Don't edit above this line.\r\n                     * Enter your code below this comment.\r\n                     */\r\n            \r\n                    String tmp1 = team1;\r\n                    String tmp2 = team2;\r\n                    String tmp3 = team3;\r\n                    String tmp4 = team4;\r\n                    String tmp5 = team5;\r\n                    String tmp6 = team6;\r\n                    String tmp7 = team7;\r\n                    String tmp8 = team8;\r\n                    String tmp9 = team9;\r\n                    String tmp10 = team10;\r\n            \r\n                    team2 = tmp6;\r\n                    team3 = tmp8;\r\n                    team4 = tmp10;\r\n                    team5 = tmp4;\r\n                    team6 = tmp5;\r\n                    team8 = tmp9;\r\n                    team9 = tmp3;\r\n                    team10 = tmp2;\r\n                    \r\n                    /*\r\n                     * Don't edit below this line.\r\n                     * Enter your code above this comment.\r\n                     */\r\n            \r\n                    System.out.print(\"1. \");\r\n                    System.out.println(team1);\r\n                    System.out.print(\"2. \");\r\n                    System.out.println(team2);\r\n                    System.out.print(\"3. \");\r\n                    System.out.println(team3);\r\n                    System.out.print(\"4. \");\r\n                    System.out.println(team4);\r\n                    System.out.print(\"5. \");\r\n                    System.out.println(team5);\r\n                    System.out.print(\"6. \");\r\n                    System.out.println(team6);\r\n                    System.out.print(\"7. \");\r\n                    System.out.println(team7);\r\n                    System.out.print(\"8. \");\r\n                    System.out.println(team8);\r\n                    System.out.print(\"9. \");\r\n                    System.out.println(team9);\r\n                    System.out.print(\"10. \");\r\n                    System.out.println(team10);\r\n                }\r\n            }","n":0.073},"2":{"v":"/codehs/java/1/3/team-rankings.html","n":1}}},{"i":26,"$":{"0":{"v":"1.4.7 Add Fractions","n":0.577},"1":{"v":"1.4.7 Add Fractionspublic class AddFractions \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int numerator1 = 1;\r\n                    int denominator1 = 2;\r\n                    \r\n                    int numerator2 = 2;\r\n                    int denominator2 = 5;\r\n                    \r\n                    System.out.println(\"The numerator of the first fraction is \" + numerator1);\r\n                    System.out.println(\"The denominator of the first fraction is \" + denominator1);\r\n                    System.out.println(\"The numerator of the second fraction is \" + numerator2);\r\n                    System.out.println(\"The denominator of the second fraction is \" + denominator2);\r\n                    \r\n                    System.out.println(\"The sum of \" + numerator1 + \"/\" + denominator1 + \" + \" + numerator2 + \"/\" + denominator2 + \" = \" +\r\n                        (numerator1+numerator2) + \"/\" + (denominator1+numerator2));\r\n                }\r\n            }","n":0.098},"2":{"v":"/codehs/java/1/4/add-fractions.html","n":1}}},{"i":27,"$":{"0":{"v":"1.4.8 Freely Falling Bodies","n":0.5},"1":{"v":"1.4.8 Freely Falling Bodiespublic class FallingBodies\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    final double g = 9.8;\r\n                    \r\n                    double t = 10;\r\n                    \r\n                    System.out.println(\"The height is \" + (0.5*g*t*t) );\r\n                    System.out.println(\"The velocity is \" + (g*t));\r\n                }\r\n            }","n":0.16},"2":{"v":"/codehs/java/1/4/freely-falling-bodies.html","n":1}}},{"i":28,"$":{"0":{"v":"1.4.6 Weight of a Pyramid","n":0.447},"1":{"v":"1.4.6 Weight of a Pyramidpublic class Pyramid \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    double blockWeight = 2.5;\r\n                    int numBlocks = 2500000;\r\n                    \r\n                    System.out.println(\"The pyramid weighs \" + (blockWeight*numBlocks) + \" tons\");\r\n                }\r\n            }","n":0.169},"2":{"v":"/codehs/java/1/4/weight-of-a-pyramid.html","n":1}}},{"i":29,"$":{"0":{"v":"1.5.6 My Age","n":0.577},"1":{"v":"1.5.6 My Agepublic class MyAge\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int age = 14;\r\n                    \r\n                    System.out.println(\"My current age is: \" + (age++));\r\n                    System.out.println(\"My age next year will be: \" + (age--));\r\n                    System.out.println(\"My current age is: \" + age);\r\n                }\r\n            }","n":0.154},"2":{"v":"/codehs/java/1/5/my-age.html","n":1}}},{"i":30,"$":{"0":{"v":"1.5.5 Work Shift","n":0.577},"1":{"v":"1.5.5 Work Shiftpublic class WorkShift\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int hours = 20;\r\n                    \r\n                    int minutes = 42;\r\n                    \r\n                    int seconds = 16;\r\n            \r\n                    \r\n                    minutes += hours * 60;\r\n                    seconds += minutes * 60;\r\n                    \r\n                    System.out.println(\"The doctor worked \" + seconds + \"seconds.\");\r\n                }\r\n            }","n":0.143},"2":{"v":"/codehs/java/1/5/work-shift.html","n":1}}},{"i":31,"$":{"0":{"v":"1.6.6 MLA Citation","n":0.577},"1":{"v":"1.6.6 MLA Citationimport java.util.Scanner;\r\n\r\n            public class Citation\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    \r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Read a string\r\n                    System.out.println(\"Enter the author's name as 'Last name, First name': \");\r\n                    String author = input.nextLine();\r\n                    System.out.println(\"Enter the title of the book: \");\r\n                    String title = input.nextLine();\r\n                    System.out.println(\"Enter the publisher of the book: \");\r\n                    String publisher = input.nextLine();\r\n                    System.out.println(\"Enter the year the book was published: \");\r\n                    int year = input.nextInt();\r\n                    \r\n                    System.out.println(author + \". \" + title + \".\\n\" + publisher + \", \" + year + \".\");\r\n            \r\n                }\r\n            }","n":0.103},"2":{"v":"/codehs/java/1/6/mla-citation.html","n":1}}},{"i":32,"$":{"0":{"v":"1.6.4 My Age (User Input)","n":0.447},"1":{"v":"1.6.4 My Age (User Input)import java.util.Scanner;\r\n            //Refer to your code from the previous My Age exercise. \r\n            // Modify it using the Scanner class to take user input instead of hard coding in your age. \r\n            \r\n            public class MyAge\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    // Start here!\r\n                    \r\n                    int age = input.nextInt();\r\n                    \r\n                    System.out.println(\"My current age is: \" + (age++));\r\n                    System.out.println(\"My age next year will be: \" + (age--));\r\n                    System.out.println(\"My current age is: \" + age);\r\n                }\r\n            }","n":0.108},"2":{"v":"/codehs/java/1/6/my-age-user-input.html","n":1}}},{"i":33,"$":{"0":{"v":"1.6.5 Night Out","n":0.577},"1":{"v":"1.6.5 Night Outimport java.util.Scanner;\r\n\r\n            public class NightOut\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"How much did dinner cost? \");\r\n                    double dinner = input.nextDouble();\r\n                    System.out.println(\"How much is mini-golf for one person? \");\r\n                    double miniGolf = input.nextDouble();\r\n                    System.out.println(\"How much did dessert cost? \");\r\n                    double dessert = input.nextDouble();\r\n                    System.out.println(\"Dinner: $\" + dinner);\r\n                    System.out.println(\"Mini-Golf: $\" + miniGolf);\r\n                    System.out.println(\"Dessert: $\" + dessert);\r\n                    System.out.println(\"Grand Total: $\" + (dinner + miniGolf*2 + dessert));\r\n            \r\n                }\r\n            }","n":0.115},"2":{"v":"/codehs/java/1/6/night-out.html","n":1}}},{"i":34,"$":{"0":{"v":"1.7.5 Casting to a Double","n":0.447},"1":{"v":"1.7.5 Casting to a Doubleimport java.util.Scanner;\r\n\r\n            public class CastingToDouble\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    int myint1 = input.nextInt();\r\n                    int myint2 = input.nextInt();\r\n            \r\n                    double quotient = myint1 / (double)myint2;\r\n                    \r\n                    System.out.println(\"\" + quotient);\r\n                }\r\n            }","n":0.152},"2":{"v":"/codehs/java/1/7/casting-to-a-double.html","n":1}}},{"i":35,"$":{"0":{"v":"1.7.4 Casting to an Int","n":0.447},"1":{"v":"1.7.4 Casting to an Intimport java.util.Scanner;\r\n\r\n            public class CastingToInt\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    double myDouble = input.nextDouble();\r\n                    \r\n                    System.out.println(\"\" + (int)myDouble);\r\n                }\r\n            }","n":0.177},"2":{"v":"/codehs/java/1/7/casting-to-an-int.html","n":1}}},{"i":36,"$":{"0":{"v":"1.7.11 Integer Overflow","n":0.577},"1":{"v":"1.7.11 Integer Overflowpublic class IntegerOverflow\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(Integer.MIN_VALUE);\r\n                    System.out.println(Integer.MAX_VALUE);\r\n                    System.out.println(Integer.MIN_VALUE - 1);\r\n                    System.out.println(Integer.MAX_VALUE + 1);\r\n                }\r\n            }","n":0.213},"2":{"v":"/codehs/java/1/7/integer-overflow.html","n":1}}},{"i":37,"$":{"0":{"v":"1.7.8 Movie Ratings","n":0.577},"1":{"v":"1.7.8 Movie Ratingsimport java.util.Scanner;\r\n\r\n            public class MovieRatings\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    double stars = input.nextDouble();\r\n                    \r\n                    System.out.println(\"\" + (int)Math.round(stars));\r\n                }\r\n            }","n":0.183},"2":{"v":"/codehs/java/1/7/movie-ratings.html","n":1}}},{"i":38,"$":{"0":{"v":"10.1.9 Bacteria Cultures","n":0.577},"1":{"v":"10.1.9 Bacteria Culturesimport java.util.Scanner;\r\n\r\n            public class Bacteria\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"How many hours will the bacteria sit? \");\r\n                    int hours = input.nextInt();\r\n                    int bacteria = numBacteriaAlive(hours);\r\n                    System.out.println(\"After \" + hours + \", there will be \" + bacteria);\r\n                }\r\n                \r\n                public static int numBacteriaAlive(int hour)\r\n                {\r\n                    if(hour == 0) return 10;\r\n                    else return numBacteriaAlive(hour - 1) * 3;\r\n                    \r\n                    \r\n                }\r\n            \r\n            }","n":0.117},"2":{"v":"/codehs/java/10/1/bacteria-cultures.html","n":1}}},{"i":39,"$":{"0":{"v":"10.1.7 Countdown!","n":0.707},"1":{"v":"10.1.7 Countdown!import java.util.Scanner;\r\n\r\n            public class Countdown\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   Scanner sc = new Scanner(System.in);\r\n                   System.out.println(\"Please enter a number to start: \");\r\n                   int i = sc.nextInt();\r\n                   System.out.println(countdown(i));\r\n                }\r\n                \r\n                public static String countdown(int number)\r\n                {\r\n                   \r\n                   if(number == 0) return \"Blastoff!\";\r\n                   else return number + \" \" + countdown(number - 1);\r\n                }\r\n            }","n":0.134},"2":{"v":"/codehs/java/10/1/countdown.html","n":1}}},{"i":40,"$":{"0":{"v":"10.1.6 Factorial","n":0.707},"1":{"v":"10.1.6 Factorialimport java.util.Scanner;\r\n\r\n            public class Factorial\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    System.out.println(\"Please enter a number: \");\r\n                    int number = input.nextInt();\r\n                    \r\n                    System.out.println(calcFactorial(number));\r\n                }\r\n                \r\n                public static int calcFactorial(int x)\r\n                {\r\n                    if(x > 1) return x * calcFactorial(x - 1);\r\n                    else return 1;\r\n                }\r\n            }","n":0.14},"2":{"v":"/codehs/java/10/1/factorial.html","n":1}}},{"i":41,"$":{"0":{"v":"10.1.8 Recursive Minimum","n":0.577},"1":{"v":"10.1.8 Recursive Minimumimport java.util.*;\r\n\r\n            public class RecursiveMin\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    ArrayList<Integer> numbers = new ArrayList<Integer>();\r\n                    \r\n                    while (true){\r\n                         System.out.println(\"Please enter numbers. Enter -1 to quit: \");\r\n                         int number = input.nextInt();\r\n                         \r\n                         if (number == -1){\r\n                             break;\r\n                         }\r\n                         else {\r\n                             numbers.add(number);\r\n                         }\r\n                    }\r\n            \r\n                    int minimum = findMinimum(numbers);\r\n                    System.out.println(\"Minimum: \" + minimum);\r\n                }\r\n                \r\n                public static int findMinimum(ArrayList<Integer> numbers)\r\n                {\r\n                    \r\n                    if(numbers.size() == 1) return numbers.get(0);\r\n                    else return Math.min(numbers.remove(numbers.size() - 1), findMinimum(numbers));\r\n                    \r\n                }\r\n            }","n":0.109},"2":{"v":"/codehs/java/10/1/recursive-minimum.html","n":1}}},{"i":42,"$":{"0":{"v":"10.2.7 Comparing Binary Search and Linear Search","n":0.378},"1":{"v":"10.2.7 Comparing Binary Search and Linear Searchimport java.util.*;\r\n\r\n            public class CompareSearch \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Table of comparison counts\");\r\n                    System.out.println(\"Length\\t\\tBinary Search\\tLinear Search\");\r\n                    testArrayOfLength(10);\r\n                    testArrayOfLength(20);\r\n                    testArrayOfLength(15);\r\n                    testArrayOfLength(16);\r\n                    testArrayOfLength(32);\r\n                }\r\n                \r\n                // This problem generates an array of length length. Then we select a random\r\n                // index of that array and get the element. Then we print out the table row\r\n                // entry for how many comparisons it takes on binary search and linear search.\r\n                // You'll need to update those methods.\r\n                public static void testArrayOfLength(int length)\r\n                {\r\n                    int[] arr = generateArrayOfLength(length);\r\n                    //System.out.println(Arrays.toString(arr));\r\n                    int index = (int)(Math.random() * length);\r\n                    int elem = arr[index];\r\n                    System.out.println(length + \"\\t\\t\" + binarySearch(arr, elem) + \"\\t\\t\" + linearSearch(arr, elem));\r\n                }\r\n                \r\n                public static int[] generateArrayOfLength(int length)\r\n                {\r\n                    int[] arr = new int[length];\r\n                    for(int i = 0; i < length; i++)\r\n                    {\r\n                        arr[i] = (int)(Math.random() * 100);\r\n                    }\r\n                    \r\n                    Arrays.sort(arr);\r\n                    \r\n                    return arr;\r\n                }\r\n                \r\n                // Do a binary search on array to find number. You'll need to modify this \r\n                // method to return the number of comparisons done.\r\n                public static int binarySearch(int[] array, int number)\r\n                {\r\n                    int low = 0;\r\n                    int high = array.length - 1;\r\n                    \r\n                    int comparisons = 0;\r\n                    \r\n                    // Add a counter to count how many times the while loop is executed\r\n                    while (low <= high)\r\n                    {\r\n                        comparisons++;\r\n                        int mid = (low + high) / 2;\r\n                        if (array[mid] == number)\r\n                        {\r\n                            return comparisons;\r\n                        }\r\n                        else if(array[mid] < number)\r\n                        {\r\n                            low = mid + 1;\r\n                        }\r\n                        else\r\n                        {\r\n                            high = mid - 1;\r\n                        }\r\n                    }\r\n                  \r\n                    return comparisons;\r\n                }\r\n                \r\n                // Do a linear search on array to find the index of number. You'll need to modify\r\n                // this exercise to return the number of *comparisons* done.\r\n                public static int linearSearch(int[] array, int number)\r\n                {\r\n                    // Add a counter to count how many times the for loop is executed\r\n                    for (int i = 0; i < array.length; i++)\r\n                    {\r\n                        if (array[i] == number)\r\n                        {\r\n                            //in linear search, we do a comparison for each index, so \r\n                            //`i` is the same as the `comparisons` variable,\r\n                            //just offset by 1 because indexes start at 0.\r\n                            return i + 1; // the method returns as soon as the number is found\r\n                        }\r\n                    }\r\n                    //if nothing was found, that means we compared every single element\r\n                    return array.length; // the code will get here if the number isn't found\r\n                }\r\n            }","n":0.05},"2":{"v":"/codehs/java/10/2/comparing-binary-search-and-linear-search.html","n":1}}},{"i":43,"$":{"0":{"v":"10.2.6 Exploring Binary Searches","n":0.5},"1":{"v":"10.2.6 Exploring Binary Searchespublic class BinaryExplorer {\r\n\r\n                public static void main(String[] args) {\r\n                    int[] testArray = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\r\n            \r\n                    binaryRec(testArray, 8, 0, testArray.length - 1);\r\n            \r\n                }\r\n            \r\n                /**\r\n                 * Add Print statements to the binaryRec method:\r\n                 * \r\n                 * Print Starting, ending, and midpoint values.\r\n                 * \r\n                 * Print when you find a match\r\n                 * \r\n                 * Print if you are too high or too low.\r\n                 * \r\n                 **/\r\n                public static int binaryRec(int[] array, int target, int begin, int end) {\r\n                    \r\n                    System.out.println(\"Starting value: \" + array[begin]);\r\n                    System.out.println(\"Ending value: \" + array[end]);\r\n                    \r\n                    if (begin <= end)\r\n                    {\r\n                        \r\n                        int mid = (begin + end) / 2;\r\n                        int midVal = array[mid];\r\n                        \r\n                        System.out.println(\"Testing midpoint value: \" + midVal);\r\n                    \r\n                        \r\n                        // Base Case\r\n                        if (target == midVal) {\r\n                            System.out.println(\"Match!\");\r\n                            System.out.println(\"\");\r\n                            return mid;\r\n                        }\r\n                \r\n                        if (target < midVal) {\r\n                            System.out.println(\"Too high!\");\r\n                            System.out.println(\"\");\r\n                            return binaryRec(array, target, begin, mid - 1);\r\n                        }\r\n                \r\n                        if (target > midVal) {\r\n                            System.out.println(\"Too low!\");\r\n                            System.out.println(\"\");\r\n                            return binaryRec(array, target, mid + 1, end);\r\n                        }\r\n                    }\r\n                    return -1; //Alternate Base Case - not found\r\n                }\r\n            }","n":0.073},"2":{"v":"/codehs/java/10/2/exploring-binary-searches.html","n":1}}},{"i":44,"$":{"0":{"v":"10.2.8 Maximum Iterations","n":0.577},"1":{"v":"10.2.8 Maximum Iterationsimport java.util.*;\r\n\r\n            public class BinarySearchTest {\r\n            \r\n                static int count;\r\n            \r\n                public static void main(String[] args) {\r\n                    \r\n                    // Use the helper code to generate arrays, calculate the max\r\n                    // iterations, and then find the actual iterations for a randomly\r\n                    // selected value.\r\n                    \r\n                    \r\n                    \r\n                    System.out.println(\"Array Size: 100\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(100));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(100), 2, 0, 99));\r\n                    \r\n                    System.out.println(\"Array Size: 1000\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(1000));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(1000), 2, 0, 999));\r\n                    \r\n                    System.out.println(\"Array Size: 10000\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(10000));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(10000), 2, 0, 9999));\r\n                    \r\n                    System.out.println(\"Array Size: 100000\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(100000));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(100000), 2, 0, 99999));\r\n             \r\n                }\r\n            \r\n                public static int binaryRec(int[] array, int target, int begin, int end) {\r\n                    if (begin <= end)\r\n                    {\r\n                        int mid = (begin + end) / 2;\r\n                        int midVal = array[mid];\r\n                        count ++;\r\n                        // Base Case\r\n                        if (target == midVal) {\r\n                                return mid;\r\n                        }\r\n                \r\n                        if (target < midVal) {\r\n                            return binaryRec(array, target, begin, mid - 1);\r\n                        }\r\n                \r\n                        if (target > midVal) {\r\n                            return binaryRec(array, target, mid + 1, end);\r\n                        }\r\n                    }\r\n                    return -1; //Alternate Base Case - not found\r\n                }\r\n            \r\n                public static int[] generateArrayOfLength(int length)\r\n                {\r\n                    int[] arr = new int[length];\r\n                    for(int i = 0; i < length; i++)\r\n                    {\r\n                        arr[i] = (int)(Math.random() * 100);\r\n                    }\r\n            \r\n                    Arrays.sort(arr);\r\n            \r\n                    return arr;\r\n                }\r\n            \r\n                private static int binaryMax(int length) {\r\n                    return (int) (Math.log(length) / Math.log(2)) + 1;\r\n                }\r\n            }","n":0.064},"2":{"v":"/codehs/java/10/2/maximum-iterations.html","n":1}}},{"i":45,"$":{"0":{"v":"10.3.6 Explore Merge Sort","n":0.5},"1":{"v":"10.3.6 Explore Merge Sortpublic class MergeSortPrint {\r\n\r\n                public static void main(String[] args) {\r\n                    int[] myArray = {20, 9, 13, 34, 11, 22, 13, 10};\r\n                    System.out.print(\"Unsorted: \");\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : myArray) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                    mergeSort(myArray, myArray.length);\r\n            \r\n                    System.out.print(\"Sorted: \");\r\n                   \r\n                    // Print Sorted Array\r\n                   \r\n                    System.out.println();\r\n                    \r\n                    for(int n : myArray) System.out.print(n + \" \");\r\n                }\r\n            \r\n                public static void mergeSort(int[] current, int length) {\r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    \r\n                    System.out.println(\"Splitting ...\");\r\n                    \r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n            \r\n                    int[] right = new int[length - mid];\r\n                    \r\n                    \r\n                    System.out.print(\"*** Left: \");\r\n                    \r\n                    // Create and print left array\r\n                    \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : left) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                    System.out.println();\r\n                    System.out.print(\"*** Right: \");\r\n                    \r\n                    // Create and print right array\r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n            \r\n                    }\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : right) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                    System.out.println();\r\n                    System.out.println();\r\n                    \r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n                    \r\n                    System.out.print(\"*** Current: \");\r\n                    \r\n                    // Print current array\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : current) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                }\r\n            \r\n                public static void merge(int[] current, int[] left, int[] right)\r\n                {\r\n                    System.out.println(\"Merging ... \");\r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            }","n":0.059},"2":{"v":"/codehs/java/10/3/explore-merge-sort.html","n":1}}},{"i":46,"$":{"0":{"v":"10.3.7 Merge Sort Benchmark Testing","n":0.447},"1":{"v":"10.3.7 Merge Sort Benchmark Testingpublic class Sorter {\r\n\r\n                public static void mergeSort(int[] current, int length) {\r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n                    int[] right = new int[length - mid];\r\n            \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n                    }\r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n                }\r\n            \r\n                private static void merge(\r\n                    int[] current, int[] left, int[] right) {\r\n            \r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            \r\n            \r\n            }import java.util.ArrayList;\r\n\r\n            public class SortTester {\r\n            \r\n                public static void main(String[] args) {\r\n                    int[] testArray;\r\n                    long startTime, endTime;\r\n                    int arraySize = 50000;\r\n            \r\n                    // Random Array\r\n                    \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using Merge Sort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Random Array: \" + (endTime - startTime));\r\n                    \r\n                    \r\n                    // Almost Sorted Array\r\n                    \r\n                    // Make array\r\n                    testArray = makeAlmostSortedArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using Merge Sort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Almost Sorted Array: \" + (endTime - startTime));\r\n                    \r\n                    \r\n                     // Reverse Array\r\n                    \r\n                    // Make array\r\n                    testArray = makeReverseArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using Merge Sort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Reverse Array: \" + (endTime - startTime));\r\n                    \r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in random order\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number.\r\n                 */\r\n            \r\n                public static int[] makeRandomArray(int number){\r\n                    int[] array = new int[number];\r\n                    ArrayList<Integer> sorted = new ArrayList<Integer>(number);\r\n                    // Create the sorted list\r\n                    for (int i = 0; i < number; i++){\r\n                        sorted.add(i);\r\n                    }\r\n            \r\n                    // Now shuffle it.\r\n                    int index = 0;\r\n                    while (sorted.size() > 0){\r\n                        int randomIndex = (int)(Math.random()*sorted.size());\r\n                        array[index] = sorted.remove(randomIndex);\r\n                        index ++;\r\n                    }\r\n            \r\n                    return array;\r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in reverse order starting from the parameter number\r\n                 * and going to the value 0.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number. Index 0 is the value number, and\r\n                 * index array.length - 1 is 0\r\n                 */\r\n                public static int[] makeReverseArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   int counter = number;\r\n                   for(int i = 0; i < number; i++)\r\n                   {\r\n                       array[i] = counter;\r\n                       counter--;\r\n                   }\r\n                   return array;\r\n               }\r\n            \r\n               /**\r\n                * This method returns an array that is almost sorted, but the last index\r\n                * and last index-1 are switched.\r\n                * @param number- the length of the desired almost sorted array\r\n                * @return array - returns an array length number with index array.length - 1\r\n                * and array.length- 2 swapped.\r\n                */\r\n               public static int[] makeAlmostSortedArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   for(int i= 0; i < number; i++)\r\n                   {\r\n                       array[i] = i+1;\r\n                   }\r\n                   int temp = array[array.length - 1];\r\n                   array[array.length - 1] = array[array.length - 2];\r\n                   array[array.length - 2] = temp;\r\n                   return array;\r\n            \r\n               }\r\n            }","n":0.04},"2":{"v":"/codehs/java/10/3/merge-sort-benchmark-testing.html","n":1}}},{"i":47,"$":{"0":{"v":"10.3.8 Recursive Calls","n":0.577},"1":{"v":"10.3.8 Recursive Callsimport java.util.ArrayList;\r\n\r\n            public class MergeSortCounter {\r\n            \r\n                private static int count;\r\n            \r\n                public static void main(String[] args) {\r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(100),100);\r\n                    System.out.println(\"Total Recursive calls for 100: \" + count);\r\n                    \r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(1000),1000);\r\n                    System.out.println(\"Total Recursive calls for 1000: \" + count);\r\n                    \r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(10000),10000);\r\n                    System.out.println(\"Total Recursive calls for 10000: \" + count);\r\n                    \r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(100000),100000);\r\n                    System.out.println(\"Total Recursive calls for 100000: \" + count);\r\n                   \r\n                    \r\n                }\r\n            \r\n                public static void mergeSort(int[] current, int length) {\r\n                    count++;\r\n                    \r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n            \r\n                    int[] right = new int[length - mid];\r\n            \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n            \r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n                    }\r\n            \r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n            \r\n                }\r\n            \r\n                public static void merge(int[] current, int[] left, int[] right)\r\n                {\r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            \r\n                public static int[] makeRandomArray(int number){\r\n                    int[] array = new int[number];\r\n                    ArrayList<Integer> sorted = new ArrayList<Integer>(number);\r\n                    // Create the sorted list\r\n                    for (int i = 0; i < number; i++){\r\n                        sorted.add(i);\r\n                    }\r\n            \r\n                    // Now shuffle it.\r\n                    int index = 0;\r\n                    while (sorted.size() > 0){\r\n                        int randomIndex = (int)(Math.random()*sorted.size());\r\n                        array[index] = sorted.remove(randomIndex);\r\n                        index ++;\r\n                    }\r\n            \r\n                    return array;\r\n                }\r\n            }","n":0.059},"2":{"v":"/codehs/java/10/3/recursive-calls.html","n":1}}},{"i":48,"$":{"0":{"v":"10.3.9 Sort Benchmark Testing","n":0.5},"1":{"v":"10.3.9 Sort Benchmark Testingpublic class Sorter {\r\n\r\n                public static void selectionSort(int[] arr)\r\n                {\r\n                    int currentMinIndex;\r\n                    for (int i = 0; i < arr.length - 1; i++)\r\n                    {\r\n                        currentMinIndex = i;\r\n                        for (int j = i + 1; j < arr.length; j++)\r\n                        {\r\n                            if(arr[j] < arr[currentMinIndex])\r\n                            {\r\n                                currentMinIndex = j;\r\n                            }\r\n                        }\r\n                        // swap numbers if needed\r\n                        if (i != currentMinIndex)\r\n                        {\r\n                            int temp = arr[currentMinIndex];\r\n                            arr[currentMinIndex] = arr[i];\r\n                            arr[i] = temp;\r\n                        }\r\n                    }\r\n                }\r\n            \r\n                public static void insertionSort(int[] arr)\r\n               {\r\n                   // note: we start with 1 instead of 0\r\n                   for (int i = 1; i < arr.length; i++)\r\n                   {\r\n                       int curNumber = arr[i];\r\n            \r\n                       // Set index to be place to the left\r\n                       int curIndex = i - 1;\r\n            \r\n                       // We are still inbounds and the current number\r\n                       // is less than the current index\r\n                       while ( curIndex >= 0 && arr[curIndex] > curNumber)\r\n                       {\r\n                           // Shift the value at curIndex to the right one place\r\n                           arr[curIndex+1] = arr[curIndex];\r\n                           curIndex--;\r\n                       }\r\n            \r\n                       // Put this number in the proper location\r\n                       arr[curIndex + 1] = curNumber;\r\n                   }\r\n               }\r\n            \r\n                public static void mergeSort(int[] current, int length) {\r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n                    int[] right = new int[length - mid];\r\n            \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n                    }\r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n                }\r\n            \r\n                private static void merge(\r\n                    int[] current, int[] left, int[] right) {\r\n            \r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            \r\n            \r\n            }import java.util.ArrayList;\r\n\r\n            public class SortTester {\r\n            \r\n                public static void main(String[] args) {\r\n                    int[] testArray;\r\n                    long startTime, endTime;\r\n                    int arraySize = 20000;\r\n            \r\n                    // selectionSort\r\n                \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using selectionSort static method\r\n                    Sorter.selectionSort(testArray);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Selection Sort: \" + (endTime - startTime));\r\n                    \r\n            \r\n                    // insertionSort\r\n                   \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using insertionSort static method\r\n                    Sorter.insertionSort(testArray);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Insertion Sort: \" + (endTime - startTime));\r\n                    \r\n                    \r\n                    \r\n            \r\n                    //mergeSort\r\n                    \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using mergeSort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Merge Sort: \" + (endTime - startTime));\r\n                    \r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in random order\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number.\r\n                 */\r\n            \r\n                public static int[] makeRandomArray(int number){\r\n                    int[] array = new int[number];\r\n                    ArrayList<Integer> sorted = new ArrayList<Integer>(number);\r\n                    // Create the sorted list\r\n                    for (int i = 0; i < number; i++){\r\n                        sorted.add(i);\r\n                    }\r\n            \r\n                    // Now shuffle it.\r\n                    int index = 0;\r\n                    while (sorted.size() > 0){\r\n                        int randomIndex = (int)(Math.random()*sorted.size());\r\n                        array[index] = sorted.remove(randomIndex);\r\n                        index ++;\r\n                    }\r\n            \r\n                    return array;\r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in reverse order starting from the parameter number\r\n                 * and going to the value 0.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number. Index 0 is the value number, and\r\n                 * index array.length - 1 is 0\r\n                 */\r\n                public static int[] makeReverseArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   int counter = number;\r\n                   for(int i = 0; i < number; i++)\r\n                   {\r\n                       array[i] = counter;\r\n                       counter--;\r\n                   }\r\n                   return array;\r\n               }\r\n            \r\n               /**\r\n                * This method returns an array that is almost sorted, but the last index\r\n                * and last index-1 are switched.\r\n                * @param number- the length of the desired almost sorted array\r\n                * @return array - returns an array length number with index array.length - 1\r\n                * and array.length- 2 swapped.\r\n                */\r\n               public static int[] makeAlmostSortedArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   for(int i= 0; i < number; i++)\r\n                   {\r\n                       array[i] = i + 1;\r\n                   }\r\n                   int temp = array[array.length - 1];\r\n                   array[array.length - 1] = array[array.length - 2];\r\n                   array[array.length - 2] = temp;\r\n                   return array;\r\n            \r\n               }\r\n            }","n":0.036},"2":{"v":"/codehs/java/10/3/sort-benchmark-testing.html","n":1}}},{"i":49,"$":{"0":{"v":"2.1.9 Phone Skeleton","n":0.577},"1":{"v":"2.1.9 Phone Skeleton/**\r\n            * \r\n            * The phone class represents a cellular phone.\r\n            * \r\n            * Add the instance variables you think a phone would need\r\n            */ \r\n           \r\n           public class Phone\r\n           {\r\n               int countryCode;\r\n               int areaCode;\r\n               int discriminator;\r\n           \r\n           }","n":0.156},"2":{"v":"/codehs/java/2/1/phone-skeleton.html","n":1}}},{"i":50,"$":{"0":{"v":"2.1.8 Pizza Instance Variables","n":0.5},"1":{"v":"2.1.8 Pizza Instance Variablespublic class Pizza\r\n            {\r\n                    String flavor; \r\n                    String styleName;\r\n                    double price;\r\n                    double salePercent;\r\n                    boolean inStock;\r\n            }","n":0.229},"2":{"v":"/codehs/java/2/1/pizza-instance-variables.html","n":1}}},{"i":51,"$":{"0":{"v":"2.10.6 Circle Area","n":0.577},"1":{"v":"2.10.6 Circle Areapublic class Circle\r\n            {\r\n                private double radius;\r\n                \r\n                public Circle(double theRadius)\r\n                {\r\n                    radius = theRadius;\r\n                }\r\n            \r\n                // Implement getArea using\r\n                // Math.PI and\r\n                // Math.pow\r\n                // Area = pi * r^2\r\n                public double getArea()\r\n                {\r\n                    return Math.PI * radius*radius;\r\n                }\r\n                \r\n                // Implement getCircumference using\r\n                // Math.PI\r\n                // Circumference = 2 * PI * r\r\n                public double getCircumference()\r\n                {\r\n                    return 2*Math.PI*radius;\r\n                }\r\n                \r\n            }public class CircleTester \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Circle cup = new Circle(5);\r\n        System.out.println(\"Area of a circle with radius 5: \" + cup.getArea());   \r\n        System.out.println(\"Circumference of a circle with radius 5: \" + cup.getCircumference());   \r\n\r\n        Circle hat = new Circle(12);\r\n        System.out.println(\"\\nArea of a circle with radius 12: \" + hat.getArea());   \r\n        System.out.println(\"Circumference of a circle with radius 12: \" + hat.getCircumference());   \r\n\r\n    }\r\n}","n":0.087},"2":{"v":"/codehs/java/2/10/circle-area.html","n":1}}},{"i":52,"$":{"0":{"v":"2.10.8 Racing","n":0.707},"1":{"v":"2.10.8 Racingpublic class Racecar\r\n            {\r\n                private double accel; // acceleration\r\n                private String name; // name of driver\r\n                \r\n                public Racecar(double acceleration, String driver)\r\n                {\r\n                    accel = acceleration;\r\n                    name = driver;\r\n                }\r\n                \r\n                // Returns the time it takes the racecar\r\n                // to complete the track\r\n                public double computeTime(double distance)\r\n                {\r\n                    return 0.01*Math.round(100*Math.sqrt(2 * distance / accel));\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return \"Racer \" + name;\r\n                }\r\n            }public class RaceMain\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Length of the course in meters\r\n        double distance = 2414; // ~ 1.5 miles\r\n        \r\n        // Generate a random acceleration for each car\r\n        Racecar brett = new Racecar(Math.random()*100+1, \"Dave\");\r\n        Racecar jules = new Racecar(Math.random()*100+1, \"Jules\");\r\n        \r\n        // Create two Racecar objects\r\n        \r\n        // Compute the finishing times for both cars\r\n        double brettTime = brett.computeTime(distance);\r\n        double julesTime = jules.computeTime(distance);\r\n        \r\n        // Print times of each car\r\n        System.out.println(\"First car finished in \" + Math.min(brettTime, julesTime) + \" seconds\");\r\n        System.out.println(\"Second car finished in \" + Math.max(brettTime, julesTime)+ \" seconds\");\r\n                \r\n        \r\n    }\r\n}","n":0.077},"2":{"v":"/codehs/java/2/10/racing.html","n":1}}},{"i":53,"$":{"0":{"v":"2.10.7 The Unit Circle","n":0.5},"1":{"v":"2.10.7 The Unit Circlepublic class UnitCircle \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Radians: (cos, sin)\");\r\n                    \r\n                    //multiply by 100, round, and then divide by 100 to get 2 decimal points\r\n                    System.out.println(\"0.0: \" + (Math.round(Math.cos(0.0)*100)/100) + \", \" + (Math.round(Math.sin(0.0)*100)/100));\r\n            System.out.println(\"1.5707963267948966: \" + (Math.round(Math.cos(1.5707963267948966)*100)/100) + \", \" + (Math.round(Math.sin(1.5707963267948966)*100)/100));\r\n            System.out.println(\"3.141592653589793: \" + (Math.round(Math.cos(3.141592653589793)*100)/100) + \", \" + (Math.round(Math.sin(3.141592653589793)*100)/100));\r\n                }\r\n            }","n":0.128},"2":{"v":"/codehs/java/2/10/the-unit-circle.html","n":1}}},{"i":54,"$":{"0":{"v":"2.2.8 Instance Variables for Your Dog","n":0.408},"1":{"v":"2.2.8 Instance Variables for Your Dogpublic class Dog \r\n            {\r\n                private String breed;\r\n                private String name;\r\n                \r\n                public Dog(String theBreed, String _name)\r\n                {\r\n                    breed = theBreed;\r\n                    name = _name;\r\n                }\r\n                \r\n                // This method should work after you add the\r\n                // new instance variable and update the constructor.\r\n                // DO NOT modify this method.\r\n                public String toString()\r\n                {\r\n                    return name + \" is a \" + breed;\r\n                }\r\n            }public class DogTester \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Dog golden = new Dog(\"Golden Retriever\", \"Sammy\");\r\n        System.out.println(golden);\r\n    }\r\n}","n":0.107},"2":{"v":"/codehs/java/2/2/instance-variables-for-your-dog.html","n":1}}},{"i":55,"$":{"0":{"v":"2.2.9 Pizza Time!","n":0.577},"1":{"v":"2.2.9 Pizza Time!public class Pizza\r\n            {\r\n                private String type;\r\n                private String toppings;\r\n                private int size;\r\n            \r\n                Pizza(String theType, String theToppings, int theSize) {\r\n                    type = theType;\r\n                    toppings = theToppings;\r\n                    size = theSize;\r\n                }\r\n                \r\n                public String toString() {\r\n                    return (size + \"in \" + type + \" pizza with \" + toppings);\r\n                }\r\n            }public class PizzaTester \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        \r\n        System.out.println((new Pizza(\"Veggie\", \"Tomato\", 12)).toString());\r\n        System.out.println((new Pizza(\"Hawaiian\", \"Pineapple\", 10)).toString());\r\n        System.out.println((new Pizza(\"Salad\", \"Lettuce\", 8)).toString());\r\n    }\r\n}","n":0.114},"2":{"v":"/codehs/java/2/2/pizza-time.html","n":1}}},{"i":56,"$":{"0":{"v":"2.2.7 Student GPA Field","n":0.5},"1":{"v":"2.2.7 Student GPA Fieldpublic class StudentTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11, 3.5);\r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 12, 3.8);\r\n                    \r\n                    System.out.println(alan);\r\n                    System.out.println(ada);\r\n                }\r\n            }public class Student\r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private double gpa;\r\n    \r\n    /**\r\n     * This is a constructor.  A constructor is a method\r\n     * that creates an object -- it creates an instance\r\n     * of the class. What that means is it takes the input\r\n     * parameters and sets the instance variables (or fields)\r\n     * to the proper values.\r\n     * \r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor and how to add the gpa to the constructor. \r\n     */\r\n    public Student(String fName, String lName, int grade, double _gpa)\r\n    {\r\n        firstName = fName;\r\n        lastName = lName;\r\n        gradeLevel = grade;\r\n        gpa = _gpa;\r\n    }\r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade: \" + gradeLevel + \" and has GPA: \" + gpa;\r\n    }\r\n}","n":0.07},"2":{"v":"/codehs/java/2/2/student-gpa-field.html","n":1}}},{"i":57,"$":{"0":{"v":"2.2.6 Using the Rectangle Class","n":0.447},"1":{"v":"2.2.6 Using the Rectangle Classpublic class RectangleTester \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a rectangle with width 5 and height 12\r\n                    Rectangle rect = new Rectangle(5, 12);\r\n                    // Then print it out\r\n                    System.out.println(rect.toString());\r\n                }\r\n            }public class Rectangle\r\n{\r\n    // Attributes\r\n    private int width;\r\n    private int height;\r\n    \r\n    // Constructor\r\n    public Rectangle(int rectWidth, int rectHeight)\r\n    {\r\n        width = rectWidth;\r\n        height = rectHeight;\r\n    }\r\n    \r\n    \r\n    // This method lets us print out the object\r\n    // to see the values of the instance variables\r\n    public String toString()\r\n    {\r\n        return \"Rectangle with width: \" + width + \" and height: \" + height;\r\n    }\r\n}","n":0.098},"2":{"v":"/codehs/java/2/2/using-the-rectangle-class.html","n":1}}},{"i":58,"$":{"0":{"v":"2.3.8 Custom Pinatas","n":0.577},"1":{"v":"2.3.8 Custom Pinataspublic class PinataTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Make Pinatas!\r\n                    Pinata ella = new Pinata();\r\n                    Pinata pete = new Pinata(\"chocolate\", \"blue\", \"star\");\r\n                    Pinata sweetie = new Pinata(\"sour straws\");\r\n                    \r\n                    // Print the pinatas\r\n                    System.out.println(ella);\r\n                    System.out.println(pete);\r\n                    System.out.println(sweetie);\r\n                    \r\n                    \r\n                }\r\n            }public class Pinata\r\n{\r\n    // Instance variables\r\n    private String candy;    // what kind of candy is inside\r\n    private String color;    \r\n    private String shape;\r\n    \r\n    // Constructor without parameters\r\n    public Pinata()\r\n    {\r\n        candy = \"hard candy\";\r\n        color = \"rainbow\";\r\n        shape = \"donkey\";\r\n    }\r\n    \r\n    // Add an overloaded constructor that allows the user\r\n    // to customize all of the instance variables\r\n    public Pinata(String _candy, String _color, String _shape) {\r\n        candy = _candy;\r\n        color = _color;\r\n        shape = _shape;\r\n    }\r\n    \r\n    // Add an overloaded constructor that allows the user\r\n    // to customize the color and shape\r\n    public Pinata(String _color, String _shape) {\r\n        candy = \"hard candy\";\r\n        color = _color;\r\n        shape = _shape;\r\n    }\r\n    \r\n    // Add an overloaded constructor that allows the user\r\n    // to customize the candy\r\n    public Pinata(String _candy) {\r\n        candy = _candy;\r\n        color = \"rainbow\";\r\n        shape = \"donkey\";\r\n    }\r\n    \r\n    \r\n    public String toString()\r\n    {\r\n        return color + \" \" + shape + \" pinata filled with \" + candy;\r\n    }\r\n}","n":0.07},"2":{"v":"/codehs/java/2/3/custom-pinatas.html","n":1}}},{"i":59,"$":{"0":{"v":"2.3.10 Empty References","n":0.577},"1":{"v":"2.3.10 Empty Referencespublic class Rectangle\r\n            {\r\n                // Attributes\r\n                private int width;\r\n                private int height;\r\n                \r\n                // Constructor\r\n                // Copies the values of rectWidth and rectHeight\r\n                // into width and height, respectively\r\n                public Rectangle(int rectWidth, int rectHeight)\r\n                {\r\n                    width = rectWidth;\r\n                    height = rectHeight;\r\n                }\r\n                \r\n                // Constructor\r\n                // Allows user to construct a square\r\n                // Copies the value of sidelength\r\n                // into both width and height\r\n                public Rectangle(int sidelength)\r\n                {\r\n                    width = sidelength;\r\n                    height = sidelength;\r\n                }\r\n                \r\n                \r\n                // This method lets us print out the object\r\n                // to see the values of the instance variables\r\n                public String toString()\r\n                {\r\n                    return \"Rectangle with width: \" + width + \" and height: \" + height;\r\n                }\r\n            }public class RectangleTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Fix this code so there are no more\r\n        // null pointer exceptions\r\n        Rectangle brick = new Rectangle(1,1);\r\n        Rectangle fencePost = new Rectangle(1, 3);\r\n        \r\n        System.out.println(brick);\r\n        System.out.println(fencePost);\r\n        \r\n        // Change the fencePost dimensions\r\n        fencePost = new Rectangle(1, 5);\r\n        System.out.println(fencePost);\r\n        \r\n    }\r\n}","n":0.078},"2":{"v":"/codehs/java/2/3/empty-references.html","n":1}}},{"i":60,"$":{"0":{"v":"2.3.7 Plain Coffee","n":0.577},"1":{"v":"2.3.7 Plain Coffeepublic class CoffeeTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Create Specialized Coffee\r\n        Coffee latte = new Coffee(4, false, \"soy\");\r\n        System.out.println(latte);\r\n        \r\n        // Create a default coffee\r\n        // This should work after you create the default\r\n        // constructor\r\n        Coffee plain = new Coffee();\r\n        System.out.println(plain);\r\n        \r\n    }\r\n}/*\r\n* This class represents a cup of coffee\r\n* \r\n*/\r\npublic class Coffee\r\n{\r\n    // Instance Variables\r\n    private int brewStrength; // on a scale of 1 to 5, 5 being the darkest\r\n    private boolean sugar;    // has sugar (true) or does not (false)\r\n    \r\n    // takes the values \"none\", \"whole\", \"nonfat\", \"soy\", or \"almond\"\r\n    private String milkType; \r\n    \r\n    // Add a default constructor (no parameters)\r\n    // to initialize the instance variables\r\n    // to a default cup of coffee\r\n    \r\n    \r\n    // Specialized constructor\r\n    public Coffee(int howStrong, boolean hasSugar, String milk)\r\n    {\r\n        brewStrength = howStrong;\r\n        sugar = hasSugar;\r\n        milkType = milk;\r\n    }\r\n    \r\n    public Coffee() {\r\n        brewStrength = 3;\r\n        sugar = true;\r\n        milkType = \"whole\";\r\n    }\r\n    \r\n    \r\n    // String representation to print\r\n    // Do not modify this function\r\n    public String toString()\r\n    {\r\n        return \"Coffee brewed to level \" + brewStrength + \" with \" + milkType + \" milk. Sugar? \" + sugar;\r\n    }\r\n    \r\n}","n":0.071},"2":{"v":"/codehs/java/2/3/plain-coffee.html","n":1}}},{"i":61,"$":{"0":{"v":"2.3.9 Website Class","n":0.577},"1":{"v":"2.3.9 Website Classpublic class WebsiteTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(new Website());\r\n                    System.out.println(new Website(\"mass\",\"edu\"));\r\n                    System.out.println(new Website(\"code\",\"edu\", 10));\r\n                }\r\n            }public class Website\r\n{\r\n    // Put your code here\r\n    \r\n    String domain;\r\n    String topLevelDomain;\r\n    int numUsers;\r\n    \r\n    \r\n    //Default constructor\r\n    public Website() {\r\n        domain = \"\";\r\n        topLevelDomain = \"com\";\r\n        numUsers = 0;\r\n    }\r\n    \r\n    // Specify website URL\r\n    // Register a new website\r\n    public Website(String domainName, String topDomain) {\r\n        domain = domainName;\r\n        topLevelDomain = topDomain;\r\n        numUsers = 0;\r\n    }\r\n    \r\n    // Specify website URL\r\n    // Register an old website\r\n    public Website(String domainName, String topDomain, int numPeople) {\r\n        domain = domainName;\r\n        topLevelDomain = topDomain;\r\n        numUsers = numPeople;\r\n    }\r\n    \r\n    \r\n    \r\n    // String representation for printing\r\n    // Do not modify this method\r\n    public String toString()\r\n    {\r\n        String res =  \"https://www.\" + domain + \".\" + topLevelDomain;\r\n        res += \" has \" + numUsers + \" users\";\r\n        \r\n        return res;\r\n    }\r\n}","n":0.082},"2":{"v":"/codehs/java/2/3/website-class.html","n":1}}},{"i":62,"$":{"0":{"v":"2.4.7 Chat Bot","n":0.577},"1":{"v":"2.4.7 Chat Botpublic class Bot {\r\n\r\n                private String name;\r\n            \r\n                public Bot (String yourName){\r\n                    name = yourName;\r\n                }\r\n            \r\n                public void greeting(){\r\n                    System.out.print(\"Hello \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"! My name is Hal!\");\r\n                    System.out.println(\"How are you today!\");\r\n                }\r\n            \r\n                public void help(){\r\n                    System.out.println(\"You can ask me about the weather,\");\r\n                    System.out.println(\"or how many feet are in a mile.\");\r\n                    System.out.println(\"I can even convert feet to meters!\");\r\n                }\r\n            \r\n                public void weather(){\r\n                    System.out.println(\"Its always warm and dry inside your computer!\");\r\n                }\r\n            \r\n                public void feetInMile() {\r\n                    System.out.println(\"There are 5280 feet in a mile.\");\r\n                }\r\n            \r\n                public void goodbye(){\r\n                    System.out.println(\"It was nice talking with you!\");\r\n                    System.out.println(\"Have a great day!\");\r\n                }\r\n            \r\n                public void favoriteNumber(int yourNumber){\r\n                    System.out.println(\"My favorite number is 8.\");\r\n                    System.out.print(\"That is \");\r\n                    System.out.print(yourNumber - 8);\r\n                    System.out.println(\" away from your number\");\r\n                }\r\n            \r\n                public double feetToMeters(double feet){\r\n                    double meters = feet * 0.3048;\r\n                    return meters;\r\n                }\r\n            \r\n            }import java.util.Scanner;\r\n\r\npublic class BotTester\r\n{\r\n    public static void main(String[] args) {\r\n\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        System.out.println(\"Hello. What is your name? What's the weather like?\\nHow many feet in a mile?\");\r\n        \r\n        String name = input.nextLine();\r\n        \r\n        Bot bot = new Bot(name);\r\n        \r\n        bot.greeting();\r\n        bot.help();\r\n        bot.weather();\r\n        bot.feetInMile();\r\n        bot.goodbye();\r\n        \r\n    }\r\n}","n":0.073},"2":{"v":"/codehs/java/2/4/chat-bot.html","n":1}}},{"i":63,"$":{"0":{"v":"2.4.8 Greetings and Salutations","n":0.5},"1":{"v":"2.4.8 Greetings and SalutationsJSYK\r\n            You don't have to fill in SalutationsTester at all; the auto-grader doesn't care about it. You'll be approved either way!public class SalutationsTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Test your class here\r\n    }\r\n}public class Salutations\r\n            {\r\n                String name;\r\n                public Salutations(String _name) {\r\n                    name = _name;\r\n                }\r\n                public void addressLetter() {\r\n                    System.out.println(\"Dear \" + name);\r\n                }\r\n                public void signLetter() {\r\n                    System.out.println(\"Sincerely,\\n\" + name);\r\n                }\r\n                public void addressMemo()  {\r\n                    System.out.println(\"To whom it may concern\");\r\n                }\r\n                public void signMemo() {\r\n                    System.out.println(\"Best,\\n\" + name);\r\n                }\r\n            }","n":0.107},"2":{"v":"/codehs/java/2/4/greetings-and-salutations.html","n":1}}},{"i":64,"$":{"0":{"v":"2.4.5 Hello!","n":0.707},"1":{"v":"2.4.5 Hello!import java.util.Scanner;\r\n\r\n            public class HelloTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Scanner object\r\n                    Scanner input = new Scanner(System.in);\r\n                    String name = input.nextLine();\r\n                    Hello hello = new Hello(name);\r\n            \r\n                    hello.spanish();\r\n                    hello.english();\r\n                    hello.french();\r\n                }\r\n            }public class Hello {\r\n\r\n                private String name;\r\n            \r\n                public Hello (String yourName){\r\n                    name = yourName;\r\n                }\r\n            \r\n                public void english(){\r\n                    System.out.print(\"Hello \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void spanish(){\r\n                    System.out.print(\"Hola \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void french(){\r\n                    System.out.print(\"Bonjour \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void german(){\r\n                    System.out.print(\"Hallo \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void russian(){\r\n                    System.out.print(\"Privet \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void chinese(){\r\n                    System.out.print(\"Ni hao \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            }","n":0.096},"2":{"v":"/codehs/java/2/4/hello.html","n":1}}},{"i":65,"$":{"0":{"v":"2.4.6 Loose Change","n":0.577},"1":{"v":"2.4.6 Loose Changepublic class Coins {\r\n\r\n                private int quarters;\r\n                private int dimes;\r\n                private int nickels;\r\n                private int pennies;\r\n            \r\n                public Coins(int numQuarters, int numDimes, int numNickels, int numPennies){\r\n                    quarters = numQuarters;\r\n                    dimes = numDimes;\r\n                    nickels = numNickels;\r\n                    pennies = numPennies;\r\n                }\r\n            \r\n                public void addQuarter(){\r\n                    quarters ++;\r\n                }\r\n            \r\n                public void addDime(){\r\n                    dimes ++;\r\n                }\r\n            \r\n                public void addNickel(){\r\n                    nickels ++;\r\n                }\r\n            \r\n                public void addPenny(){\r\n                    pennies ++;\r\n                }\r\n                \r\n                public void dimesCount(){\r\n                    System.out.println(dimes);\r\n                }\r\n            \r\n                public void bankValue(){\r\n                    System.out.println(quarters * 0.25 + dimes * 0.10\r\n                            + nickels * 0.05 + pennies * 0.01);\r\n                }\r\n            \r\n                public void bankCount(){\r\n                    System.out.println(quarters + dimes + nickels + pennies);\r\n                }\r\n            }public class CoinTester\r\n{\r\n    public static void main(String[] args) {\r\n        Coins bank = new Coins(4,3,2,1);\r\n        \r\n        bank.addQuarter();\r\n        bank.addQuarter();\r\n        bank.addDime();\r\n        bank.addDime();\r\n        bank.addPenny();\r\n        \r\n        bank.bankCount();\r\n        bank.bankValue();\r\n    }\r\n}","n":0.087},"2":{"v":"/codehs/java/2/4/loose-change.html","n":1}}},{"i":66,"$":{"0":{"v":"2.5.7 Basketball Players","n":0.577},"1":{"v":"2.5.7 Basketball Playerspublic class BasketballPlayer {\r\n\r\n                /* This class is complete. Take a look around\r\n                 * to make sure you understand how to use it,\r\n                 * but you do not need to make changes.\r\n                 */\r\n                private String name;\r\n                private String team;\r\n                private int totalPoints;\r\n                private int totalAssists;\r\n                private int gamesPlayed;\r\n            \r\n                public BasketballPlayer(String playerName, String currentTeam) {\r\n                    name = playerName;\r\n                    team = currentTeam;\r\n                    totalPoints = 0;\r\n                    gamesPlayed = 0;\r\n                }\r\n            \r\n                public BasketballPlayer(String playerName) {\r\n                    // this() is a shortcut to calling the other constructor\r\n                    // in this class. We will see more of 'this' in a later\r\n                    // unit, but it is shown here as a best practice.\r\n                    this(playerName, \"no team\");\r\n                }\r\n            \r\n                public void addGame(int points, int assists) {\r\n                    totalPoints += points;\r\n                    totalAssists += assists;\r\n                    gamesPlayed ++;\r\n                }\r\n            \r\n                public void printPPG() {\r\n                    System.out.print(\"Points per game: \");\r\n                    System.out.println((double) totalPoints / gamesPlayed);\r\n                }\r\n            \r\n                public void printAPG() {\r\n                    System.out.print(\"Assists per game: \");\r\n                    System.out.println((double) totalAssists / gamesPlayed);\r\n                }\r\n            \r\n                public String toString() {\r\n                    return name + \" averages \" + ((double) totalPoints / gamesPlayed) + \" points per game.\";\r\n                }\r\n            }public class PlayerTester\r\n{\r\n    public static void main(String[] args) {\r\n       \r\n      BasketballPlayer lebron = new BasketballPlayer(\"Lebron James\", \"Boston Team\");\r\n      System.out.println(\"Lebron James Stats:\");\r\n        lebron.addGame(12, 10);\r\n        lebron.addGame(0, 10);\r\n        lebron.addGame(15, 10);\r\n        lebron.addGame(12, 10);\r\n        \r\n        lebron.printPPG();\r\n        lebron.printAPG();\r\n        System.out.println(lebron.toString());\r\n        System.out.println();\r\n        \r\n        BasketballPlayer michael = new BasketballPlayer(\"Michael Jordan\");\r\n        System.out.println(\"Michael Jordan Stats:\");\r\n        michael.addGame(12, 10);\r\n        michael.addGame(0, 10);\r\n        michael.addGame(15, 10);\r\n        michael.addGame(12, 10);\r\n        \r\n        michael.printPPG();\r\n        michael.printAPG();\r\n        System.out.println(michael.toString());\r\n\r\n\r\n    }\r\n}","n":0.065},"2":{"v":"/codehs/java/2/5/basketball-players.html","n":1}}},{"i":67,"$":{"0":{"v":"2.5.9 Chat Bot 2.0","n":0.5},"1":{"v":"2.5.9 Chat Bot 2.0import java.util.Scanner;\r\n\r\n            public class Bot2Tester\r\n            {\r\n                public static void main(String[] args) {\r\n            \r\n                   Scanner input = new Scanner(System.in);\r\n                   System.out.print(\"Hello. What is your name?\");\r\n                   Bot2 hal = new Bot2(input.nextLine());\r\n                   hal.greeting();\r\n                   System.out.println(\"What is your favorite animal?\");\r\n                   String animal = input.nextLine();\r\n                   System.out.println(\"\\n\");\r\n                   hal.favoriteAnimal(animal);\r\n                   \r\n                   hal.home(input.nextLine());\r\n                   hal.favoriteNumber(input.nextInt());\r\n                   hal.goodbye();\r\n                }\r\n            }public class Bot2 {\r\n\r\n                private String name;\r\n            \r\n                public Bot2 (String yourName){\r\n                    name = yourName;\r\n                }\r\n            \r\n                public void greeting(){\r\n                    System.out.print(\"Hello \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"! My name is Hal!\");\r\n                    System.out.println(\"How are you today!\");\r\n                }\r\n            \r\n                public void help(){\r\n                    System.out.println(\"You can ask me about the weather,\");\r\n                    System.out.println(\"or how many feet are in a mile.\");\r\n                    System.out.println(\"I can even convert feet to meters!\");\r\n                }\r\n            \r\n                public void weather(){\r\n                    System.out.println(\"It's always warm and dry inside your computer!\");\r\n                }\r\n            \r\n                public void feetInMile() {\r\n                    System.out.println(\"There are 5280 feet in a mile.\");\r\n                }\r\n            \r\n                public void goodbye(){\r\n                    System.out.println(\"It was nice talking with you!\");\r\n                    System.out.println(\"Have a great day!\");\r\n                }\r\n            \r\n                public void favoriteNumber(int yourNumber){\r\n                    System.out.println(\"My favorite number is 8.\");\r\n                    System.out.print(\"That is \");\r\n                    System.out.print(yourNumber - 8);\r\n                    System.out.println(\" away from your number.\");\r\n                }\r\n            \r\n                public void favoriteAnimal(String yourAnimal){\r\n                    System.out.print(\"Cool. I also like \");\r\n                    System.out.print(yourAnimal);\r\n                    System.out.println(\"s.\");\r\n                    System.out.println(\"My favorite animals are dogs. Have you met Karel?\");\r\n                }\r\n            \r\n                public void home(String location){\r\n                    System.out.print(\"I heard it is really nice in \");\r\n                    System.out.print(location);\r\n                    System.out.println(\".\");\r\n                    System.out.println(\"I live in a cloud, which is actually pretty cool!\");\r\n                }\r\n            \r\n                public double feetToMeters(double feet){\r\n                    double meters = feet * 0.3048;\r\n                    return meters;\r\n                }\r\n            \r\n            }","n":0.065},"2":{"v":"/codehs/java/2/5/chat-bot-2-0.html","n":1}}},{"i":68,"$":{"0":{"v":"2.5.8 More Operations","n":0.577},"1":{"v":"2.5.8 More Operationsimport java.util.Scanner;\r\n\r\n            public class CalculatorTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter 2 doubles\");\r\n                    \r\n                    double x = in.nextDouble();\r\n                    double y = in.nextDouble();\r\n                    \r\n                    Calculator calc = new Calculator();\r\n                    calc.sum(x, y);\r\n                    calc.subtract(x, y);\r\n                    calc.multiply(x, y);\r\n                    calc.divide(x, y);\r\n                }\r\n            }public class Calculator\r\n{\r\n    // This class does not need instance variables!\r\n    \r\n    // Prints the sum of x and y\r\n    public void sum(double x, double y)\r\n    {\r\n        double result = x + y;\r\n        System.out.print(x);\r\n        System.out.print(\" + \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n    \r\n    // Prints the product of x and y\r\n    public void multiply(double x, double y)\r\n    {\r\n        double result = x * y;\r\n        System.out.print(x);\r\n        System.out.print(\" * \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n    \r\n    // Prints the product of x and y\r\n    public void divide(double x, double y)\r\n    {\r\n        double result = x / y;\r\n        System.out.print(x);\r\n        System.out.print(\" / \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n    \r\n    // Prints the product of x and y\r\n    public void subtract(double x, double y)\r\n    {\r\n        double result = x - y;\r\n        System.out.print(x);\r\n        System.out.print(\" - \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n}","n":0.073},"2":{"v":"/codehs/java/2/5/more-operations.html","n":1}}},{"i":69,"$":{"0":{"v":"2.5.5 Using the Point Class","n":0.447},"1":{"v":"2.5.5 Using the Point Classpublic class Point\r\n            {\r\n                private int x;\r\n                private int y;\r\n                \r\n                public Point(int xCoord, int yCoord)\r\n                {\r\n                    x = xCoord;\r\n                    y = yCoord;\r\n                }\r\n                \r\n                public void move(int dx, int dy)\r\n                {\r\n                    x += dx;\r\n                    y += dy;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return x + \", \" + y;\r\n                }\r\n            }public class PointTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Point p = new Point(10, 5);\r\n        System.out.println(p);\r\n        p.move(3, 4);\r\n        \r\n        System.out.println(p);\r\n        \r\n        Point p2 = new Point(2, 4);\r\n        System.out.println(p2);\r\n        p2.move(5, 2);\r\n        \r\n        System.out.println(p2);\r\n\r\n    }\r\n}","n":0.106},"2":{"v":"/codehs/java/2/5/using-the-point-class.html","n":1}}},{"i":70,"$":{"0":{"v":"2.6.7 Construction Costs","n":0.577},"1":{"v":"2.6.7 Construction Costspublic class Construction\r\n            {\r\n                \r\n                private double lumber;  // price per board \r\n                private double windows; // price per square inch of window\r\n                private double taxRate; \r\n               \r\n                \r\n                public Construction(double lumberCost, double windowCost, double taxes)\r\n                {\r\n                    lumber = lumberCost;\r\n                    windows = windowCost;\r\n                    taxRate = taxes;\r\n                }\r\n                \r\n                // Computes and returns the cost\r\n                // of the lumber\r\n                public double lumberCost(int numBoards)\r\n                {\r\n                    return lumber * numBoards;   \r\n                }\r\n                \r\n                // Computes and returns the cost of the windows\r\n                public double windowCost(int numWindows)\r\n                {\r\n                    return windows * numWindows;   \r\n                }\r\n                \r\n                // Computes the grand total by adding\r\n                // the tax amount to the total\r\n                public double grandTotal(double total)\r\n                {\r\n                    return total * (1 + taxRate);\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class ConstructionTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.println(\"Enter the sales tax rate:\");\r\n        double taxRate = input.nextDouble();\r\n        System.out.println(\"How many boards do you need? \");\r\n        int boards = input.nextInt();\r\n        System.out.println(\"How many windows do you need? \");\r\n        int windows = input.nextInt();\r\n        \r\n        Construction buildPlan = new Construction(8, 11, taxRate);\r\n        System.out.println(\"Total: \" + (buildPlan.windowCost(windows) + buildPlan.lumberCost(boards)));\r\n        System.out.println(\"Grand Total: \" + buildPlan.grandTotal(buildPlan.windowCost(windows) + buildPlan.lumberCost(boards)));\r\n    }\r\n}","n":0.073},"2":{"v":"/codehs/java/2/6/construction-costs.html","n":1}}},{"i":71,"$":{"0":{"v":"2.6.8 How Far Away is ...?","n":0.408},"1":{"v":"2.6.8 How Far Away is ...?/*\r\n            * This class stores information about a location on Earth.  Locations are\r\n            * specified using latitude and longitude.  The class includes a method for\r\n            * computing the distance between two locations.\r\n            *\r\n            * This implementation is based off of the example from Stuart Reges at \r\n            * the University of Washington.\r\n            */\r\n           \r\n           public class GeoLocation \r\n           {\r\n               // Earth radius in miles\r\n               public static final double RADIUS = 3963.1676;  \r\n           \r\n               private double latitude;\r\n               private double longitude;\r\n           \r\n               /**\r\n                * Constructs a geo location object with given latitude and longitude\r\n                */\r\n               public GeoLocation(double theLatitude, double theLongitude) \r\n               {\r\n                   latitude = theLatitude;\r\n                   longitude = theLongitude;\r\n               }\r\n           \r\n               /**\r\n                * Returns the latitude of this geo location\r\n                */\r\n               public double getLatitude() \r\n               {\r\n                   return latitude;\r\n               }\r\n           \r\n               /**\r\n                * returns the longitude of this geo location\r\n                */\r\n               public double getLongitude() \r\n               {\r\n                   return longitude;\r\n               }\r\n           \r\n               // returns a string representation of this geo location\r\n               public String toString() \r\n               {\r\n                   return \"latitude: \" + latitude + \", longitude: \" + longitude;\r\n               }\r\n           \r\n               // returns the distance in miles between this geo location and the given\r\n               // other geo location\r\n               public double distanceFrom(GeoLocation other) \r\n               {\r\n                   double lat1 = Math.toRadians(latitude);\r\n                   double long1 = Math.toRadians(longitude);\r\n                   double lat2 = Math.toRadians(other.latitude);\r\n                   double long2 = Math.toRadians(other.longitude);\r\n                   // apply the spherical law of cosines with a triangle composed of the\r\n                   // two locations and the north pole\r\n                   double theCos = Math.sin(lat1) * Math.sin(lat2) +\r\n                       Math.cos(lat1) * Math.cos(lat2) * Math.cos(long1 - long2);\r\n                   double arcLength = Math.acos(theCos);\r\n                   return arcLength * RADIUS;\r\n               }\r\n           }import java.util.Scanner;\r\n\r\npublic class HowFarAway \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.print(\"Enter the latitude of the starting location: \");\r\n        double startLat = input.nextDouble();\r\n        \r\n        System.out.print(\"\\nEnter the longitude of the starting location: \");\r\n        double startLong = input.nextDouble();\r\n        \r\n        System.out.print(\"\\nEnter the latitude of the ending location: \");\r\n        double endLat = input.nextDouble();\r\n        \r\n        System.out.print(\"\\nEnter the longitude of the ending location: \");\r\n        double endLong = input.nextDouble();\r\n        \r\n        System.out.println(\"The distance is \" + (new GeoLocation(startLat, startLong)).distanceFrom(new GeoLocation(endLat, endLong)) + \" miles.\");\r\n\r\n\r\n    }\r\n}","n":0.054},"2":{"v":"/codehs/java/2/6/how-far-away-is.html","n":1}}},{"i":72,"$":{"0":{"v":"2.6.6 Number Games","n":0.577},"1":{"v":"2.6.6 Number Gamespublic class NumberGames\r\n            {\r\n                \r\n                // Keep track of the number\r\n                private double num;\r\n                \r\n                // Constructor\r\n                public NumberGames(double startingNumber)\r\n                {\r\n                    num = startingNumber;\r\n                }\r\n                \r\n                // Returns the number\r\n                public double getNumber()\r\n                {\r\n                    return num;\r\n                }\r\n                \r\n                // Doubles the number\r\n                // Returns the doubled number\r\n                public double doubleNumber()\r\n                {\r\n                    num *= 2;\r\n                    return num;\r\n                }\r\n                \r\n                // Squares the number\r\n                // Returns the squared number\r\n                public double squareNumber()\r\n                {\r\n                    num *= num;\r\n                    return num;\r\n                }\r\n                \r\n                \r\n            }public class GamesTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        NumberGames game = new NumberGames(3);\r\n        \r\n        // Double the number\r\n        // Print it out\r\n        System.out.println(game.doubleNumber());\r\n        \r\n        // Square the number\r\n        // Print it out\r\n        System.out.println(game.squareNumber());\r\n        // Double the number again\r\n        // Print it out\r\n        System.out.println(game.doubleNumber());\r\n        \r\n        // Get the number and store the value\r\n        // Print it out to see that getNumber does\r\n        // not modify the number\r\n        System.out.println(game.getNumber());\r\n    }\r\n}","n":0.082},"2":{"v":"/codehs/java/2/6/number-games.html","n":1}}},{"i":73,"$":{"0":{"v":"2.7.8 Full Name","n":0.577},"1":{"v":"2.7.8 Full Namepublic class FormFillTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    FormFill filler = new FormFill(\"Karel\", \"Dog\");\r\n                    filler.setAddress(123, \"Cherry Lane\", \"4B\");\r\n                    \r\n                    System.out.println(filler.fullName());\r\n                    System.out.println(filler.streetAddress());\r\n                    \r\n                    System.out.println(filler.creditCardInfo(123456789, 10, 2025));\r\n                    \r\n                }\r\n            }public class FormFill\r\n{\r\n    \r\n    private String fName;\r\n    private String lName;\r\n    private int streetNumber;\r\n    private String streetName;\r\n    private String aptNumber;\r\n    \r\n    // Constructor that sets the first and last name\r\n    // streetNumber defaults to 0\r\n    // the others default to an empty String\r\n    public FormFill(String firstName, String lastName)\r\n    {\r\n        fName = firstName;\r\n        lName = lastName;\r\n    }\r\n    \r\n    // Sets streetNumber, streetName, and aptNumber to the given\r\n    // values\r\n    public void setAddress(int number, String street, String apt)\r\n    {\r\n        streetNumber = number;\r\n        streetName = street;\r\n        aptNumber = apt;\r\n    }\r\n    \r\n    // Returns a string with the name formatted like\r\n    // a doctor would write the name on a file\r\n    // \r\n    // Return string should be formatted \r\n    // with the last name, then a comma and space, then the first name.\r\n    // For example: LastName, FirstName\r\n    public String fullName()\r\n    {\r\n        return lName + \", \" + fName;\r\n    }\r\n    \r\n    // Returns the formatted address\r\n    // Formatted like this\r\n    // \r\n    // StreetNumber StreetName\r\n    // Apt AptNumber\r\n    //\r\n    // You will need to use the escape character \\n\r\n    // To create a new line in the String\r\n    public String streetAddress()\r\n    {\r\n        return streetNumber + \" \" + streetName + \"\\nApt \" + aptNumber;\r\n    }\r\n    \r\n    // Returns a string with the credit card information\r\n    // Formatted like this:\r\n    // \r\n    // Card Number: Card#\r\n    // Expires: expMonth/expYear\r\n    // \r\n    // Take information as parameters so we don't store sensitive information!\r\n    // You will need to use the escape character \\n\r\n    public String creditCardInfo(int creditCardNumber, int expMonth, int expYear)\r\n    {\r\n        return \"Card Number: \" + creditCardNumber  + \"\\nExpires: \" + expMonth + \"/\" + expYear;\r\n    }\r\n    \r\n}","n":0.057},"2":{"v":"/codehs/java/2/7/full-name.html","n":1}}},{"i":74,"$":{"0":{"v":"2.7.7 Pretty Printing Operations","n":0.5},"1":{"v":"2.7.7 Pretty Printing Operationspublic class Calculator\r\n            {\r\n                // This class does not need instance variables!\r\n                // Since there are no instance variables,\r\n                // this class also does not need a constructor.\r\n                \r\n                // Java will create an empty constructor for you.\r\n                \r\n                // Returns the sum of x and y\r\n                public double sum(double x, double y)\r\n                {\r\n                    return x + y;\r\n                    \r\n                }\r\n                \r\n                // Returns the product of x and y\r\n                public double multiply(double x, double y)\r\n                {\r\n                    return x * y;\r\n                    \r\n                }\r\n                \r\n                // Returns the quotient x / y\r\n                public double divide(double x, double y)\r\n                {\r\n                   return x / y;\r\n                }\r\n                \r\n                // Returns the difference of x - y\r\n                public double subtract(double x, double y)\r\n                {\r\n                    return x - y;\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class CalculatorTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.println(\"Enter two doubles\");\r\n        double a = input.nextDouble();\r\n        double b = input.nextDouble();\r\n        \r\n        Calculator calc = new Calculator();\r\n        \r\n        System.out.println(a + \" + \" + b + \" = \" + calc.sum(a, b));\r\n        System.out.println(a + \" - \" + b + \" = \" + calc.subtract(a, b));\r\n        System.out.println(a + \" * \" + b + \" = \" + calc.multiply(a, b));\r\n        System.out.println(a + \" / \" + b + \" = \" + calc.divide(a, b));\r\n\r\n    }\r\n}","n":0.068},"2":{"v":"/codehs/java/2/7/pretty-printing-operations.html","n":1}}},{"i":75,"$":{"0":{"v":"2.7.9 QuoteMachine","n":0.707},"1":{"v":"2.7.9 QuoteMachineimport java.util.Scanner;\r\n\r\n            public class QuoteMachine\r\n            {\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Ask for a quote\r\n                    System.out.println(\"Enter a quote: \");\r\n                    String quote = input.nextLine();\r\n                    // Ask for the author\r\n                    System.out.println(\"Enter the author of the quote: \");\r\n                    String author = input.nextLine();\r\n                    \r\n                    // Create a new String that has the quote in quotation marks\r\n                    // Don't forget to escape the quotation marks\r\n                    String quoted = \"\\\"\" + quote + \"\\\"\";\r\n                    // Print the quote, then the author on the next line \r\n                    // But you can only use ONE print statement!\r\n                    System.out.println(quoted + \"\\n\" + author);\r\n                }\r\n            }","n":0.097},"2":{"v":"/codehs/java/2/7/quotemachine.html","n":1}}},{"i":76,"$":{"0":{"v":"2.8.9 Concatenating Fractions","n":0.577},"1":{"v":"2.8.9 Concatenating Fractionspublic class Fraction\r\n            {\r\n                private int numerator;\r\n                private int denominator;\r\n                \r\n                public Fraction(int numer, int denom)\r\n                {\r\n                    numerator = numer;\r\n                    denominator = denom;\r\n                }\r\n                \r\n                // Returns the numerator\r\n                public int getNumerator()\r\n                {\r\n                    return numerator;\r\n                }\r\n                \r\n                // Returns the denominator\r\n                public int getDenominator()\r\n                {\r\n                    return denominator;\r\n                }\r\n                \r\n                \r\n                // Returns a string representing a fraction\r\n                // in the form\r\n                // numerator/denominator\r\n                public String toString()\r\n                {\r\n                    return numerator + \"/\" + denominator;\r\n                }\r\n                \r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class FractionTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Create objects\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        // Ask for input\r\n        System.out.println(\"Enter the numerator:\");\r\n        int numer = input.nextInt();\r\n        \r\n        System.out.println(\"Enter the denominator:\");\r\n        int denom = input.nextInt();\r\n        // Create a new Fraction with the user's input\r\n        Fraction fr = new Fraction(numer, denom);\r\n        Fraction half = new Fraction(1, 2);\r\n        // Add the fractions\r\n        // Make use of the getDenominator and getNumerator methods\r\n        Fraction result = new Fraction((1*denom + 2*numer),\r\n                                        2 * denom);\r\n        \r\n        // Print out the fractions as an equation\r\n        // Remember you don't have to call toString yourself!\r\n        System.out.println(half + \" + \" + fr + \" = \" + result);\r\n        \r\n    }\r\n}","n":0.072},"2":{"v":"/codehs/java/2/8/concatenating-fractions.html","n":1}}},{"i":77,"$":{"0":{"v":"2.8.8 Organizing Files","n":0.577},"1":{"v":"2.8.8 Organizing Filespublic class Filer\r\n            {\r\n                private String word;\r\n                \r\n                public Filer(String theWord)\r\n                {\r\n                    word = theWord;\r\n                }\r\n                \r\n                // Returns the word\r\n                public String getWord()\r\n                {\r\n                    return word;\r\n                }\r\n                \r\n                // Returns true if word comes\r\n                // before otherWord.\r\n                // Returns false otherwise.\r\n                public boolean comesBefore(String otherWord)\r\n                {\r\n                    return word.compareTo(otherWord) < 0;\r\n                }\r\n                \r\n                \r\n                // Returns true if word comes\r\n                // after otherWord.\r\n                // Returns false otherwise.\r\n                public boolean comesAfter(String otherWord)\r\n                {\r\n                    return word.compareTo(otherWord) > 0;\r\n                }\r\n                \r\n                \r\n                // Returns true if word is equal to otherWord.\r\n                // Returns false otherwise.\r\n                public boolean isEqual(String otherWord)\r\n                {\r\n                    return word.equals(otherWord);\r\n                }\r\n                \r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class FilerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Filer files = new Filer(\"hippo\");\r\n        \r\n        String word = \"zebra\";\r\n        \r\n        System.out.println(files.getWord() + \" comes before \" + word + \"?\");\r\n        System.out.println(files.comesBefore(word));\r\n        System.out.println(files.getWord() + \" comes after \" + word + \"?\");\r\n        System.out.println(files.comesAfter(word));\r\n        System.out.println(files.getWord() + \" is equal to  \" + word + \"?\");\r\n        System.out.println(files.isEqual(word));\r\n        \r\n        \r\n        // Notice that the capitalization matters\r\n        word = \"Hippo\";\r\n        System.out.println(\"\\n\\n\");\r\n        System.out.println(files.getWord() + \" comes before \" + word + \"?\");\r\n        System.out.println(files.comesBefore(word));\r\n        System.out.println(files.getWord() + \" comes after \" + word + \"?\");\r\n        System.out.println(files.comesAfter(word));\r\n        System.out.println(files.getWord() + \" is equal to  \" + word + \"?\");\r\n        System.out.println(files.isEqual(word));\r\n        \r\n        \r\n        \r\n        System.out.println(\"\\n\\n\");\r\n        System.out.print(\"Enter a word: \");\r\n        Scanner input = new Scanner(System.in);\r\n        word = input.nextLine();\r\n        System.out.println(files.getWord() + \" comes before \" + word + \"?\");\r\n        System.out.println(files.comesBefore(word));\r\n        System.out.println(files.getWord() + \" comes after \" + word + \"?\");\r\n        System.out.println(files.comesAfter(word));\r\n        System.out.println(files.getWord() + \" is equal to  \" + word + \"?\");\r\n        System.out.println(files.isEqual(word));\r\n\r\n    }\r\n}","n":0.063},"2":{"v":"/codehs/java/2/8/organizing-files.html","n":1}}},{"i":78,"$":{"0":{"v":"2.8.6 Speaking","n":0.707},"1":{"v":"2.8.6 Speakingimport java.util.Scanner;\r\n\r\n            public class TalkerTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter some text: \");\r\n                    String words = input.nextLine();\r\n                    \r\n                    \r\n                    Talker talky = new Talker(words); \r\n                    String yelling = talky.yell();\r\n                    String whispers = talky.whisper();\r\n                    \r\n                    System.out.println(talky);\r\n                    System.out.println(\"Yelling: \" + yelling);\r\n                    System.out.println(\"Whispering: \" + whispers);\r\n                    \r\n                }\r\n            }public class Talker\r\n{\r\n    private String text;\r\n    \r\n    // Constructor\r\n    public Talker(String startingText)\r\n    {\r\n        this.text = startingText;\r\n    }\r\n    \r\n    // Returns the text in all uppercase letters\r\n    // Find a method in the JavaDocs that\r\n    // will allow you to do this with just\r\n    // one method call\r\n    public String yell()\r\n    {\r\n        return text.toUpperCase();\r\n    }\r\n    \r\n    // Returns the text in all lowercase letters\r\n    // Find a method in the JavaDocs that\r\n    // will allow you to do this with just\r\n    // one method call\r\n    public String whisper()\r\n    {\r\n        return text.toLowerCase();\r\n    }\r\n    \r\n    // Reset the instance variable to the new text\r\n    public void setText(String newText)\r\n    {\r\n        this.text = newText;\r\n    }\r\n    \r\n    // Returns a String representatin of this object\r\n    // The returned String should look like\r\n    // \r\n    // I say, \"text\"\r\n    // \r\n    // The quotes should appear in the String\r\n    // text should be the value of the instance variable\r\n    public String toString()\r\n    {\r\n        return \"I say, \\\"\" + text + \"\\\"\"; \r\n    }\r\n}","n":0.067},"2":{"v":"/codehs/java/2/8/speaking.html","n":1}}},{"i":79,"$":{"0":{"v":"2.8.7 toString for Flowers","n":0.5},"1":{"v":"2.8.7 toString for Flowerspublic class Flower\r\n            {\r\n            \r\n                private String name;\r\n                private String color;\r\n                private String genus;\r\n                private String species;\r\n            \r\n                public Flower(String theName, String theColor, String theGenus, String theSpecies)\r\n                {\r\n                    name = theName;\r\n                    color = theColor;\r\n                    genus = theGenus;\r\n                    species = theSpecies;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return color + \" \" + name + \" (\"  + genus + \" \" + species + \")\";\r\n                }\r\n            }public class FlowerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n       Flower foxglove = new Flower(\"Foxglove\", \"Red\", \"Digitalis\", \"obscura\");\r\n        System.out.println(foxglove);\r\n    }\r\n}","n":0.107},"2":{"v":"/codehs/java/2/8/tostring-for-flowers.html","n":1}}},{"i":80,"$":{"0":{"v":"2.8.10 Word Games","n":0.577},"1":{"v":"2.8.10 Word Gamespublic class WordGames\r\n            {\r\n                private String word;\r\n                \r\n                public WordGames(String text)\r\n                {\r\n                    word = text;\r\n                }\r\n                \r\n                public String scramble()\r\n                {\r\n                    return word.substring(word.length() / 2) + word.substring(0, word.length() / 2);\r\n                  \r\n                }\r\n                \r\n                \r\n                public String bananaSplit(int insertIdx, String insertText)\r\n                {\r\n                   return word.substring(0, insertIdx) + insertText + word.substring(insertIdx);\r\n                }\r\n                \r\n                \r\n                public String bananaSplit(String insertChar, String insertText)\r\n                {\r\n                    // Insert insertText after the first\r\n                    // occurence of the insertChar\r\n                    return word.substring(0, word.indexOf(insertChar)) + insertText + word.substring(word.indexOf(insertChar));\r\n                }\r\n                \r\n                \r\n                public String toString()\r\n                {\r\n                    return \"[\" + word + \"]\";\r\n                    \r\n                }\r\n                \r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class WordGameTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        // Ask for a word\r\n        \r\n        // Scramble it\r\n        // Print out scrambled word\r\n        \r\n        // Ask for an index\r\n        // Ask for random word\r\n        System.out.println(\"Enter an integer: \");\r\n        int idx = input.nextInt();\r\n        input.nextLine();  // skip over the newline-- bug with the codehs input system\r\n        System.out.println(\"Enter another word: \");\r\n        String word = input.nextLine();\r\n        \r\n        // Add random word at index\r\n        // Print out the word\r\n        \r\n        \r\n        // Ask for a character (store as a String)\r\n        // Ask for random word\r\n        // Add random word at character\r\n        // Print out the word\r\n        \r\n        \r\n        \r\n    }\r\n}","n":0.07},"2":{"v":"/codehs/java/2/8/word-games.html","n":1}}},{"i":81,"$":{"0":{"v":"2.9.7 Currency","n":0.707},"1":{"v":"2.9.7 Currencypublic class Currency\r\n            {\r\n                private Double value;\r\n                \r\n                // Constructor\r\n                public Currency(Double startValue)\r\n                {\r\n                    value = startValue;\r\n                }\r\n                \r\n                // Sets value to newValue\r\n                public void setValue(Double newValue)\r\n                {\r\n                    value = newValue;\r\n                }\r\n                \r\n                // Returns the dollar portion of value\r\n                // if value is 12.34, returns 12\r\n                public Integer getDollars()\r\n                {\r\n                    return (int)value.doubleValue();\r\n                }\r\n                \r\n                // Returns the cents portion of value\r\n                // as an Integer\r\n                // if value is 12.34, returns 34\r\n                public Integer getCents()\r\n                {\r\n                    return (int)(value * 100) % 100;\r\n                }\r\n                \r\n                // Returns a String representation\r\n                // in the format\r\n                // $12.34\r\n                public String toString()\r\n                {\r\n                    return \"$\" + getDollars() + \".\" + getCents();\r\n                }\r\n            }public class CurrencyTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Currency bankRoll = new Currency(12.45);\r\n        \r\n        System.out.println(\"Value of bankroll: \" + bankRoll);\r\n        System.out.println(\"Dollars: \" + bankRoll.getDollars());\r\n        System.out.println(\"Cents: \" + bankRoll.getCents());\r\n        \r\n        \r\n        bankRoll.setValue(20.56);\r\n        System.out.println(\"Value of bankroll: \" + bankRoll);\r\n        System.out.println(\"Dollars: \" + bankRoll.getDollars());\r\n        System.out.println(\"Cents: \" + bankRoll.getCents());\r\n        \r\n        bankRoll.setValue(67.78);\r\n        System.out.println(\"Value of bankroll: \" + bankRoll);\r\n        System.out.println(\"Dollars: \" + bankRoll.getDollars());\r\n        System.out.println(\"Cents: \" + bankRoll.getCents());\r\n        \r\n        \r\n    }\r\n}","n":0.075},"2":{"v":"/codehs/java/2/9/currency.html","n":1}}},{"i":82,"$":{"0":{"v":"2.9.8 Guess the number!","n":0.5},"1":{"v":"2.9.8 Guess the number!public class Extremes\r\n            {\r\n                Integer min;\r\n                Integer max;\r\n                \r\n                // Constructor\r\n                public Extremes()\r\n                {\r\n                    min = Integer.MIN_VALUE;\r\n                    max = Integer.MAX_VALUE;\r\n                }\r\n                \r\n                // Returns the difference\r\n                // max - number\r\n                public Integer maxDiff(Integer number)\r\n                {\r\n                    return max - number;\r\n                }\r\n            \r\n                // Returns the difference\r\n                // min - number\r\n                public Integer minDiff(Integer number)\r\n                {\r\n                    return min - number;\r\n                }\r\n                \r\n                // Returns a String representation\r\n                // in the form\r\n                // [min, max]\r\n                public String toString()\r\n                {\r\n                    return \"[\" + min + \", \" + max + \"]\";   \r\n                }\r\n            }import java.util.Scanner;\r\nimport java.lang.*;\r\n\r\npublic class ExtremeMain\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Create a Scanner object\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        // Create an Extremes object\r\n        Extremes extremes = new Extremes();\r\n        \r\n        // Ask the user to guess the maximum value of an Integer\r\n        System.out.println(\"Guess the maximum Integer value: \");\r\n        Integer guessMax = new Integer(input.nextInt());\r\n        System.out.println(\"You were off by \" + extremes.maxDiff(guessMax));\r\n        System.out.println(\"Guess the minimum Integer value: \");\r\n        Integer guessMin = new Integer(input.nextInt());\r\n        System.out.println(\"You were off by \" + extremes.minDiff(guessMin));\r\n        \r\n        // Compute and display the difference\r\n        // between the max and the guess\r\n        \r\n        \r\n        // Ask the user to guess the minimum value of an Integer\r\n        \r\n        \r\n        // Compute and display the difference \r\n        // between the min and the guess\r\n        \r\n        \r\n    }\r\n}","n":0.067},"2":{"v":"/codehs/java/2/9/guess-the-number.html","n":1}}},{"i":83,"$":{"0":{"v":"2.9.6 Order Up!","n":0.577},"1":{"v":"2.9.6 Order Up!import java.util.Scanner;\r\n\r\n            public class PickupWindow\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create scanner object\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Display menu\r\n                    String menu = \"1. Hamburger\\n2. Cheeseburger\\n3. Veggie Burger\\n4. Nachos\\n5. Hot Dog\\n\";\r\n                    \r\n                    System.out.println(menu);\r\n                    \r\n                    // Get customer order\r\n                    System.out.println(\"Enter label: \");\r\n                    String customerOrder = input.nextLine();\r\n                    \r\n                    // Use substring to get the first character (the number)\r\n                    String combo = customerOrder.substring(0,1);\r\n                    \r\n                    // Create an Integer object by using the static\r\n                    // method Integer.valueOf(someString)\r\n                    // to turn the string into an Integer\r\n                    \r\n                    Integer comboNumber =  Integer.valueOf(combo);\r\n                    \r\n                    // Print out what the customer ordered\r\n                    System.out.println(\"Customer ordered number \" + comboNumber);\r\n                    \r\n                    \r\n                }\r\n            }","n":0.095},"2":{"v":"/codehs/java/2/9/order-up.html","n":1}}},{"i":84,"$":{"0":{"v":"3.1.6 Number Order","n":0.577},"1":{"v":"3.1.6 Number Orderimport java.util.Scanner;\r\n\r\n            public class RelativeNumbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Enter two numbers:\");\r\n                    Scanner input = new Scanner(System.in);\r\n                    int in1 = input.nextInt();\r\n                    int in2 = input.nextInt();\r\n                    \r\n                            \r\n                    \r\n                    // Compare the numbers as instructed\r\n                    System.out.println(in1 + \" < \" + in2 + \": \" + (in1 < in2));\r\n                    System.out.println(in1 + \" == \" + in2 + \": \" + (in1 == in2));\r\n                    System.out.println(in1 + \" > \" + in2 + \": \" + (in1 > in2));\r\n                    // Display the results\r\n                }\r\n            }","n":0.107},"2":{"v":"/codehs/java/3/1/number-order.html","n":1}}},{"i":85,"$":{"0":{"v":"3.1.7 Sugar Tax","n":0.577},"1":{"v":"3.1.7 Sugar Taximport java.util.Scanner;\r\n\r\n            public class AddedSugar\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Scanner object\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n            \r\n                    \r\n                    // Ask the user for the grams of sugar\r\n                    System.out.println(\"How many grams of sugar have you eaten today? \");\r\n                    int sugar = in.nextInt();\r\n                    // Use a boolean expression to print if they can eat more sugar\r\n                    System.out.println(\"You can eat more sugar: \" + (sugar < 30));\r\n                }\r\n            }","n":0.115},"2":{"v":"/codehs/java/3/1/sugar-tax.html","n":1}}},{"i":86,"$":{"0":{"v":"3.1.8 Triple Double","n":0.577},"1":{"v":"3.1.8 Triple Doubleimport java.util.Scanner;\r\n            public class TripleDouble \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"How many points did you score? \");\r\n                    int points = input.nextInt();\r\n                    System.out.println(\"How many rebounds did you get? \");\r\n                    int rebounds = input.nextInt();\r\n                    System.out.println(\"How many assists did you have? \");\r\n                    int assists = input.nextInt();\r\n                    System.out.println(\"You got 10 or more points: \" + (points >= 10));\r\n                    System.out.println(\"You got 10 or more rebounds: \" + (rebounds >= 10));\r\n                    System.out.println(\"You got 10 or more assists: \" + (assists >= 10));\r\n            \r\n                    \r\n                    \r\n                }\r\n            }","n":0.104},"2":{"v":"/codehs/java/3/1/triple-double.html","n":1}}},{"i":87,"$":{"0":{"v":"3.2.8 Cooking","n":0.707},"1":{"v":"3.2.8 Cookingpublic class MicrowaveCooking\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   int secs = (int)(Math.random()*60+1);\r\n                   \r\n                   System.out.println(\"Microwaving for \" + secs + \" seconds\");\r\n                   \r\n                   if(secs < 20) {\r\n                       System.out.println(\"Perfect cooking time!\");\r\n                   } else {\r\n                       System.out.println(\"Your roll will catch fire!\");\r\n                   }\r\n                }\r\n            }","n":0.152},"2":{"v":"/codehs/java/3/2/cooking.html","n":1}}},{"i":88,"$":{"0":{"v":"3.2.6 Discounts","n":0.707},"1":{"v":"3.2.6 Discountsimport java.util.Scanner;\r\n\r\n            public class Discounts\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a scanner object\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n                    // Ask how many hours were you parked\r\n                    int hoursParked = in.nextInt();\r\n                    // Compute cost - $3.50 per hour\r\n                    double cost = 3.5 * hoursParked;\r\n                    // If cost is over $20, set cost to $20\r\n                    if(cost > 20) cost = 20.0;\r\n                    // Display the final cost\r\n                    System.out.println(\"You owe $\" + cost);\r\n                    \r\n                }\r\n            }","n":0.113},"2":{"v":"/codehs/java/3/2/discounts.html","n":1}}},{"i":89,"$":{"0":{"v":"3.2.9 Rating","n":0.707},"1":{"v":"3.2.9 Ratingpublic class Rater\r\n            {\r\n                private String name; // name of company\r\n                private double rating; // number rating (1 - 5)\r\n                \r\n                \r\n                public Rater(String company, double initialRating)\r\n                {\r\n                    name = company;\r\n                    rating = initialRating;\r\n                }\r\n                \r\n                // Set rating to newRating\r\n                // As long as it's no more than 5\r\n                public void setRating(double newRating)\r\n                {\r\n                    rating = Math.min(newRating,5.0);\r\n                }\r\n                \r\n                // Returns the rating of the company\r\n                public double getRating()\r\n                {\r\n                    return rating;\r\n                }\r\n                \r\n                // Returns a string representation of the company\r\n                // based on their ratings\r\n                public String toString()\r\n                {\r\n                    if(rating < 2) return \"Not Recommended Company \" + name;\r\n                    else if(rating <= 3.5) return \"Well Rated Company \" + name;\r\n                    else return \"Gold Star Company \" + name;\r\n                }\r\n            }public class RaterTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rater jrs = new Rater(\"Jr Cookery\", 2);\r\n        \r\n        \r\n        // Test Case: In the middle\r\n        System.out.println(\"Current Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n        \r\n        // Test Case: High rating\r\n        jrs.setRating(4.5);\r\n        System.out.println(\"\\nCurrent Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n        // Test Case: Setting rating too high\r\n        jrs.setRating(100);\r\n        System.out.println(\"\\nCurrent Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n        \r\n        // Test Case: Low rating\r\n        jrs.setRating(1);\r\n        System.out.println(\"\\nCurrent Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n    }\r\n}","n":0.071},"2":{"v":"/codehs/java/3/2/rating.html","n":1}}},{"i":90,"$":{"0":{"v":"3.2.7 Sweet or Unsweet?","n":0.5},"1":{"v":"3.2.7 Sweet or Unsweet?import java.util.Scanner;\r\n\r\n            public class DrinkOrder\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    String drinkName = input.nextLine();\r\n                    System.out.println();\r\n                    int sugar = input.nextInt();\r\n                    \r\n                    System.out.println(drinkName + (sugar>0?\" with sugar\":\"\"));\r\n                }\r\n            }","n":0.162},"2":{"v":"/codehs/java/3/2/sweet-or-unsweet.html","n":1}}},{"i":91,"$":{"0":{"v":"3.3.6 Battleships Move","n":0.577},"1":{"v":"3.3.6 Battleships Movepublic class BattleshipTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create objects\r\n                    Battleship submarine = new Battleship(\"Submarine\", 4);\r\n                    Battleship carrier = new Battleship(\"Carrier\", 10);\r\n                    \r\n                    // Check initial positions\r\n                    System.out.println(submarine);\r\n                    System.out.println(carrier);\r\n                    \r\n                    \r\n                    // Test: Safely move submarine\r\n                    System.out.println(\"Submarine cleared to proceed\");\r\n                    submarine.move(true);\r\n                    System.out.println(submarine);\r\n                    \r\n                    \r\n                    // Test unsafe to move carrier\r\n                    System.out.println(\"Carrier NOT cleared to proceed\");\r\n                    carrier.move(false);\r\n                    System.out.println(carrier);\r\n                    \r\n                    \r\n                }\r\n            }public class Battleship\r\n{\r\n    private String shipType;\r\n    private int position;\r\n    \r\n    public Battleship(String type, int shipPosition)\r\n    {\r\n        shipType = type;\r\n        position = shipPosition;\r\n    }\r\n    \r\n    // Moves the ship\r\n    // If safeToMove is true, add 5 to position\r\n    // else subtract 5 from position\r\n    public void move (boolean safeToMove)\r\n    {\r\n       if(safeToMove) position += 5;\r\n       else position -= 5;\r\n\r\n    }\r\n    \r\n    // Returns the position of the ship\r\n    public int getPosition()\r\n    {\r\n        return position;\r\n    }\r\n    \r\n    // String representation of the object\r\n    public String toString()\r\n    {\r\n        return shipType + \" at \" + position;\r\n    }\r\n}","n":0.08},"2":{"v":"/codehs/java/3/3/battleships-move.html","n":1}}},{"i":92,"$":{"0":{"v":"3.3.8 Player Score","n":0.577},"1":{"v":"3.3.8 Player Scoreimport java.util.Scanner;\r\n\r\n            public class Basketball\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter player one's name: \");\r\n                    String p1name = input.nextLine();\r\n                    System.out.println(\"Enter player two's name: \");\r\n                    String p2name = input.nextLine();\r\n                    System.out.println(\"Enter Tracy's score\");\r\n                    int p1score = input.nextInt();\r\n                    System.out.println(\"Enter Karel's score\");\r\n                    int p2score = input.nextInt();\r\n                    if(p1name.compareTo(p2name) < 0) {\r\n                        System.out.println(p1name + \" scored \" + p1score + \" points\");\r\n                        System.out.println(p2name + \" scored \"+ p2score + \" points\");\r\n                    } else {\r\n                        System.out.println(p2name + \" scored \"+ p2score + \" points\");\r\n                        System.out.println(p1name + \" scored \" + p1score + \" points\");\r\n                        \r\n                    }\r\n                    \r\n                    if(p1score > p2score) System.out.println(p1name + \" wins!\");\r\n                    else System.out.println(p2name + \" wins!\");\r\n            \r\n                    \r\n                    \r\n                }\r\n            }","n":0.092},"2":{"v":"/codehs/java/3/3/player-score.html","n":1}}},{"i":93,"$":{"0":{"v":"3.3.5 Positive or Negative","n":0.5},"1":{"v":"3.3.5 Positive or Negativeimport java.util.Scanner;\r\n\r\n            public class Numbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    int input = in.nextInt();\r\n                    \r\n                    if(input >= 0) System.out.println(\"The number is positive!\");\r\n                    else System.out.println(\"The number is negative!\");\r\n                }\r\n            }","n":0.16},"2":{"v":"/codehs/java/3/3/positive-or-negative.html","n":1}}},{"i":94,"$":{"0":{"v":"3.3.7 Ratings","n":0.707},"1":{"v":"3.3.7 Ratingspublic class Rater\r\n            {\r\n                private String name; // name of company\r\n                private double rating; // number rating (1 - 5)\r\n                private String review; // review shown with company name \r\n                \r\n                \r\n                public Rater(String company, double initialRating)\r\n                {\r\n                    name = company;\r\n                    rating = initialRating;\r\n                    review = \"\";\r\n                    \r\n                }\r\n                \r\n                // Set rating to newRating\r\n                // As long as it's no more than 5\r\n                public void setRating(double newRating)\r\n                {\r\n                    rating = Math.min(newRating, 5);\r\n                }\r\n                \r\n                // Updates review line based on rating\r\n                public void updateReview()\r\n                {\r\n                    if(rating >= 3) review = \"Proudly recommended\";\r\n                    else review = \"Needs more ratings\";\r\n                }\r\n                \r\n                \r\n                // Returns the rating of the company\r\n                public double getRating()\r\n                {\r\n                    return rating;\r\n                }\r\n                \r\n                // Returns a string representation of the company\r\n                // Uses the form\r\n                // name : review\r\n                public String toString()\r\n                {\r\n                    return name + \" : \" + review;\r\n                }\r\n            }public class RaterTesting\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rater company1 = new Rater(\"a\", 0.0);\r\n        company1.updateReview();\r\n        System.out.println(company1);\r\n        \r\n        Rater company2 = new Rater(\"b\", 5.0);\r\n        company2.updateReview();\r\n        System.out.println(company2);\r\n    }\r\n}","n":0.076},"2":{"v":"/codehs/java/3/3/ratings.html","n":1}}},{"i":95,"$":{"0":{"v":"3.4.9 Battleships","n":0.707},"1":{"v":"3.4.9 Battleshipspublic class ShipTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Battleship sub = new Battleship(\"submarine\", 6);\r\n                    Battleship raft = new Battleship(\"raft\", 2);\r\n                    Battleship destroyer = new Battleship(\"destroyer\", 9);\r\n                 \r\n                    System.out.println(sub);\r\n                    System.out.println(\"Sub has power \" + sub.getPower());\r\n                    \r\n                    System.out.println(raft);\r\n                    System.out.println(\"Raft has power \" + raft.getPower());\r\n                    \r\n                    System.out.println(destroyer);\r\n                    System.out.println(\"Destroyer has power \" + destroyer.getPower());\r\n                    \r\n                    System.out.println(\"\\nRaft attacks Sub\");\r\n                    sub.isAttacked(raft.getPower());\r\n                    System.out.println(sub);\r\n                    \r\n                    System.out.println(\"\\nDestroyer attacks Raft\");\r\n                    raft.isAttacked(destroyer.getPower());\r\n                    System.out.println(raft);\r\n                    \r\n                    System.out.println(\"\\nSub attacks Destroyer\");\r\n                    destroyer.isAttacked(sub.getPower());\r\n                    System.out.println(destroyer);\r\n            \r\n            \r\n                }\r\n            }public class Battleship\r\n{\r\n    private String name;  // type of ship\r\n    private int power;   // power of attack in range [1 - 10]\r\n    private int health; // health of the ship\r\n    \r\n    // Constructor\r\n    public Battleship(String shipType, int attackPower)\r\n    {\r\n        name = shipType;\r\n        power = attackPower;\r\n        health = 100;\r\n    }\r\n    \r\n    // Modifies the health of the battleship\r\n    public void isAttacked(int attackPower)\r\n    {\r\n        if(attackPower < 4) health -= 3;\r\n        else if(attackPower < 8) health -= 5;\r\n        else health -= 7;\r\n    }\r\n    \r\n    // Returns true if the health of\r\n    // the ship is greater than 0\r\n    public boolean stillFloating()\r\n    {\r\n        return health > 0;\r\n    }\r\n    \r\n    // Returns the power of the ship\r\n    public int getPower()\r\n    {\r\n        return power;\r\n    }\r\n    \r\n    // Returns string representation in the form\r\n    // Battleship name\r\n    public String toString()\r\n    {\r\n        return name + \"(\" + health + \")\";    \r\n    }\r\n    \r\n}","n":0.068},"2":{"v":"/codehs/java/3/4/battleships.html","n":1}}},{"i":96,"$":{"0":{"v":"3.4.8 Berries","n":0.707},"1":{"v":"3.4.8 Berriesimport java.util.Scanner;\r\n\r\n            public class Berries\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Ask for a berry initial\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    String berries = input.nextLine();\r\n                    char berry = berries.charAt(0);\r\n                    \r\n                    // To get the input as a character, use the String method\r\n                    // charAt().  Use str.charAt(0) since you want the\r\n                    // first character\r\n                    if(berry == 'r') System.out.println(\"You ordered raspberry\");\r\n                    else if(berry == 'h') System.out.println(\"You ordered huckleberry\");\r\n                    else if(berry == 'g') System.out.println(\"You ordered goji berry\");\r\n                    else System.out.println(\"Berry not recognized\");\r\n                }\r\n            }","n":0.109},"2":{"v":"/codehs/java/3/4/berries.html","n":1}}},{"i":97,"$":{"0":{"v":"3.4.6 Positive, Negative, or Zero","n":0.447},"1":{"v":"3.4.6 Positive, Negative, or Zeroimport java.util.Scanner;\r\n\r\n            public class Numbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n                    int userInput = in.nextInt();\r\n                    \r\n                    if(userInput < 0) System.out.println(\"The number is negative!\");\r\n                    else if(userInput == 0) System.out.println(\"The number is neither positive nor negative!\");\r\n                    else System.out.println(\"The number is positive!\");\r\n                }\r\n            }","n":0.139},"2":{"v":"/codehs/java/3/4/positive-negative-or-zero.html","n":1}}},{"i":98,"$":{"0":{"v":"3.4.7 Salmon Spawn","n":0.577},"1":{"v":"3.4.7 Salmon Spawnimport java.util.Scanner;\r\n\r\n            public class Salmon\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Ask user for month of year as an integer\r\n                    int month = input.nextInt();\r\n                    \r\n                    if(month > 2 && month < 7) System.out.println(\"Spring spawning season\");\r\n                    else if(month > 8 && month < 12) System.out.println(\"Fall spawning season\");\r\n                    else System.out.println(\"Not spawning season\");\r\n                    \r\n                }\r\n            }","n":0.126},"2":{"v":"/codehs/java/3/4/salmon-spawn.html","n":1}}},{"i":99,"$":{"0":{"v":"3.5.7 Compound Roller Coaster","n":0.5},"1":{"v":"3.5.7 Compound Roller Coasterimport java.util.Scanner;\r\n\r\n            public class RollerCoaster \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    System.out.println(\"Enter Height (inches):\");\r\n                    int height = input.nextInt();\r\n                    System.out.println(\"Enter Age (years):\");\r\n                    int age = input.nextInt();\r\n                    \r\n                    if(age > 8 && height > 41) System.out.println(\"Welcome aboard!\");\r\n                    else System.out.println(\"Sorry, you are not eligible to ride\");\r\n                }\r\n            }","n":0.135},"2":{"v":"/codehs/java/3/5/compound-roller-coaster.html","n":1}}},{"i":100,"$":{"0":{"v":"3.5.8 Divisibility","n":0.707},"1":{"v":"3.5.8 Divisibilityimport java.util.Scanner;\r\n\r\n            public class Divisibility \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    System.out.println(\"Enter the dividend: \\nEnter the divisor: \");\r\n                    int dividend = input.nextInt();\r\n                    int divisor = input.nextInt();\r\n                    if(divisor == 0 || dividend % divisor > 0) System.out.println(dividend + \" is not divisible by \" + divisor + \"!\");\r\n                    else System.out.println(dividend + \" is divisible by \" + divisor + \"!\");\r\n                }\r\n            }","n":0.12},"2":{"v":"/codehs/java/3/5/divisibility.html","n":1}}},{"i":101,"$":{"0":{"v":"3.5.9 Find the  Minimum","n":0.5},"1":{"v":"3.5.9 Find the  Minimumimport java.util.Scanner;\r\n\r\n            public class FindMinimum \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    \r\n                    System.out.println(\"Enter the first integer: \");\r\n                    int i1 = input.nextInt();\r\n                    System.out.println(\"Enter the second integer: \");\r\n                    int i2 = input.nextInt();\r\n                    System.out.println(\"Enter the third integer: \");\r\n                    int i3 = input.nextInt();\r\n                    System.out.println(\"The minimum is 23\");\r\n            \r\n                    System.out.println(\"The minimum is \" + Math.min(Math.min(i1, i2), i3));\r\n                }\r\n            }","n":0.124},"2":{"v":"/codehs/java/3/5/find-the-minimum.html","n":1}}},{"i":102,"$":{"0":{"v":"3.5.6 Roller Coaster","n":0.577},"1":{"v":"3.5.6 Roller Coasterimport java.util.Scanner;\r\n\r\n            public class RollerCoaster \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    int height = input.nextInt();\r\n                    int age = input.nextInt();\r\n                    \r\n                    if(age > 8 && height > 41) System.out.println(\"Welcome aboard!\");\r\n                    else System.out.println(\"Sorry, you are not eligible to ride\");\r\n                }\r\n            }","n":0.144},"2":{"v":"/codehs/java/3/5/roller-coaster.html","n":1}}},{"i":103,"$":{"0":{"v":"3.6.5 Amusement Park","n":0.577},"1":{"v":"3.6.5 Amusement Parkimport java.util.Scanner;\r\n\r\n            public class AmusementPark\r\n            {\r\n                \r\n                static int AGE_LIMIT = 12;\r\n                static int HEIGHT_LIMIT = 48;\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter your age: \"); \r\n                    int age = input.nextInt();\r\n                    \r\n                    System.out.println(\"Enter your height in inches: \");\r\n                    int height = input.nextInt();\r\n                    \r\n                    boolean oldEnough = age >= AGE_LIMIT;\r\n                    boolean tallEnough = height >= HEIGHT_LIMIT;\r\n                    \r\n                    // CHANGE THIS LINE\r\n                    // Convert this boolean expression into its De Morgan equivalent\r\n                    boolean cannotRide = !oldEnough || !tallEnough;\r\n                    \r\n                    if(cannotRide)\r\n                    {\r\n                        System.out.println(\"You may not ride the rollercoasters.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"You may ride the rollercoasters!\");\r\n                    }\r\n                    \r\n                    System.out.println(\"Can you swim? Enter true or false.\");\r\n                    boolean canSwim = input.nextBoolean();\r\n                    \r\n                    System.out.println(\"Do you have a life jacket? Enter true or false.\");\r\n                    boolean hasLifeJacket = input.nextBoolean();\r\n                    \r\n                    // CHANGE THIS LINE\r\n                    // Convert this boolean expression into its De Morgan equivalent\r\n                    boolean cannotSwim = !canSwim && !hasLifeJacket;\r\n                    \r\n                    if(cannotSwim)\r\n                    {\r\n                        System.out.println(\"You may not swim in the pool.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"You may swim in the pool!\");\r\n                    }\r\n                }\r\n            }","n":0.076},"2":{"v":"/codehs/java/3/6/amusement-park.html","n":1}}},{"i":104,"$":{"0":{"v":"3.6.7 Odd and Even","n":0.5},"1":{"v":"3.6.7 Odd and Evenpublic class OddEven\r\n            {\r\n                // Determines if num1 and num2 are both ODD\r\n                public static boolean bothOdd(int n1, int n2)\r\n                {\r\n                    return n1 % 2 != 0 && n2 % 2 != 0;\r\n                }\r\n                \r\n                // Determines if num1 and num2 are both EVEN \r\n                public static boolean bothEven(int n1, int n2)\r\n                {\r\n                    return (n1 % 2 == 0) && (n2 % 2 == 0);\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class OddEvenTester\r\n{\r\n        public static void main(String[] args)\r\n        {\r\n            //Ask user to input 2 positive integers\r\n            Scanner input  = new Scanner(System.in);\r\n            System.out.println(\"Enter 2 positive integers\");\r\n            int num1 = input.nextInt();\r\n            int num2 = input.nextInt();\r\n            \r\n            //Call bothOdd method in OddEven class to determine if both \r\n            //numbers are odd\r\n            if(OddEven.bothOdd(num1, num2))\r\n            {\r\n                System.out.println(\"Both numbers are ODD.\");\r\n            }\r\n            \r\n            //Call bothEven in the OddEven class to determine if both\r\n            //numbers are even\r\n            else if(OddEven.bothEven(num1, num2))\r\n            {\r\n                System.out.println(\"Both numbers are EVEN.\");\r\n            }\r\n            \r\n            //Print out that one must be odd and one must be even since\r\n            //they are not both odd or both even\r\n            else\r\n            {\r\n                System.out.println(\"One number is ODD and one number is EVEN.\");\r\n            }\r\n            \r\n        }\r\n}","n":0.073},"2":{"v":"/codehs/java/3/6/odd-and-even.html","n":1}}},{"i":105,"$":{"0":{"v":"3.6.6 Odd Numbers","n":0.577},"1":{"v":"3.6.6 Odd Numbersimport java.util.Scanner;\r\n\r\n            public class OddNumbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //Ask user to enter 2 positive integers\r\n                    Scanner input  = new Scanner(System.in);\r\n                    System.out.println(\"Enter 2 positive integers\");\r\n                    int num1 = input.nextInt();\r\n                    int num2 = input.nextInt();\r\n                    \r\n                    //Determine if both numbers are odd with bothOdd boolean\r\n                    // Do NOT remove this line!\r\n                    boolean bothOdd = num1 % 2 != 0 && num2 % 2 != 0;\r\n                    \r\n                    //ADD THE NEW LINE HERE\r\n                    boolean bothOddDeMorgan = !(num1 % 2 == 0 || num2 % 2 == 0);\r\n                    \r\n                    //Print out if both numbers are odd or not both odd\r\n                    if (bothOdd)\r\n                    {\r\n                       System.out.println(\"Both numbers are odd\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"Both numbers are NOT odd.\");\r\n                    }\r\n                    \r\n                    //Print out if both numbers are odd or not both odd\r\n                    if (bothOddDeMorgan)\r\n                    {\r\n                       System.out.println(\"Both numbers are odd with De Morgan's Laws.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"Both numbers are NOT odd with DeMorgan's Laws.\");\r\n                    }\r\n                    \r\n                    //Check that both Boolean values evaluate to the same value\r\n                    if(bothOdd == bothOddDeMorgan)\r\n                    {\r\n                        System.out.println(\"DeMorgan was right, again!\");\r\n                    }\r\n               }\r\n            }","n":0.076},"2":{"v":"/codehs/java/3/6/odd-numbers.html","n":1}}},{"i":106,"$":{"0":{"v":"3.7.10 Comparing Circles","n":0.577},"1":{"v":"3.7.10 Comparing CirclesBTW\r\n                Because of some obscure features of the Java compiler, this assignment will work with ==\r\n                    or .equals(). You don't need to change anything for this one!\r\n                    Even so, you should still use the code below. This trick will fail on more complex assignments,\r\n                    where it isn't as easy for the compiler to optimize.public class CircleTester \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Circle one = new Circle(10, \"blue\", 50, 35);\r\n                    Circle two = new Circle(10, \"blue\", 50, 35);\r\n                    Circle three = new Circle(20, \"red\", 0, 0);\r\n                    Circle four = three;\r\n                    \r\n                    // Modify this program to correctly compare objects\r\n                    // We should not be comparing objects using ==\r\n                    \r\n                    if(one.equals(two))\r\n                    {\r\n                        System.out.println(\"Circles one and two are equal!\");\r\n                        System.out.println(one);\r\n                        System.out.println(two);\r\n                    }\r\n                    \r\n                    if(three.equals(four))\r\n                    {\r\n                        System.out.println(\"Circles three and four are equal!\");\r\n                        System.out.println(three);\r\n                        System.out.println(four);\r\n                    }\r\n                }\r\n            }","n":0.085},"2":{"v":"/codehs/java/3/7/comparing-circles.html","n":1}}},{"i":107,"$":{"0":{"v":"3.7.7 String Variable Trace","n":0.5},"1":{"v":"3.7.7 String Variable TraceJSYK\r\n            The reason you comment out the 3rd and 5th if statements is because as they evaluate to false, they don't contribute to the outputpublic class StringTrace\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String str1 = null;\r\n                    String str2 = new String(\"Karel\");\r\n                    String str3 = \"Karel\";\r\n                    \r\n                    if (str1 == null)\r\n                    {\r\n                        str1 = str2;\r\n                    }\r\n                    \r\n                    if (str1 == str2)\r\n                    {\r\n                        System.out.println(\"str1 and str2 refer to the same object\");\r\n                    }\r\n                    \r\n                    /*if (str2 == str3)\r\n                    {\r\n                        System.out.println(\"str2 and str3 refer to the same object\");\r\n                    }*/\r\n                    \r\n                    if (str1.equals(str2) && str2.equals(str3))\r\n                    {\r\n                        System.out.println(\"str1, str2, and str3 are equal\");\r\n                    }\r\n                    \r\n                    /*if ((str1 == str2) && (str2 == str3))\r\n                    {\r\n                        System.out.println(\"str1, str2, and str3 are the same objects\");\r\n                        \r\n                    }*/\r\n                    \r\n                }\r\n            }","n":0.089},"2":{"v":"/codehs/java/3/7/string-variable-trace.html","n":1}}},{"i":108,"$":{"0":{"v":"3.7.9 Three Strings","n":0.577},"1":{"v":"3.7.9 Three Stringsimport java.util.Scanner;\r\n            public class ThreeStrings\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    String str1 = in.nextLine();\r\n                    String str2 = in.nextLine();\r\n                    String str3 = in.nextLine();\r\n                    if((str1 + str2).equals(str3)) {\r\n                        System.out.println(str1 + \" + \" + str2 + \" is equal to \" + str3 + \"!\");\r\n                    } else {\r\n                        System.out.println(str1 + \" + \" + str2 + \" is not equal to \" + str3 + \"!\");\r\n                    }\r\n                }\r\n            }","n":0.115},"2":{"v":"/codehs/java/3/7/three-strings.html","n":1}}},{"i":109,"$":{"0":{"v":"4.1.8 Divisibility","n":0.707},"1":{"v":"4.1.8 Divisibilitypublic class ExtractDigits\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    extractDigits(2938724);\r\n                    \r\n                }\r\n                \r\n                public static void extractDigits(int num)\r\n                {\r\n                    while(num > 0) {\r\n                        System.out.println(num % 10);\r\n                        num /= 10;\r\n                    }\r\n                }\r\n            }","n":0.171},"2":{"v":"/codehs/java/4/1/divisibility.html","n":1}}},{"i":110,"$":{"0":{"v":"4.1.7 Guess the Number","n":0.5},"1":{"v":"4.1.7 Guess the Numberimport java.util.Scanner;\r\n            public class GuessTheNumber\r\n            { \r\n                // This is the secret number that will pass the autograder!\r\n                static int secretNumber = 6;\r\n                public static void main(String[] args)\r\n                {\r\n                    \r\n                    // Allow the user to keep guessing numbers between\r\n                    // 1 and 10 until they guess the correct number\r\n                    \r\n                    System.out.println(\"I'm thinking of a number between 1 and 10.\");\r\n                    System.out.println(\"See if you can guess the number!\");\r\n                    \r\n                    // This calls the static method GuessMyNumber. Notice that the method is outside \r\n                    // of the main method. \r\n                    guessMyNumber();\r\n                    \r\n                }\r\n                \r\n                public static void guessMyNumber() \r\n                {  \r\n                    Scanner sc = new Scanner(System.in);\r\n                    int number = secretNumber;\r\n                    int guess = -1;\r\n                    while(guess != number) {\r\n                        System.out.println(\"Enter your guess\");\r\n                        guess = sc.nextInt();\r\n                        if(guess != number) System.out.println(\"Try again!\");\r\n                        else System.out.println(\"Correct!\");\r\n                    }\r\n                }\r\n            }","n":0.086},"2":{"v":"/codehs/java/4/1/guess-the-number.html","n":1}}},{"i":111,"$":{"0":{"v":"4.1.6 Making Taffy","n":0.577},"1":{"v":"4.1.6 Making Taffyimport java.util.Scanner;\r\n            public class TaffyTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   \r\n                   int temperature = 0;\r\n                   Scanner sc = new Scanner(System.in);\r\n                   \r\n                   System.out.println(\"Starting Taffy Timer\");\r\n                   \r\n                   while(temperature < 270) {\r\n                       System.out.print(\"Enter the temperature: \");\r\n                       temperature = sc.nextInt();\r\n                       if(temperature < 270) System.out.println(\"The mixture isn't ready yet.\");\r\n                       \r\n                   }\r\n                   \r\n                   System.out.println(\"Your taffy is ready for the next step!\");\r\n                }\r\n            }","n":0.128},"2":{"v":"/codehs/java/4/1/making-taffy.html","n":1}}},{"i":112,"$":{"0":{"v":"4.1.9 Max and Min Values","n":0.447},"1":{"v":"4.1.9 Max and Min Valuesimport java.util.Scanner;\r\n\r\n            public class MaxMin\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int smallest = Integer.MAX_VALUE;\r\n                    int largest = Integer.MIN_VALUE;\r\n                    \r\n                    Scanner sc = new Scanner(System.in);\r\n                    \r\n                    int input = 0;\r\n                    while(true) {\r\n                        System.out.println(\"Enter a number (-1 to quit): \");\r\n                        input = sc.nextInt();\r\n                        if(input != -1) {\r\n                            System.out.println(\"Smallest # so far: \" + (smallest = Math.min(smallest, input)));\r\n                            System.out.println(\"Largest # so far: \" + (largest = Math.max(largest, input)));\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }","n":0.113},"2":{"v":"/codehs/java/4/1/max-and-min-values.html","n":1}}},{"i":113,"$":{"0":{"v":"4.2.10 Multiplication Table","n":0.577},"1":{"v":"4.2.10 Multiplication Tablepublic class MultiplicationTable\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    for(int i = 1; i <= 10; i++) {\r\n                        System.out.println(\"4 * \" + i + \" = \" + (4*i));\r\n                    }\r\n                }\r\n            }","n":0.169},"2":{"v":"/codehs/java/4/2/multiplication-table.html","n":1}}},{"i":114,"$":{"0":{"v":"4.2.6 Print the Odds","n":0.5},"1":{"v":"4.2.6 Print the Oddspublic class Odds\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    for(int i = 1; i < 100; i+=2) System.out.println(i);\r\n                }\r\n            }","n":0.204},"2":{"v":"/codehs/java/4/2/print-the-odds.html","n":1}}},{"i":115,"$":{"0":{"v":"4.2.7 Repeat 100 Times","n":0.5},"1":{"v":"4.2.7 Repeat 100 Timespublic class Repeat100\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    for(int i = 0; i < 100; i++) System.out.println(\"Hello Karel\");\r\n                }\r\n            }","n":0.2},"2":{"v":"/codehs/java/4/2/repeat-100-times.html","n":1}}},{"i":116,"$":{"0":{"v":"4.2.9 Replace FOR Loop with WHILE Loop","n":0.378},"1":{"v":"4.2.9 Replace FOR Loop with WHILE Looppublic class Odds\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Run this code first to see what is does. \r\n                    // Then replace the for loop with an equivalent while loop.\r\n                    int x = 1;\r\n                    while(x <= 10) {\r\n                        System.out.println(x);\r\n                        x = x+2;\r\n                    }\r\n                }\r\n            }","n":0.137},"2":{"v":"/codehs/java/4/2/replace-for-loop-with-while-loop.html","n":1}}},{"i":117,"$":{"0":{"v":"4.2.8 Replace WHILE with FOR Loop","n":0.408},"1":{"v":"4.2.8 Replace WHILE with FOR Looppublic class Countdown\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Run this code first to see what is does. \r\n                    // Replace the while loop with an equivalent for loop.\r\n                    for(int x = 10; x > 0; x--) {\r\n                        System.out.println(x);\r\n                    }\r\n                }\r\n            }","n":0.143},"2":{"v":"/codehs/java/4/2/replace-while-with-for-loop.html","n":1}}},{"i":118,"$":{"0":{"v":"4.3.8 Finding Palindromes","n":0.577},"1":{"v":"4.3.8 Finding Palindromesimport java.util.Scanner;\r\n            public class Palindromes\r\n            {\r\n                /**\r\n                 * This program lets the user input some text and\r\n                 * prints out whether or not that text is a palindrome.\r\n                 */\r\n                public static void main(String[] args)\r\n                {\r\n                   Scanner sc = new Scanner(System.in);\r\n                   String word = sc.nextLine();\r\n                   System.out.println(\"Your word is \" + (isPalindrome(word)?\"\":\"not \") + \"a palindrome!\");\r\n                }\r\n                \r\n                /**\r\n                 * This method determines if a String is a palindrome,\r\n                 * which means it is the same forwards and backwards.\r\n                 * \r\n                 * @param text The text we want to determine if it is a palindrome.\r\n                 * @return A boolean of whether or not it was a palindrome.\r\n                 */\r\n                public static boolean isPalindrome(String text)\r\n                {\r\n                   return text.equals(reverse(text));\r\n                }\r\n                \r\n                /**\r\n                 * This method reverses a String.\r\n                 * \r\n                 * @param text The string to reverse.\r\n                 * @return The new reversed String.\r\n                 */\r\n                public static String reverse(String text)\r\n                {\r\n                    String r = \"\";\r\n                    for(int i = text.length() - 1; i>=0;i--) r+= text.charAt(i);\r\n                    return r;\r\n                }\r\n            \r\n            }","n":0.078},"2":{"v":"/codehs/java/4/3/finding-palindromes.html","n":1}}},{"i":119,"$":{"0":{"v":"4.3.9 Fixing Grammar","n":0.577},"1":{"v":"4.3.9 Fixing Grammarimport java.util.Scanner;\r\n            public class Grammar\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner sc = new Scanner(System.in);\r\n                    String f = sc.nextLine();\r\n                }\r\n                \r\n                public static String useProperGrammar(String theText)\r\n                {\r\n                    String replaced = \"\";\r\n                    int correctCount = 0;\r\n                    for(int i = 0; i < theText.length(); i++) {\r\n                        if(theText.charAt(i) == '2') {\r\n                            replaced += \"to\";\r\n                            correctCount++;\r\n                        } else {\r\n                            replaced += \"\" + theText.charAt(i);\r\n                        }\r\n                    }\r\n                    \r\n                    System.out.println(\"Fixed \" + correctCount + \" grammatical errors:\");\r\n                    \r\n                    return replaced;\r\n                }\r\n            }","n":0.112},"2":{"v":"/codehs/java/4/3/fixing-grammar.html","n":1}}},{"i":120,"$":{"0":{"v":"4.3.7 Password Checker","n":0.577},"1":{"v":"4.3.7 Password Checkerimport java.util.Scanner;\r\n\r\n            public class Password\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner sc = new Scanner(System.in);\r\n                    String pw = sc.nextLine();\r\n                    System.out.println(passwordCheck(pw));\r\n                }\r\n                \r\n                public static boolean passwordCheck(String password)\r\n                {\r\n                    return password.length() > 7 && password.matches(\"^[0-9A-z]+$\");\r\n                }\r\n            }","n":0.158},"2":{"v":"/codehs/java/4/3/password-checker.html","n":1}}},{"i":121,"$":{"0":{"v":"4.3.6 Replace Letter","n":0.577},"1":{"v":"4.3.6 Replace Letterimport java.util.Scanner;\r\n            public class Letter\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Ask the user for 3 things: their word, letter they want to replace,\r\n                    // and replacing letter.\r\n                    \r\n                    // Call the method replaceLetter and pass all 3 of these items to it for \r\n                    // string processing.\r\n                    Scanner s = new Scanner(System.in);\r\n                    \r\n                    String word = s.nextLine(),\r\n                        letter = s.nextLine(),\r\n                        replacing = s.nextLine();\r\n                        \r\n                        System.out.println(replaceLetter(word, letter, replacing));\r\n                }\r\n                \r\n                // Modify this method so that it will take a third parameter from a user that is the String they want to\r\n                //to replace letterToReplace with. This method should return the modified String.\r\n                public static String replaceLetter(String word, String letterToReplace, String letterToInsert)\r\n                {\r\n                    String replaced = \"\";\r\n                    for(int i = 0; i < word.length(); i++)\r\n                    {\r\n                        String letter = word.substring(i, i+1);\r\n                        if(letter.equals(letterToReplace))\r\n                        {\r\n                            replaced += letterToInsert;\r\n                        } else {\r\n                            replaced += letter;\r\n                        }\r\n                    }\r\n                    return replaced;\r\n                }\r\n            }","n":0.081},"2":{"v":"/codehs/java/4/3/replace-letter.html","n":1}}},{"i":122,"$":{"0":{"v":"4.3.10 Teen Talk","n":0.577},"1":{"v":"4.3.10 Teen Talkimport java.util.Scanner;\r\n            public class TeenTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner sc = new Scanner(System.in);\r\n                    // Create a new Teen object and print it out; see the Teen class file\r\n                    // to see how the constructor and toString method work.\r\n                    Teen myFriend = new Teen(\"Sonequa\", \"Martin-Green\", 10, true);\r\n                    System.out.println(myFriend.toString());\r\n                    \r\n                    // Ask the user to input a text message\r\n                    System.out.println(\"Enter the text message being sent: \");\r\n                    //Call teenTalk method to translate the message to teen talk\r\n                    System.out.println(myFriend.teenTalk(sc.nextLine()));\r\n                }\r\n            }public class Teen \r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int grade;\r\n    private Boolean textMessages;\r\n\r\n    // Constructor to make a teen with a first and last name, grade in school, \r\n    // and whether they text message others and need to write texts to others. \r\n    \r\n    // This defines the state of the teen.\r\n    public Teen(String theFirstName, String theLastName, int theGrade, Boolean theTextMessages)\r\n    {\r\n        firstName = theFirstName;\r\n        lastName = theLastName;\r\n        grade = theGrade;\r\n        textMessages = theTextMessages;\r\n    }\r\n    \r\n    // toString method to print out the state of teen object\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade \" + grade + \" and wants to send this text:\";\r\n    }\r\n    \r\n    // Create this method so that it changes the text message \r\n    // and places the word \"like\" in place of each space \r\n    // in the message.\r\n    public String teenTalk(String text)\r\n    {\r\n        String re = \"\";\r\n        for(int i = 0; i < text.length(); i++) {\r\n            if(text.charAt(i) == ' ') re += \" like \";\r\n            else re += text.charAt(i);\r\n        }\r\n        \r\n        return re;\r\n    }\r\n    \r\n}","n":0.061},"2":{"v":"/codehs/java/4/3/teen-talk.html","n":1}}},{"i":123,"$":{"0":{"v":"4.4.7 Make a Tree","n":0.5},"1":{"v":"4.4.7 Make a Treepublic class TreeOfStars\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   // Call makeATree \r\n                   makeATree();\r\n                }\r\n                public static void makeATree()\r\n                {\r\n                   int levels = 9;\r\n                   int widthMost = levels * 2 + 1;\r\n                   for(int i = 0; i < levels; i++) {\r\n                       int padding = widthMost/2 - i;\r\n                       for(int j = 0; j < padding; j++) System.out.print(\" \");\r\n                       for(int k = 0; k <= i; k++) System.out.print(\" *\");\r\n                       System.out.print(\" \");\r\n                       System.out.println();\r\n                   }\r\n                }\r\n            }","n":0.114},"2":{"v":"/codehs/java/4/4/make-a-tree.html","n":1}}},{"i":124,"$":{"0":{"v":"4.4.8 Multiplication Table","n":0.577},"1":{"v":"4.4.8 Multiplication Tablepublic class MultiplicationTable\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Call makeMultiplicationTable \r\n                   makeMultiplicationTable();\r\n                }\r\n                \r\n                // Makes a multiplcation table\r\n                public static void makeMultiplicationTable()\r\n                {\r\n                    for(int i = 1; i <= 10; i++) {\r\n                        for(int j = 1; j <= 10; j++) System.out.print(i*j + \"\\t\");\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","n":0.137},"2":{"v":"/codehs/java/4/4/multiplication-table.html","n":1}}},{"i":125,"$":{"0":{"v":"4.4.6 Upright Number Triangle","n":0.5},"1":{"v":"4.4.6 Upright Number Trianglepublic class NumberTriangle\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   // Call makeNumberTriangle \r\n                   makeNumberTriangle();\r\n                }\r\n                \r\n                // Makes an upright triangle with the numbers 1-5\r\n                public static void makeNumberTriangle()\r\n                {\r\n                    for(int i = 1; i <= 5; i++) {\r\n                        for(int j = 1; j <= i; j++) System.out.print(j + \" \");\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","n":0.13},"2":{"v":"/codehs/java/4/4/upright-number-triangle.html","n":1}}},{"i":126,"$":{"0":{"v":"4.5.7 Improving isChar Speed","n":0.5},"1":{"v":"4.5.7 Improving isChar Speedpublic class findCharTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Start here!\r\n                    String word = \"This is a sentence\";\r\n                    String key = \"a\";\r\n                    System.out.println(\"The character \"+ key+ \" is in the String \"+ word + \": \" + findChar(word, key));\r\n                }\r\n                \r\n                public static boolean findChar(String string, String key)\r\n                {\r\n                    //faster because it only calls 1 method, as opposed to looping through the whole string\r\n                    return string.indexOf(key) != -1;\r\n                }\r\n            }","n":0.115},"2":{"v":"/codehs/java/4/5/improving-ischar-speed.html","n":1}}},{"i":127,"$":{"0":{"v":"5.1.4 Access for DNA Class","n":0.447},"1":{"v":"5.1.4 Access for DNA Classpublic class DNA\r\n            {\r\n                private String rsid;\r\n                private String genotype;\r\n                \r\n                public DNA(String r, String g) {\r\n                    this.rsid = r;\r\n                    this.genotype = g;\r\n                }\r\n            }","n":0.186},"2":{"v":"/codehs/java/5/1/access-for-dna-class.html","n":1}}},{"i":128,"$":{"0":{"v":"5.1.5 Access for Employee Class","n":0.447},"1":{"v":"5.1.5 Access for Employee Classpublic class Employee\r\n            {\r\n                private String name;\r\n                private int id;\r\n                private double salary;\r\n                \r\n                \r\n                public Employee(String _name, int _id, double _salary) {\r\n                    this.name = _name;\r\n                    this.id = (short)_id;\r\n                    this.salary = _salary;\r\n                }\r\n            }","n":0.162},"2":{"v":"/codehs/java/5/1/access-for-employee-class.html","n":1}}},{"i":129,"$":{"0":{"v":"5.1.6 Fixing Circle","n":0.577},"1":{"v":"5.1.6 Fixing Circlepublic class CircleTester {\r\n\r\n                public static void main(String[] args) {\r\n            \r\n                    Circle circ = new Circle(10);\r\n            \r\n                    circ.setRadius(5);\r\n                    \r\n                    System.out.println(circ);\r\n            \r\n                    System.out.println(\"The diameter is \" + circ.getDiameter());\r\n                    System.out.println(\"The perimeter is \" + circ.getPerimeter());\r\n            \r\n                }\r\n            \r\n            }public class Circle {\r\n\r\n                private double radius;\r\n            \r\n                public Circle(double myRadius) {\r\n                    radius = myRadius;\r\n                }\r\n            \r\n                public void setRadius(int myRadius){\r\n                    radius = myRadius;\r\n                }\r\n            \r\n                public double getDiameter() {\r\n                    return radius*2;\r\n                }\r\n            \r\n                public double getRadius() {\r\n                    return radius;\r\n                }\r\n            \r\n                public double getPerimeter() {\r\n                    return Math.PI*getDiameter();\r\n                }\r\n            \r\n                public String toString() {\r\n                    return \"Circle with a radius of \" + radius;\r\n                }\r\n            }","n":0.099},"2":{"v":"/codehs/java/5/1/fixing-circle.html","n":1}}},{"i":130,"$":{"0":{"v":"5.2.5 Batting Average","n":0.577},"1":{"v":"5.2.5 Batting Averagepublic class BaseballTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    BaseballPlayer babeRuth = new BaseballPlayer(\"Babe Ruth\", 2873, 8399);\r\n                    System.out.println(babeRuth);\r\n                    \r\n                    // Call the function printBattingAverage here\r\n                    babeRuth.printBattingAverage();\r\n                    \r\n                }\r\n            }public class BaseballPlayer\r\n{\r\n    private int hits;\r\n    private int atBats;\r\n    private String name;\r\n    \r\n    //Add constructor here\r\n    public BaseballPlayer(String n, int h, int aB) {\r\n        this.name = n;\r\n        this.hits = h;\r\n        this.atBats = aB;\r\n    }\r\n    \r\n    public void printBattingAverage()\r\n    {\r\n        double battingAverage = hits / (double) atBats;\r\n        System.out.println(battingAverage);\r\n    }\r\n    \r\n    public String toString()\r\n    {\r\n        return name + \": \" + hits + \"/\" + atBats;\r\n    }\r\n    \r\n    \r\n}","n":0.101},"2":{"v":"/codehs/java/5/2/batting-average.html","n":1}}},{"i":131,"$":{"0":{"v":"5.2.6 Dog Class","n":0.577},"1":{"v":"5.2.6 Dog Classpublic class Dog\r\n{\r\n    private String name;\r\n    private int age;\r\n    private double weight;\r\n\r\n    // Add your constructors here\r\n    public Dog(String name, int age, double weight) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.weight = weight;\r\n    }\r\n    \r\n    public Dog(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.weight = 0.0;\r\n    }\r\n\r\n    public String toString(){\r\n        return \"Name: \" + name + \"\\nWeight: \" + weight +  \"\\nAge: \" + age;\r\n    }\r\n}public class DogTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Start here!\r\n                    System.out.println(new Dog(\"Dog\", 3, 2.0));\r\n                    System.out.println(new Dog(\"Dog\", 3));\r\n                }\r\n            }","n":0.103},"2":{"v":"/codehs/java/5/2/dog-class.html","n":1}}},{"i":132,"$":{"0":{"v":"5.2.8 SchoolClub Class","n":0.577},"1":{"v":"5.2.8 SchoolClub Classpublic class Student\r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private String school;\r\n\r\n    /**\r\n     * Constructors go here.\r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor. Make sure your code matches the call in the\r\n     * tester.\r\n     */\r\n     \r\n     public Student(String fN, String lN, int grd, String schl) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = schl;\r\n     }\r\n     \r\n     public Student(String fN, String lN, int grd) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = grd >= 9 ? \"high school\" : grd >= 6 ? \"middle school\" : \"elementary school\";\r\n     }\r\n   \r\n   \r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     * \r\n     * Modify the to string to add 'and goes to _____' at the end\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade \" + gradeLevel + \" and goes to \" + school;\r\n    }\r\n    \r\n    public String getFirstName(){\r\n        return firstName;\r\n    }\r\n}public class StudentTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11, \"Liberty High School\");\r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 5);\r\n                    \r\n                    System.out.println(alan);\r\n                    System.out.println(ada);\r\n                    \r\n                    System.out.println(new SchoolClub(alan, \"dnd club\"));\r\n                    \r\n                }\r\n            }public class SchoolClub\r\n            {\r\n            \r\n                private Student leader;\r\n                private String name;\r\n                private int numMembers;\r\n            \r\n                /* Add your constructor here\r\n                 * Constructor should take a leader and club name, then set\r\n                 * numMembers to 0.\r\n                 */\r\n                 \r\n                public SchoolClub(Student ldr, String n) {\r\n                    this.leader = ldr;\r\n                    this.name = n;\r\n                    this.numMembers = 0;\r\n                }\r\n            \r\n                public void addMember() {\r\n                    numMembers ++;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return leader.getFirstName() + \" is the leader of the \" + name + \" club.\";\r\n                }\r\n            }","n":0.057},"2":{"v":"/codehs/java/5/2/schoolclub-class.html","n":1}}},{"i":133,"$":{"0":{"v":"5.2.7 Student Overload","n":0.577},"1":{"v":"5.2.7 Student Overloadpublic class StudentTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11, \"Liberty High School\");\r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 5);\r\n                    \r\n                    System.out.println(alan);\r\n                    System.out.println(ada);\r\n                    \r\n                }\r\n            }public class Student\r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private String school;\r\n\r\n    /**\r\n     * Constructors go here.\r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor. Make sure your code matches the call in the\r\n     * tester.\r\n     */\r\n     \r\n     public Student(String fN, String lN, int grd, String schl) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = schl;\r\n     }\r\n     \r\n     public Student(String fN, String lN, int grd) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = grd >= 9 ? \"high school\" : grd >= 6 ? \"middle school\" : \"elementary school\";\r\n     }\r\n   \r\n   \r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     * \r\n     * Modify the to string to add 'and goes to _____' at the end\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade \" + gradeLevel + \" and goes to \" + school;\r\n    }\r\n    \r\n    public String getFirstName(){\r\n        return firstName;\r\n    }\r\n}","n":0.067},"2":{"v":"/codehs/java/5/2/student-overload.html","n":1}}},{"i":134,"$":{"0":{"v":"5.3.8 C.Y.O.A. Finishing the story","n":0.447},"1":{"v":"5.3.8 C.Y.O.A. Finishing the storyimport java.util.Scanner;\r\n\r\n            public class CYOA\r\n            {\r\n                private static Scanner input;\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Intro\");\r\n                    \r\n                    System.out.println(\"Question 1. Option [A] or [B]?\");\r\n                    if(input.nextLine().equals(\"A\")) {\r\n                        //option A\r\n                            System.out.println(\"Question 2. Option [X] or [Y]?\");\r\n                            if(input.nextLine().equals(\"X\")) {\r\n                                //Option X\r\n                            } else {\r\n                                //Option Y\r\n                            }\r\n                    } else {\r\n                        //option B\r\n                    }\r\n                }\r\n            }","n":0.127},"2":{"v":"/codehs/java/5/3/c-y-o-a-finishing-the-story.html","n":1}}},{"i":135,"$":{"0":{"v":"5.3.7 C.Y.O.A. Layout","n":0.577},"1":{"v":"5.3.7 C.Y.O.A. LayoutJSYK\r\n                This one, despite being marked as Java code, is not Java-- it's just comments. I don't have answers for you, sorry. The code part is 5.3.8; there are answers on that one./**/","n":0.169},"2":{"v":"/codehs/java/5/3/c-y-o-a-layout.html","n":1}}},{"i":136,"$":{"0":{"v":"5.3.6 Commenting Activity Log","n":0.5},"1":{"v":"5.3.6 Commenting Activity Logpublic class ActivityTracker\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ActivityLog mylog = new ActivityLog();\r\n                    \r\n                    mylog.addMiles(5);\r\n                    mylog.addHours(1);\r\n                    \r\n                    System.out.print(\"Total Miles: \");\r\n                    System.out.println(mylog.getMiles());\r\n                    \r\n                    double hoursToday = mylog.getHours();\r\n                    \r\n                    mylog.addHours(1.5);\r\n                    mylog.addHours(3);\r\n                    \r\n                    double increase = mylog.getHours() - hoursToday;\r\n                    \r\n                    System.out.print(\"There are \");\r\n                    System.out.print(increase);\r\n                    System.out.println(\" more hours today than two days ago\");\r\n                }\r\n            }public class ActivityLog\r\n            {\r\n                private double numHours;\r\n                private double numMiles;\r\n                \r\n                public ActivityLog()\r\n                {\r\n                    numHours = 0;\r\n                    numMiles = 0;\r\n                }\r\n                \r\n                /**\r\n                 * Increase hours in log by given amount\r\n                 * @param hours the amount of hours to add\r\n                */ \r\n                public void addHours(double hours)\r\n                {\r\n                    numHours += hours;\r\n                }\r\n                \r\n                /**\r\n                 * Increase miles in log by given amount\r\n                 * @param miles the amount of miles to add\r\n                */ \r\n                public void addMiles(double miles)\r\n                {\r\n                    numMiles += miles;\r\n                }\r\n                \r\n                /**\r\n                 * Get amount of miles accumulated \r\n                 * @return Accumulated miles\r\n                */ \r\n                public double getMiles()\r\n                {\r\n                    return numMiles;\r\n                }\r\n                \r\n                /**\r\n                 * Get amount of hours accumulated \r\n                 * @return Accumulated hours\r\n                */ \r\n                public double getHours() \r\n                {\r\n                    return numHours;\r\n                }\r\n                \r\n            }","n":0.074},"2":{"v":"/codehs/java/5/3/commenting-activity-log.html","n":1}}},{"i":137,"$":{"0":{"v":"5.3.5 Commenting Activity Tracker","n":0.5},"1":{"v":"5.3.5 Commenting Activity Trackerpublic class ActivityLog\r\n            {\r\n                private double numHours;\r\n                private double numMiles;\r\n                \r\n                public ActivityLog()\r\n                {\r\n                    numHours = 0;\r\n                    numMiles = 0;\r\n                }\r\n                \r\n                public void addHours(double hours)\r\n                {\r\n                    numHours += hours;\r\n                }\r\n                \r\n                public void addMiles(double miles)\r\n                {\r\n                    numMiles += miles;\r\n                }\r\n                \r\n                public double getMiles()\r\n                {\r\n                    return numMiles;\r\n                }\r\n                \r\n                public double getHours() \r\n                {\r\n                    return numHours;\r\n                }\r\n                \r\n            }public class ActivityTracker\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ActivityLog mylog = new ActivityLog();\r\n        \r\n        //log miles\r\n        mylog.addMiles(5);\r\n        mylog.addHours(1);\r\n        \r\n        //print user's mile count\r\n        System.out.print(\"Total Miles: \");\r\n        //print on a separate line\r\n        System.out.println(mylog.getMiles());\r\n        \r\n        //get initial hours from log\r\n        double hoursToday = mylog.getHours();\r\n        \r\n        //log some hours\r\n        mylog.addHours(1.5);\r\n        mylog.addHours(3);\r\n        \r\n        //get change-- `final - initial`\r\n        double increase = mylog.getHours() - hoursToday;\r\n        \r\n        //print increase; use `.print()` instead of string concatanation\r\n        System.out.print(\"There are \");\r\n        System.out.print(increase);\r\n        System.out.println(\" more hours today than two days ago\");\r\n    }\r\n}","n":0.083},"2":{"v":"/codehs/java/5/3/commenting-activity-tracker.html","n":1}}},{"i":138,"$":{"0":{"v":"5.4.7 A Different Dragon Class","n":0.447},"1":{"v":"5.4.7 A Different Dragon ClassTip You don't have to fill DragonTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class DragonTester\r\n    {\r\n        public static void main(String[] args)\r\n        {\r\n            // Start here!\r\n        }\r\n    }public class Dragon \r\n    {\r\n        private String name;\r\n        private int level;\r\n        private boolean canBreatheFire;\r\n        \r\n        public Dragon(String _name, int _level) {\r\n            this.level = _level;\r\n            this.name = _name;\r\n            this.canBreatheFire = level >= 70;\r\n        }\r\n        \r\n        public String getName() {\r\n            return this.name;\r\n        }\r\n        \r\n        public int getLevel() {\r\n            return this.level;\r\n        }\r\n        \r\n        public boolean isFireBreather() {\r\n            return this.canBreatheFire;\r\n        }\r\n        \r\n        public void attack() {\r\n            System.out.println(canBreatheFire ? \">>>>>>>>>>\\n>>>>>>>>>>>>>>\\n>>>>>>>>>>>>>>\\n>>>>>>>>>>\" : \"~ ~ ~\");\r\n        }\r\n        \r\n        public void gainExperience() {\r\n            this.canBreatheFire = (level+=10) >= 70;\r\n        }\r\n        \r\n    \r\n        // String representation of the object\r\n        public String toString()\r\n        {\r\n            return \"Dragon is at level \" + level + \" and is named \" + name;\r\n        }\r\n    }","n":0.082},"2":{"v":"/codehs/java/5/4/a-different-dragon-class.html","n":1}}},{"i":139,"$":{"0":{"v":"5.4.6 Full Dragon Class","n":0.5},"1":{"v":"5.4.6 Full Dragon ClassTip You don't have to fill DragonTester.java; the autograder doesn't care about it.\r\n            You'll get a Completed mark either way.public class DragonTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Dragon here to test out the Dragon class!\r\n                }\r\n            }public class Dragon \r\n{\r\n    private String attack;\r\n    private int level;\r\n    \r\n    public Dragon(int _level, String _attack) {\r\n        this.level = _level;\r\n        this.attack = _attack;\r\n    }\r\n    \r\n    public String getAttack() {\r\n        return this.attack;\r\n    }\r\n    \r\n    public int getLevel() {\r\n        return this.level;\r\n    }\r\n    \r\n    public String fight() {\r\n        String r = \"\";\r\n        for(int i = 0; i < level; i++) {\r\n            r += attack;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n\r\n    // String representation of the object\r\n    public String toString()\r\n    {\r\n        return \"Dragon is at level \" + level + \" and attacks with \" + attack;\r\n    }\r\n}","n":0.085},"2":{"v":"/codehs/java/5/4/full-dragon-class.html","n":1}}},{"i":140,"$":{"0":{"v":"5.4.5 Text Messages Getter Methods","n":0.447},"1":{"v":"5.4.5 Text Messages Getter MethodsTip You don't have to fill Messages.java; the autograder doesn't care about it.\r\n            You'll get a Completed mark either way.public class Messages\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Your code here.\r\n        // Create two TextMessage objects and print them out.\r\n    }\r\n}public class TextMessage\r\n            {\r\n                private String message;\r\n                private String sender;\r\n                private String receiver;\r\n                \r\n                public TextMessage(String from, String to, String theMessage)\r\n                {\r\n                    sender = from;\r\n                    receiver = to;\r\n                    message = theMessage;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return sender + \" texted \" + receiver + \": \" + message;\r\n                }\r\n            \r\n                public String getMessage() {\r\n                    return this.message;\r\n                }\r\n            \r\n                public String getSender() {\r\n                    return this.sender;\r\n                }\r\n            \r\n                public String getReceiver() {\r\n                    return this.receiver;\r\n                }\r\n            }","n":0.091},"2":{"v":"/codehs/java/5/4/text-messages-getter-methods.html","n":1}}},{"i":141,"$":{"0":{"v":"5.5.6 Full Fraction Class","n":0.5},"1":{"v":"5.5.6 Full Fraction ClassTip You don't have to fill FractionTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class FractionTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Implement the Fraction class in Fraction.java\r\n        \r\n        // Then add code here to test out your Fraction class!\r\n    }\r\n}public class Fraction\r\n            {\r\n                public int numerator;\r\n                public int denominator;\r\n                \r\n                public Fraction(int n, int d) {\r\n                    this.numerator = n;\r\n                    this.denominator = d;\r\n                }\r\n                \r\n                \r\n                public int getNumerator() {\r\n                    return this.numerator;\r\n                }\r\n                \r\n                public int getDenominator() {\r\n                    return this.denominator;\r\n                }\r\n                \r\n                public void setNumerator(int x) {\r\n                    this.numerator = x;\r\n                }\r\n                \r\n                \r\n                public void setDenominator(int x) {\r\n                    this.denominator = x;\r\n                }\r\n                \r\n                public void add(Fraction other) {\r\n                    this.numerator = this.numerator * other.getDenominator() + other.getNumerator() * this.denominator;\r\n                    this.denominator *= other.getDenominator();\r\n                }\r\n                \r\n                public void subtract(Fraction other) {\r\n                    this.numerator = this.numerator * other.getDenominator() - other.getNumerator() * this.denominator;\r\n                    this.denominator *= other.getDenominator();\r\n                }\r\n                \r\n                public void multiply(Fraction other) {\r\n                    this.numerator *= other.getNumerator();\r\n                    this.denominator *= other.getDenominator();\r\n                }\r\n                \r\n                public String toString() {\r\n                    return this.numerator + \" / \" + this.denominator;\r\n                }\r\n            }","n":0.075},"2":{"v":"/codehs/java/5/5/full-fraction-class.html","n":1}}},{"i":142,"$":{"0":{"v":"5.5.5 Rectangle class","n":0.577},"1":{"v":"5.5.5 Rectangle classTip You don't have to fill RectangleTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class RectangleTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Make some objects and print out their\r\n        // areas and perimeters\r\n    }\r\n}public class Rectangle\r\n            {\r\n                private int width;\r\n                private int height;\r\n                \r\n                /**\r\n                 * This is the constructor to create a Rectangle.\r\n                 * To create a Rectangle we need to know its width\r\n                 * and height.\r\n                 */\r\n                public Rectangle(int rectWidth, int rectHeight)\r\n                {\r\n                    width = rectWidth;\r\n                    height = rectHeight;\r\n                }\r\n                \r\n            \r\n                public int getHeight() { return this.height; }\r\n                public int getWidth() { return this.width; }\r\n                public int getArea() { return this.height * this.width; }\r\n                public int getPerimeter() { return this.height * 2 + this.width * 2; }\r\n                \r\n                public void setWidth(int w) { this.width = w; }\r\n                public void setHeight(int h) { this.height = h; }\r\n            \r\n            \r\n                /**\r\n                 * This method computes and prints the\r\n                 * area of the Rectangle.\r\n                 * Note it will print the area of the\r\n                 * Rectangle object that called it using\r\n                 * the dot operator!\r\n                 */ \r\n                public void printArea()\r\n                {\r\n                    int area = width * height;\r\n                    System.out.println(area);\r\n                }\r\n                \r\n                /**\r\n                 * This method computes and prints the\r\n                 * perimeter of the Rectangle.\r\n                 */ \r\n                public void printPerimeter()\r\n                {\r\n                    int perimeter = 2 * width + 2 * height;\r\n                    System.out.println(perimeter);\r\n                }\r\n                \r\n                /**\r\n                 * This is the toString method. It returns a String\r\n                 * representation of the object. \r\n                 */\r\n                public String toString()\r\n                {\r\n                    return \"Rectangle width: \" + width + \", Rectangle height: \" + height;\r\n                }\r\n            }","n":0.061},"2":{"v":"/codehs/java/5/5/rectangle-class.html","n":1}}},{"i":143,"$":{"0":{"v":"5.5.7 Weekly Routine","n":0.577},"1":{"v":"5.5.7 Weekly RoutineTip You don't have to fill RoutineTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class RoutineTester\r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Routine myWeek = new Routine();\r\n        \r\n        myWeek.setSchool(8);\r\n        myWeek.setSports(3);\r\n        myWeek.setSleep(8);\r\n        myWeek.setFun(2);\r\n        \r\n        // Prints the totals for the WHOLE WEEK\r\n        myWeek.printTotal();\r\n    }\r\n}public class Routine\r\n            {\r\n                private double sleep;\r\n                private double fun;\r\n                private double school;\r\n                private double sports;\r\n                \r\n                public Routine() {\r\n                    this.sleep = 0.0;\r\n                    this.fun = 0.0;\r\n                    this.school = 0.0;\r\n                    this.sports = 0.0;\r\n                }\r\n                \r\n                public void setSleep(double s) {\r\n                    this.sleep = s;\r\n                }\r\n                public void setFun(double s) {\r\n                    this.fun = s;\r\n                }\r\n                public void setSchool(double s) {\r\n                    this.school = s;\r\n                }\r\n                public void setSports(double s) {\r\n                    this.sports = s;\r\n                }\r\n                \r\n                public void printTotal() {\r\n                    System.out.println(\"Weekly Totals\");\r\n                    System.out.println(\"Sleep: \" + sleep*7);\r\n                    System.out.println(\"School: \" + school*7);\r\n                    System.out.println(\"Sports: \" + sports*7);\r\n                    System.out.println(\"Fun: \" + fun*7);\r\n                    System.out.println(\"Grand Total: \" + (sleep*7 + school*7 + sports*7 + fun*7 ));\r\n                    System.out.println(\"Hours left over: \" + (24*7-(sleep*7 + school*7 + sports*7 + fun*7 )) );\r\n            \r\n                }\r\n            }","n":0.076},"2":{"v":"/codehs/java/5/5/weekly-routine.html","n":1}}},{"i":144,"$":{"0":{"v":"5.6.7 Car Class","n":0.577},"1":{"v":"5.6.7 Car Classpublic class CarTester {\r\n\r\n                public static void main(String[] args) {\r\n                    //Create a car that gets 20 mpg and has a 15 gallon tank\r\n                    Car minivan = new Car(20.0, 15.0);\r\n                    //Fill up the gas tank\r\n                    minivan.addGas();\r\n                    //Check the miles available\r\n                    System.out.println(\"Miles available: \" + minivan.milesAvailable());\r\n                    //Drive 100 miles\r\n                    minivan.drive(100.0);\r\n                    //Check the miles available\r\n                    System.out.println(\"Miles available: \" + minivan.milesAvailable());\r\n                    //Add 2 gallons to the gas tank\r\n                    minivan.addGas(2.0);\r\n                    //Check the miles available\r\n                    System.out.println(\"Miles available: \" + minivan.milesAvailable());\r\n                    //Try driving more miles than available by driving 1000 miles\r\n                    minivan.drive(1000.0);\r\n                    //Drive 200 miles\r\n                    minivan.drive(200.0);\r\n                    //Check how much gas you have left\r\n                    System.out.println(\"Gas remaining: \" + minivan.getGas());\r\n                    //Print total miles driven\r\n                    System.out.println(\"Total Miles Driven: \" + minivan.getTotalMilesDriven());\r\n                }\r\n            }public class Car {\r\n                private double efficiency; // this is miles per gallon\r\n                private double gas;\r\n                private double tankCapacity;\r\n                private double totalMilesDriven;\r\n                \r\n                public Car(double carEfficiency, double carTankCapacity) {\r\n                    this.efficiency = carEfficiency;\r\n                    this.tankCapacity = carTankCapacity;\r\n                    \r\n                    this.gas = 0;\r\n                    this.totalMilesDriven = 0;\r\n                }\r\n                \r\n                public void addGas() {\r\n                    System.out.println(\"Filling up ...\");\r\n                    this.gas = tankCapacity;\r\n                }\r\n                public void addGas(double amount) {\r\n                    System.out.println(\"Adding gas ...\");\r\n                    \r\n                    //you could also use `this.gas = Math.min(gas + amount, tankCapacity)`\r\n                    this.gas += amount;\r\n                    if(this.gas > this.tankCapacity) this.gas = this.tankCapacity;\r\n                }\r\n                \r\n                public double getTotalMilesDriven() {\r\n                    return this.totalMilesDriven;\r\n                }\r\n                public void drive(double distance) {\r\n                    if(canDrive(distance)) {\r\n                        System.out.println(\"Driving \" + distance);\r\n                        totalMilesDriven += distance;\r\n                        gas -= distance / efficiency;\r\n                    } else {\r\n                        System.out.println(\"Can't drive \" + distance + \". That's too far!\");\r\n                    }\r\n                }\r\n                public boolean canDrive(double distance) {\r\n                    return gas >= distance / efficiency;\r\n                }\r\n                public double milesAvailable() {\r\n                    return efficiency * gas;\r\n                }\r\n                public double getGas() {\r\n                    return gas;\r\n                }\r\n            }","n":0.061},"2":{"v":"/codehs/java/5/6/car-class.html","n":1}}},{"i":145,"$":{"0":{"v":"5.6.5 Distance Conversions","n":0.577},"1":{"v":"5.6.5 Distance Conversionspublic class DistanceTester\r\n            {\r\n                public static void main(String[] args)   \r\n                {\r\n                    Distance milesFromSchool = new Distance(5.0);\r\n                    Distance milesFromPark = new Distance(10.0);\r\n                    Distance milesFromFriend = new Distance(12.0);\r\n                    \r\n                    System.out.println(milesFromSchool.toYards());\r\n                    System.out.println(milesFromPark.toKilometers());\r\n                    System.out.println(milesFromFriend.toFeet());\r\n                }\r\n            }public class Distance\r\n{\r\n    private double miles;\r\n    \r\n    public Distance(double startMiles) {\r\n        this.miles = startMiles;\r\n    }\r\n    \r\n    public double toKilometers() {\r\n        return miles / 0.62137;\r\n    }\r\n    \r\n    public double toYards() {\r\n        return miles * 1760;\r\n    }\r\n    \r\n    public double toFeet() {\r\n        return miles * 5280;\r\n    }\r\n    \r\n    public double getMiles() {\r\n        return miles;\r\n    }\r\n}","n":0.108},"2":{"v":"/codehs/java/5/6/distance-conversions.html","n":1}}},{"i":146,"$":{"0":{"v":"5.6.6 Food App Demo","n":0.5},"1":{"v":"5.6.6 Food App Demoimport java.util.Scanner;\r\n\r\n            public class FoodRunner\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    Food burger = new Food(\"Hamburgers\", 600);\r\n                    Food fries = new Food(\"Fries\", 350);\r\n                    Food coke = new Food(\"Coke\", 200);\r\n                    \r\n                    System.out.println(burger);\r\n                    System.out.println(\"How many would you like?\");\r\n                    int burgerCount = input.nextInt();\r\n                    \r\n                    System.out.println(fries);\r\n                    System.out.println(\"How many would you like?\");\r\n                    int friesCount = input.nextInt();\r\n                    \r\n                    System.out.println(coke);\r\n                    System.out.println(\"How many would you like?\");\r\n                    int cokeCount = input.nextInt();\r\n                    \r\n                    System.out.println(\"Your meal will have a total of \"   + ( \r\n                            burger.getCalories() * burgerCount +\r\n                            fries .getCalories() * friesCount  +\r\n                            coke  .getCalories() * cokeCount\r\n                        )\r\n                        + \" calories\");\r\n                }\r\n            }public class Food\r\n{\r\n        private String name;\r\n        private int calories;\r\n        \r\n        \r\n        public Food(String name, int calories) {\r\n            this.name = name;\r\n            this.calories = calories;\r\n        }\r\n        \r\n        \r\n        public int getCalories() {\r\n            return this.calories;\r\n        }\r\n        \r\n        public void setCalories(int calories) {\r\n            this.calories = calories;\r\n        }\r\n        \r\n        \r\n        \r\n        public String getName() {\r\n            return this.name;\r\n        }\r\n        \r\n        public void setName(String name) {\r\n            this.name = name;\r\n        }\r\n        \r\n        \r\n        public String toString() {\r\n            return name + \" have \" + calories + \" calories.\";\r\n        }\r\n    \r\n}","n":0.074},"2":{"v":"/codehs/java/5/6/food-app-demo.html","n":1}}},{"i":147,"$":{"0":{"v":"5.6.8 Open Response: Combination Lock FRQ","n":0.408},"1":{"v":"5.6.8 Open Response: Combination Lock FRQpublic class CombinationLock {\r\n                private String password;\r\n                \r\n                public CombinationLock(String password) {\r\n                    this.password = password;\r\n                }\r\n                \r\n                public String getClue(String guess) {\r\n                    //this clue will be built in the `for` loop later\r\n                    String clue = \"\";\r\n                    //passwords & guesses are always 4 letters\r\n                    for(int i = 0; i < 4; i++) {\r\n                        //iterate through; for each letter, determine the clue character & build on the clue\r\n                        char guessLetter = guess.charAt(i);\r\n                        //if the guess was correct for this char, it's the character itself\r\n                        if(guessLetter == password.charAt(i)) clue += guessLetter;\r\n                        //if the guess is correct, but in the wrong spot, it's '+'\r\n                        else if(password.indexOf(guessLetter) > -1) clue += \"+\";\r\n                        //if it's just totally incorrect and you should be ashamed, add \"*\"\r\n                        else clue += \"*\";\r\n                    }\r\n                    return clue;\r\n                }\r\n            }","n":0.087},"2":{"v":"/codehs/java/5/6/open-response-combination-lock-frq.html","n":1}}},{"i":148,"$":{"0":{"v":"5.7.7 How Many Players in the Game?","n":0.378},"1":{"v":"5.7.7 How Many Players in the Game?JSYK\r\n            You don't have to fill in PlayerTester at all; the auto-grader doesn't care about it. You'll be approved either way!public class PlayerTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Test out the Player class here!\r\n                }\r\n            }public class Player \r\n            {\r\n                // Static Variables\r\n                // ...\r\n                public static int totalPlayers = 0;\r\n                public static int maxPlayers = 10;\r\n                \r\n                // Public Methods\r\n                public Player() \r\n                {\r\n                    totalPlayers++;\r\n                }\r\n                \r\n                public static boolean gameFull() {\r\n                    return totalPlayers >= maxPlayers;\r\n                }\r\n            }","n":0.107},"2":{"v":"/codehs/java/5/7/how-many-players-in-the-game.html","n":1}}},{"i":149,"$":{"0":{"v":"5.7.5 Randomizer Class","n":0.577},"1":{"v":"5.7.5 Randomizer Classpublic class RandomizerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n    \r\n        System.out.println(\"Results of Randomizer.nextInt()\");\r\n        for(int i = 0; i < 10; i++)\r\n        {\r\n            System.out.println(Randomizer.nextInt());\r\n        }\r\n       \r\n        //Initialize min and max for Randomizer.nextInt(min,max)\r\n        int min = 5;\r\n        int max = 10;\r\n        System.out.println(\"\\nResults of Randomizer.nextInt(5,10)\");\r\n        for(int i = 0; i < 10; i++)\r\n        {\r\n            System.out.println(Randomizer.nextInt(min ,max));\r\n        }\r\n        \r\n    }\r\n}public class Randomizer\r\n            {\r\n                public static int nextInt()\r\n                {\r\n                    //Implement this method to return a random number from 1-10\r\n                    return (int) (Math.random() * 10) + 1;\r\n                }\r\n                \r\n                public static int nextInt(int min, int max)\r\n                {\r\n                    return (int) (Math.random() * (max - min + 1)) + min;\r\n                }\r\n            }","n":0.097},"2":{"v":"/codehs/java/5/7/randomizer-class.html","n":1}}},{"i":150,"$":{"0":{"v":"5.7.6 Rock, Paper, Scissors!","n":0.5},"1":{"v":"5.7.6 Rock, Paper, Scissors!JSYK The autograder for this assignment appears to be written incorrectly, causing NoSuchElementExceptions to occur. You may see some code below that you don't recognize. That's okay! This is a solution that accounts for those grader errors.public class Randomizer\r\n{\r\n    public static int nextInt()\r\n    {\r\n        //Implement this method to return a random number from 1-10\r\n        return (int) (Math.random() * 10) + 1;\r\n    }\r\n    \r\n    public static int nextInt(int min, int max)\r\n    {\r\n        return (int) (Math.random() * (max - min + 1)) + min;\r\n    }\r\n}import java.util.Scanner;\r\n\r\n            public class RockPaperScissors\r\n            {\r\n                private static final String USER_PLAYER = \"User wins!\";\r\n                private static final String COMPUTER_PLAYER = \"Computer wins!\";\r\n                private static final String TIE = \"Tie\";\r\n                    \r\n                public static String getWinner(String user, String computer)\r\n                {\r\n                    if(user.equals(computer)) return TIE;\r\n                    else if(user.equals(\"rock\") && computer.equals(\"paper\")) return COMPUTER_PLAYER;\r\n                    else if(user.equals(\"paper\") && computer.equals(\"rock\")) return USER_PLAYER;\r\n                    \r\n                    else if(user.equals(\"scissors\") && computer.equals(\"rock\")) return COMPUTER_PLAYER;\r\n                    else if(user.equals(\"rock\") && computer.equals(\"scissors\")) return USER_PLAYER;\r\n                    \r\n                    else if(user.equals(\"paper\") && computer.equals(\"scissors\")) return COMPUTER_PLAYER;\r\n                    else if(user.equals(\"scissors\") && computer.equals(\"paper\")) return USER_PLAYER;\r\n                    \r\n                    //java doesn't like it if there isn't a return statement at the end\r\n                    return TIE;\r\n                }\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    while(true) {\r\n                        int computerChoice = Randomizer.nextInt(1, 3);\r\n                        String computer = \"\";\r\n\r\n                        if(computerChoice == 1) computer = \"paper\";\r\n                        else if(computerChoice == 2) computer = \"rock\";\r\n                        else computer = \"scissors\";\r\n                        \r\n                        System.out.println(\"Enter your choice (rock, paper, or scissors): \");\r\n                        String user = \"\";\r\n\r\n                        try {\r\n                            if(input.hasNextLine()) user = input.nextLine();\r\n                        } catch(Exception e) {}\r\n                        \r\n                        //exit condition when user enters nothing\r\n                        if(user.equals(\"\")) break;\r\n                        \r\n                        System.out.println(\"User: \" + user);\r\n                        System.out.println(\"Computer: (either rock, paper, or scissors)\");\r\n                        \r\n                        System.out.println(getWinner(user, computer));\r\n                    }\r\n                    System.out.println(\"Thanks for playing!\");\r\n                }\r\n            }","n":0.06},"2":{"v":"/codehs/java/5/7/rock-paper-scissors.html","n":1}}},{"i":151,"$":{"0":{"v":"5.8.9 Broken Calculator","n":0.577},"1":{"v":"5.8.9 Broken Calculatorpublic class CalculatorTester\r\n            {\r\n                public static void main(String[] args) {\r\n            \r\n                    System.out.println(\"Starting at 5\");\r\n                    Calculator myTi = new Calculator(5);\r\n            \r\n                    System.out.println(\"Adding 10 ...\");\r\n                    System.out.print(\"Should print 15: \");\r\n                    System.out.println(myTi.add(10));\r\n            \r\n                    System.out.println(\"Multiplying by 2 ...\");\r\n                    System.out.print(\"Should print 30: \");\r\n                    System.out.println(myTi.multiple(2));\r\n            \r\n                    System.out.println(\"Changing value to 20 ...\");\r\n                    myTi.setValue(20);\r\n                    System.out.print(\"Adding. Should print 50: \");\r\n                    System.out.println(myTi.add());\r\n            \r\n                }\r\n            }public class Calculator {\r\n\r\n                private int total;\r\n                private int value;\r\n            \r\n                public Calculator(int startingValue){\r\n                    total = startingValue;\r\n                    value = 0;\r\n                }\r\n            \r\n                public int add(int value){\r\n                    total += value;\r\n                    return total;\r\n                }\r\n            \r\n                /**\r\n                * Adds the instance variable value to the total\r\n                */\r\n                public int add(){\r\n                    total += value;\r\n                    return total;\r\n                }\r\n            \r\n                public int multiple(int value){\r\n                    total *= value;\r\n                    return total;\r\n                }\r\n            \r\n                public void setValue(int value){\r\n                    this.value = value;\r\n                }\r\n            \r\n                public int getValue(){\r\n                    return value;\r\n                }\r\n            \r\n            }","n":0.085},"2":{"v":"/codehs/java/5/8/broken-calculator.html","n":1}}},{"i":152,"$":{"0":{"v":"5.8.7 Scope","n":0.707},"1":{"v":"5.8.7 Scopepublic class ScopeTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scope s = new Scope();\r\n                    s.printScope();\r\n                }\r\n            }public class Scope\r\n{\r\n    private int a;\r\n    private int b;\r\n    private int c;\r\n\r\n    public Scope(){\r\n        a = 5;\r\n        b = 10;\r\n        c = 15;\r\n    }\r\n\r\n    public void printScope(){\r\n        System.out.println(\"a = \" + getA());\r\n        System.out.println(\"b = \" + getB());\r\n        System.out.println(\"c = \" + getC());\r\n        System.out.println(\"d = \" + getD());\r\n        System.out.println(\"e = \" + getE());\r\n\r\n    }\r\n\r\n\tpublic int getA() {\r\n\t\treturn a;\r\n\t}\r\n\r\n\tpublic int getB() {\r\n\t\treturn b;\r\n\t}\r\n\r\n\tpublic int getC() {\r\n\t\treturn c;\r\n\t}\r\n\r\n    public int getD(){\r\n        int d = a + c;\r\n        return d;\r\n    }\r\n\r\n\tpublic int getE() {\r\n        int e = b + c;\r\n\t\treturn e;\r\n\t}\r\n}","n":0.098},"2":{"v":"/codehs/java/5/8/scope.html","n":1}}},{"i":153,"$":{"0":{"v":"5.8.8 Which Variables Exist?","n":0.5},"1":{"v":"5.8.8 Which Variables Exist?public class MathOperations\r\n            {\r\n                private static double PI = 3.14159;\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    int sumResult = sum(5, 10);\r\n                    int differenceResult = difference(20, 2);\r\n                    double productResult = product(3.5, 2);\r\n                    double circumferenceResult = circleCircumference(10);\r\n                    double areaResult = circleArea(12);\r\n                }\r\n                \r\n                public static int sum(int one, int two)\r\n                {\r\n                    // Printing Variables Example\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"one: \" + one);\r\n                    System.out.println(\"two: \" + two);\r\n                    \r\n                    return one + two;\r\n                }\r\n                \r\n                public static int difference(int one, int two)\r\n                {\r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"one: \" + one);\r\n                    System.out.println(\"two: \" + two);\r\n                    \r\n                    return one - two;\r\n                }\r\n                \r\n                public static double product(double a, double b)\r\n                {\r\n                    double result = a * b;\r\n                    \r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"a: \" + a);\r\n                    System.out.println(\"b: \" + b);\r\n                    System.out.println(\"result: \" + result);\r\n                    \r\n                    return result;\r\n                }\r\n                \r\n                public static double circleCircumference(int radius)\r\n                {\r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"radius: \" + radius);\r\n                    \r\n                    return 2 * radius * PI;\r\n                }\r\n                \r\n                public static double circleArea(int radius)\r\n                {\r\n                    double area = PI * radius * radius;\r\n                    \r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"radius: \" + radius);\r\n                    System.out.println(\"area: \" + area);\r\n                    \r\n                    return area;\r\n                }\r\n            }","n":0.068},"2":{"v":"/codehs/java/5/8/which-variables-exist.html","n":1}}},{"i":154,"$":{"0":{"v":"5.9.7 Fraction Math","n":0.577},"1":{"v":"5.9.7 Fraction Mathpublic class FractionTester\r\n{\r\n    public static void main(String[] args) {\r\n        Fraction first = new Fraction(3, 4);\r\n\r\n        Fraction half = new Fraction(1, 2);\r\n\r\n        System.out.println(first);\r\n        System.out.print(\"Multiplying: \");\r\n        System.out.println(half);\r\n\r\n        first.multiplyFraction(half);\r\n\r\n        System.out.println(\"Answer: \" + first);\r\n\r\n        System.out.println();\r\n        System.out.print(\"Adding: \");\r\n        System.out.println(half);\r\n\r\n        first.addFraction(half);\r\n\r\n        System.out.println(\"Answer: \" + first);\r\n    }\r\n\r\n}public class FractionMath {\r\n    \r\n                /*\r\n                * This is a static class that the Fraction class will use.\r\n                * No updates are needed.\r\n                */\r\n                \r\n                public static Fraction add(Fraction frac1, Fraction frac2){\r\n                    int numerator = frac1.getNumerator() * frac2.getDenominator() +\r\n                                    frac2.getNumerator() * frac1.getDenominator();\r\n            \r\n                    int denominator = frac1.getDenominator() * frac2.getDenominator();\r\n            \r\n                    Fraction solution = new Fraction(numerator, denominator);\r\n                    return solution;\r\n                }\r\n            \r\n                public static Fraction multiply(Fraction frac1, Fraction frac2){\r\n                    int numerator = frac1.getNumerator() * frac2.getNumerator();\r\n                    int denominator = frac1.getDenominator() * frac2.getDenominator();\r\n                    Fraction solution = new Fraction(numerator, denominator);\r\n                    return solution;\r\n                }\r\n            }public class Fraction\r\n            {\r\n                private int numerator;\r\n                private int denominator;\r\n            \r\n                public Fraction(int numerator, int denominator){\r\n                  this.numerator = numerator;\r\n                  this.denominator = denominator;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of numerator\r\n                * @return numerator\r\n                */\r\n                public int getNumerator() {\r\n                    return this.numerator;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of numerator\r\n                * @param numerator new numerator value\r\n                */\r\n                public void setNumerator(int numerator) {\r\n                    this.numerator = numerator;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of denominator\r\n                * @return denominator\r\n                */\r\n                public int getDenominator() {\r\n                    return this.denominator;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of denominator\r\n                * @param denominator new denominator\r\n                */\r\n                public void setDenominator(int denominator) {\r\n                    this.denominator = denominator;\r\n                }\r\n            \r\n                /**\r\n                * Updates this fraction by adding another fraction\r\n                * @param other Fraction to add to existing fraction\r\n                */\r\n            \r\n                //Calculate by using the FractionMath class, then update\r\n                //the numerator and denominator from the returned Fraction\r\n                public void addFraction(Fraction other){\r\n                   Fraction res = FractionMath.add(this, other);\r\n                   this.setNumerator(res.getNumerator());\r\n                   this.setDenominator(res.getDenominator());\r\n                }\r\n            \r\n                /**\r\n                * Updates this fraction by multiplying another fraction\r\n                * @param other Fraction to multiple to existing fraction\r\n                */\r\n            \r\n                //Calculate by using the FractionMath class, then update\r\n                //the numerator and denominator from the returned Fraction\r\n                public void multiplyFraction(Fraction other){\r\n                   Fraction res = FractionMath.multiply(this, other);\r\n                   this.setNumerator(res.getNumerator());\r\n                   this.setDenominator(res.getDenominator());\r\n                }\r\n            \r\n                /**\r\n                * Prints fraction as numerator / denominator\r\n                * Example: 1 / 2\r\n                */\r\n            \r\n                public String toString(){\r\n                    return numerator + \" / \" + denominator;\r\n                }\r\n            }","n":0.053},"2":{"v":"/codehs/java/5/9/fraction-math.html","n":1}}},{"i":155,"$":{"0":{"v":"5.9.6 Song Class","n":0.577},"1":{"v":"5.9.6 Song Classpublic class SongTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Song s = new Song(\"C416\", \"Sweden\", 3, 32);\r\n        System.out.println(s.toString());\r\n        \r\n        s.setSeconds(35);\r\n        System.out.println(s.toString());\r\n        \r\n        s.setArtist(\"C418\");\r\n        System.out.println(s.toString());\r\n    }\r\n}public class Song\r\n            {\r\n                private String artist;\r\n                private String title;\r\n                private int minutes;\r\n                private int seconds;\r\n            \r\n                public Song(String artist, String title, int minutes, int seconds){\r\n                  this.artist = artist;\r\n                  this.title = title;\r\n                  this.minutes = minutes;\r\n                  this.seconds = seconds;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of artist\r\n                * @return artist\r\n                */\r\n                public String getArtist() {\r\n                    return this.artist;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of artist\r\n                * @param artist Updated artist\r\n                */\r\n                public void setArtist(String artist) {\r\n                    this.artist = artist;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of title\r\n                * @return title\r\n                */\r\n                public String getTitle() {\r\n                    return this.title;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Sets new value of title\r\n                * @param title Updated title\r\n                */\r\n                public void setTitle(String title) {\r\n                      this.title = title;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Returns value of minutes\r\n                * @return minutes\r\n                */\r\n                public int getMinutes() {\r\n                return this.minutes;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of minutes\r\n                * @param minutes Updated minutes\r\n                */\r\n                public void setMinutes(int minutes) {\r\n                      this.minutes = minutes;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Returns value of seconds\r\n                * @return seconds\r\n                */\r\n                public int getSeconds() {\r\n                return this.seconds;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of seconds\r\n                * @param seconds Updated seconds\r\n                */\r\n                public void setSeconds(int seconds) {\r\n                          this.seconds = seconds;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Create string representation of Song for printing\r\n                * @return String of the song\r\n                */\r\n                @Override\r\n                public String toString() {\r\n                    return \"artist= \" + artist + \"\\ntitle= \" + title + \"\\nTime= \" + minutes + \":\" + seconds;\r\n                }\r\n            }","n":0.06},"2":{"v":"/codehs/java/5/9/song-class.html","n":1}}},{"i":156,"$":{"0":{"v":"5.9.5 Write Your Own CodeHS","n":0.447},"1":{"v":"5.9.5 Write Your Own CodeHSpublic class ExerciseTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Exercise exercise1 = new Exercise();\r\n        Exercise exercise2 = new Exercise(\"Who needs this anyways?\", \"Java\", 9001);\r\n        \r\n        System.out.println(exercise1.getTitle());\r\n        System.out.println(exercise2.getTitle());\r\n    }\r\n}public class Exercise\r\n            {\r\n                public String title = \"JavaScript Exercise\";\r\n                public String programmingLanguage = \"JavaScript\";\r\n                public int points = 100;\r\n                \r\n                // Default constructor.\r\n                public Exercise() \r\n                {\r\n                    \r\n                }\r\n                \r\n                // Edit code in this constructor.\r\n                public Exercise(String title, String programmingLanguage, int points) \r\n                {\r\n                    this.title = title;\r\n                    this.programmingLanguage = programmingLanguage;\r\n                    this.points =  points;\r\n                }\r\n                \r\n                public String getTitle() {\r\n                    return title;\r\n                }\r\n            }","n":0.102},"2":{"v":"/codehs/java/5/9/write-your-own-codehs.html","n":1}}},{"i":157,"$":{"0":{"v":"6.1.8 Last Element in Array","n":0.447},"1":{"v":"6.1.8 Last Element in Arraypublic class LastElement\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String[] arr = new String[]{\"hello\", \"my name\", \"world\", \"Karel\"};\r\n                    //get and print the last element of the array\r\n                    \r\n                    System.out.println(\"The last element of the String array is: \" + getLastElement(arr));\r\n                }\r\n            \r\n                public static String getLastElement(String[] arr)\r\n                {\r\n                    return arr[arr.length - 1];\r\n                }\r\n            }","n":0.131},"2":{"v":"/codehs/java/6/1/last-element-in-array.html","n":1}}},{"i":158,"$":{"0":{"v":"6.1.6 Our First Array","n":0.5},"1":{"v":"6.1.6 Our First Arraypublic class FirstArray\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                  String[] cities = new String[] {\r\n                      \"Las Vegas\", \"Minsk\", \"Sao Paulo\"\r\n                  };\r\n                  \r\n                  int[] temps = new int[] {\r\n                      104, 73, 80\r\n                  };\r\n                  \r\n                  double[] precipitation = new double[] {\r\n                      4.17, 26.7, 55.0\r\n                  };\r\n                    \r\n                  for(int i = 0; i < cities.length; i++) {\r\n                      System.out.println(cities[i] + \" has an average annual precipitation of \" + precipitation[i] + \" inches.\");\r\n                      System.out.println(cities[i] + \" has an average annual high temp of \" + temps[i] + \" degrees Fahrenheit.\");\r\n                  }\r\n                \r\n                }\r\n            }","n":0.104},"2":{"v":"/codehs/java/6/1/our-first-array.html","n":1}}},{"i":159,"$":{"0":{"v":"6.1.7 Set Scores","n":0.577},"1":{"v":"6.1.7 Set Scorespublic class Scores\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] scores = {80, 95, 82, 67, 100};\r\n                    \r\n                    for(int i = 0; i < scores.length; i++) System.out.println(scores[i]);\r\n                    \r\n                    scores[2] = 72;\r\n                    scores[scores.length - 1] = 95;\r\n                    \r\n                    System.out.println(\"\");\r\n                    \r\n                    for(int i = 0; i < scores.length; i++) System.out.println(scores[i]);\r\n                }\r\n            }","n":0.137},"2":{"v":"/codehs/java/6/1/set-scores.html","n":1}}},{"i":160,"$":{"0":{"v":"6.1.9 Snap Shot Splash Screen","n":0.447},"1":{"v":"6.1.9 Snap Shot Splash Screenpublic class SnapShot\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String[] splashLines ={ \"Welcome\",\r\n                                            \"to\",\r\n                                            \"the snap shot\",\r\n                                            \"app!\" };\r\n                                            \r\n                    for(int i = 0; i < splashLines.length; i++) System.out.println(splashLines[i]);\r\n                    \r\n                    splashLines[0] = \"Upgrade\";\r\n                    splashLines[splashLines.length - 1] = \"premium app!\";\r\n                    \r\n                    System.out.println(\"\");\r\n                    \r\n                    for(int i = 0; i < splashLines.length; i++) System.out.println(splashLines[i]);\r\n                }\r\n            }","n":0.131},"2":{"v":"/codehs/java/6/1/snap-shot-splash-screen.html","n":1}}},{"i":161,"$":{"0":{"v":"6.2.10 Fibonacci Sequence","n":0.577},"1":{"v":"6.2.10 Fibonacci Sequencepublic class Fibonacci \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n      \r\n        //number of elements to generate in the sequence\r\n\t\tint max = 15;\r\n\t\t\r\n\t\t// create the array to hold the sequence of Fibonacci numbers\r\n\t\tint[] sequence = new int[max];\r\n\t\t\r\n\t\t//create the first 2 Fibonacci sequence elements\r\n\t\tsequence[0] = 0;\r\n\t\tsequence[1] = 1;\r\n\t\t\r\n\t\t//create the Fibonacci sequence and store it in int[] sequence\r\n\t    for(int i = 2; i < sequence.length; i++) sequence[i] = sequence[i - 1] + sequence[i - 2];\r\n\t\t\r\n\t\t//print the Fibonacci sequence numbers\r\n        for(int i = 0; i < sequence.length; i++) System.out.print(sequence[i] + \" \");\r\n    \r\n        System.out.println(\"\\nIndex position of 55 is: \" + findIndex(sequence, 55));\r\n    \r\n    }\r\n      \r\n    // This method finds the index of an element in an array \r\n      \r\n    public static int findIndex (int[] arr, int n) \r\n    {\r\n        for(int i = 0; i < arr.length; i++) {\r\n            if(arr[i] == n) return i;\r\n        }\r\n        return -1;\r\n    }\r\n}","n":0.083},"2":{"v":"/codehs/java/6/2/fibonacci-sequence.html","n":1}}},{"i":162,"$":{"0":{"v":"6.2.9 Find Index of a String","n":0.408},"1":{"v":"6.2.9 Find Index of a Stringpublic class MatchingStringTester\r\n            {\r\n               public static void main(String[] args)\r\n               {\r\n                 System.out.println(MatchingString.findString(\"Karel\"));\r\n                 \r\n               }\r\n            }public class MatchingString\r\n            {\r\n            \r\n                private static String[] arr = {\"Hello\", \"Karel\", \"CodeHS!\"};\r\n                \r\n                public static int findString(String myString)\r\n                {\r\n                    for(int i = 0; i < arr.length; i++) {\r\n                        if(arr[i].equals(myString)) return i;\r\n                    }\r\n                    return -1;\r\n                }\r\n            }","n":0.135},"2":{"v":"/codehs/java/6/2/find-index-of-a-string.html","n":1}}},{"i":163,"$":{"0":{"v":"6.2.7 Print Array","n":0.577},"1":{"v":"6.2.7 Print Arraypublic class PrintArray\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String[] arr = new String[]{\"a\", \"b\", \"c\"};\r\n                    printArr(arr);\r\n                }\r\n                \r\n                public static void printArr(String[] arr)\r\n                {\r\n                    // Print everything in the array on its own line\r\n                    for(int i = 0; i < arr.length; i++) System.out.println(arr[i]);\r\n                }\r\n            }","n":0.143},"2":{"v":"/codehs/java/6/2/print-array.html","n":1}}},{"i":164,"$":{"0":{"v":"6.2.8 Print Odd Array Indices","n":0.447},"1":{"v":"6.2.8 Print Odd Array Indicespublic class PrintOdd \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] oddIndexArray = new int[] {1, 2, 3, 4, 5};\r\n                    printOddIndices(oddIndexArray);\r\n                }\r\n                \r\n                public static void printOddIndices(int[] arr)\r\n                {\r\n                    for(int i = 1; i < arr.length; i+=2) System.out.println(arr[i]);\r\n                }\r\n            }","n":0.149},"2":{"v":"/codehs/java/6/2/print-odd-array-indices.html","n":1}}},{"i":165,"$":{"0":{"v":"6.3.9 Array Average","n":0.577},"1":{"v":"6.3.9 Array Averagepublic class ArrayAverageTester\r\n            {\r\n            \r\n               public static void main(String[] args)\r\n               {\r\n                 int[] numArray =  {12, 17, 65, 7, 30, 88};\r\n                 \r\n                 ArrayAverage avg = new ArrayAverage(numArray);\r\n                 System.out.println(\"The average of the array is \" + avg.getAverage());\r\n               }\r\n            }public class ArrayAverage\r\n{\r\n   private int[] values;\r\n\r\n   public ArrayAverage(int[] theValues)\r\n   {\r\n      values = theValues;\r\n   }\r\n\r\n   public double getAverage()\r\n   {\r\n     //double so that division won't be rounded\r\n     double sum = 0;\r\n     for(int m : values) sum += m;\r\n     return sum / values.length;\r\n   }\r\n}","n":0.113},"2":{"v":"/codehs/java/6/3/array-average.html","n":1}}},{"i":166,"$":{"0":{"v":"6.3.8 Classroom Array","n":0.577},"1":{"v":"6.3.8 Classroom Arraypublic class ClassRoster\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student julian = new Student(\"Julian\", \"Jones\", 9);\r\n                    Student larisa = new Student(\"Larisa\", \"Torres\", 10);\r\n                    Student amada = new Student(\"Amada\", \"Robin\", 10);\r\n                    Student mikka = new Student(\"Mikka\", \"Leads\", 9);\r\n                    Student jay = new Student(\"Jay\", \"Khalil\", 10);\r\n                    \r\n                    Student[] classroom = {julian, larisa, amada, mikka, jay};\r\n            \r\n                    for(Student kid : classroom) {\r\n                        System.out.println(kid.getFirstName() + \" \" + kid.getLastName() + \" is in grade \" + kid.getGradeLevel());\r\n                    }\r\n                    \r\n                }\r\n            }/**\r\n * The Student class holds data about a student.\r\n * The fields are firstName, lastName, and grade.\r\n */\r\npublic class Student\r\n{\r\n    // Attributes\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    \r\n    // Constructor\r\n    public Student(String fName, String lName, int grade)\r\n    {\r\n        firstName = fName;\r\n        lastName = lName;\r\n        gradeLevel = grade;\r\n    }\r\n    \r\n    public String getFirstName()\r\n    {\r\n        return firstName;\r\n    }\r\n    \r\n    // new getter\r\n    public String getLastName()\r\n    {\r\n        return lastName;\r\n    }\r\n    \r\n    // new getter \r\n    public int getGradeLevel()\r\n    {\r\n        return gradeLevel;\r\n    }\r\n    \r\n    /*\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade: \" + gradeLevel;\r\n    }\r\n    */\r\n}","n":0.073},"2":{"v":"/codehs/java/6/3/classroom-array.html","n":1}}},{"i":167,"$":{"0":{"v":"6.3.7 Largest Value","n":0.577},"1":{"v":"6.3.7 Largest Valuepublic class LargestValue     \r\n            { \r\n                public static void main(String[] arg) \r\n                { \r\n                    { \r\n                        int[] values = {32, 56, 79, 2, 150, 37}; \r\n                          \r\n                        int highestValue = findMax(values); \r\n                        System.out.println(\"The highest score is \" + highestValue); \r\n                    } \r\n                } \r\n                public static int findMax(int[] numbers) \r\n                {  \r\n                    int maxSoFar = numbers[0];\r\n                    \r\n                    // for each loop to rewrite as for loop \r\n                    for (int i = 0; i < numbers.length; i++)  \r\n                    { \r\n                        if (numbers[i]> maxSoFar) \r\n                        { \r\n                            maxSoFar = numbers[i]; \r\n                        } \r\n                    } \r\n                return maxSoFar; \r\n                } \r\n            }","n":0.1},"2":{"v":"/codehs/java/6/3/largest-value.html","n":1}}},{"i":168,"$":{"0":{"v":"6.3.6 Print Odds","n":0.577},"1":{"v":"6.3.6 Print Oddspublic class PrintOdds\r\n            {\r\n               public static void main(String[] args)\r\n               {\r\n                 int[ ] values = {17, 34, 56, 2, 19, 100};\r\n                    \r\n                 for (int val : values)\r\n                 {\r\n                   if (val % 2 == 1)\r\n                       System.out.println(val + \" is odd\");\r\n                 }\r\n               }\r\n            }","n":0.152},"2":{"v":"/codehs/java/6/3/print-odds.html","n":1}}},{"i":169,"$":{"0":{"v":"6.4.8 Car Showroom","n":0.577},"1":{"v":"6.4.8 Car Showroomclass CarModel \r\n{\r\n   private String name;\r\n   private int speed;\r\n\r\n   public CarModel(String theName, int theSpeed)\r\n   {\r\n      this.name = theName;\r\n      this.speed = theSpeed;\r\n   }\r\n\r\n   public String getName() \r\n   { \r\n       return this.name;\r\n   }\r\n\r\n   public int getSpeed() \r\n   { \r\n       return this.speed; \r\n   }\r\n\r\n   public String toString()\r\n   {\r\n      return this.name + \" with a top speed of \" + this.speed;\r\n   }\r\n}public class CarShowroom \r\n            {\r\n               public static void main (String[] args)\r\n               {\r\n                 CarShowroom showroom = new CarShowroom(7);\r\n                 showroom.spaces[0] = new CarModel(\"Mustang\", 157);\r\n                 showroom.spaces[1] = new CarModel(\"Camaro\",155);\r\n                 showroom.spaces[3] = new CarModel(\"Corvette\", 194);\r\n                 showroom.spaces[6] = new CarModel(\"Porshe\", 210);\r\n            \r\n                 // print out what is in the showroom\r\n                 System.out.println(showroom);\r\n            \r\n                 // test output\r\n                 System.out.println(\"Index of Mustang should be 0 and is \" +\r\n                                    showroom.findCarSpace(\"Mustang\"));\r\n                 System.out.println(\"Index of Corvette should be 3 and is \" +\r\n                                    showroom.findCarSpace(\"Corvette\"));\r\n                 System.out.println(\"Index of Miata should be -1 and is \" +\r\n                                    showroom.findCarSpace(\"Miata\"));\r\n                                    \r\n                 \r\n                 System.out.println(\"\\nOriginal Car Showroom:\");\r\n                 System.out.println(showroom);\r\n                 showroom.consolidate();\r\n                 System.out.println(\"Car Showroom after cars have been consolidated:\");\r\n                 System.out.println(showroom);\r\n               }\r\n               \r\n               private CarModel[] spaces;\r\n            \r\n               // constructor for number of spaces in showroom\r\n               public CarShowroom(int numParkingSpaces)\r\n               {\r\n                 spaces = new CarModel[numParkingSpaces];\r\n               }\r\n            \r\n               // Returns index of space that contains the car with the specified model\r\n               // and -1 if no car in the showroom is that model.No two cars in the showroom are the same model.\r\n            \r\n               public int findCarSpace(String name)\r\n               {\r\n                    for(int i = 0; i < spaces.length; i++) {\r\n                        if(spaces[i] == null) continue;\r\n                        \r\n                        if(spaces[i].getName().equals(name)) return i;\r\n                    }\r\n                    \r\n                    return -1;\r\n               }\r\n               \r\n               // Consolidates cars in the showroom so that there are no gaps\r\n               // in the parking spaces so that it's easier to move new models in\r\n               \r\n               public void consolidate()\r\n               { \r\n                   for(int i = 0; i < spaces.length - 1; i++) {\r\n                       if(spaces[i] == null) {\r\n                           //if this space is empty, search for cars after here that can be used to fill it in\r\n                           for(int j = i; j < spaces.length; j++) {\r\n                               if(spaces[j] != null) {\r\n                                   //if/when we find one, slot it in & remove it from its old spot\r\n                                   spaces[i] = spaces[j];\r\n                                   spaces[j] = null;\r\n                                   //break searching loop once we've found something\r\n                                   break;\r\n                               }\r\n                           }\r\n                       }\r\n                   }\r\n               }\r\n            \r\n               public String toString()\r\n               {\r\n                 String result = \"\";\r\n                 CarModel sp = null;\r\n                 \r\n                 // iterate through the spaces\r\n                 for (int i = 0; i < spaces.length; i++) \r\n                 {\r\n                   sp = spaces[i];\r\n                   result = result + \"Space \" + i + \" has a \";\r\n                   \r\n                   // locate empty spaces\r\n                   if (sp == null)\r\n                   {\r\n                        result = result + \" null \\n\";\r\n                   }\r\n                   else result = result + sp.toString() + \"\\n\";\r\n                 }\r\n                 return result;\r\n               }\r\n            }","n":0.048},"2":{"v":"/codehs/java/6/4/car-showroom.html","n":1}}},{"i":170,"$":{"0":{"v":"6.4.7 Find the Last Multiple of 3","n":0.378},"1":{"v":"6.4.7 Find the Last Multiple of 3public class LastMultipleOfThree\r\n            {\r\n            \r\n                public static void main(String[] args)\r\n                {\r\n                    int[] numbers1 = {76, 75, 3, 17, 12, 22, 7};\r\n                    System.out.print(\"The following index holds the LAST multiple of 3: \" + findMultipleOfThree(numbers1));\r\n                    \r\n                }\r\n                \r\n                public static int findMultipleOfThree(int[] arr)\r\n                {\r\n                    //start at the last index and move towards the start, looking for items divisible by 3\r\n                    for(int i = arr.length - 1; i >= 0; i--) {\r\n                        if(arr[i] % 3 == 0)  return i;\r\n                    }\r\n                    return -1;\r\n                }\r\n            }","n":0.107},"2":{"v":"/codehs/java/6/4/find-the-last-multiple-of-3.html","n":1}}},{"i":171,"$":{"0":{"v":"6.4.6 Find the Median","n":0.5},"1":{"v":"6.4.6 Find the Medianimport java.util.*;\r\n            public class Median\r\n            {\r\n            \r\n                public static void main(String[] args)\r\n                {\r\n                    int[] numbers1 = {12, 75, 3, 17, 65, 22};\r\n                    System.out.print(\"The median value of the EVEN array is \" + median(numbers1));\r\n                    \r\n                    int[] numbers2 = {12, 75, 3, 17, 65, 22, 105};\r\n                    System.out.print(\"\\nThe median value of the ODD array is \" + median(numbers2));\r\n                    \r\n                }\r\n            \r\n                public static double median(int[] arr)\r\n                {\r\n                    Arrays.sort(arr);\r\n                    \r\n                    if(arr.length % 2 > 0) return arr[arr.length / 2];\r\n                    else return (double) (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2;\r\n                }\r\n            }","n":0.103},"2":{"v":"/codehs/java/6/4/find-the-median.html","n":1}}},{"i":172,"$":{"0":{"v":"6.4.8 Most Improved","n":0.577},"1":{"v":"6.4.8 Most Improvedpublic class ClassroomTester \r\n            {\r\n                public static void main (String[] args)\r\n                {\r\n                    Classroom c = new Classroom(2);\r\n                    \r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 12);\r\n                    ada.addExamScore(44);\r\n                    ada.addExamScore(65);\r\n                    ada.addExamScore(77);\r\n            \r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11);\r\n                    alan.addExamScore(38);\r\n                    alan.addExamScore(24);\r\n                    alan.addExamScore(31);\r\n            \r\n                    // add students to classroom\r\n                    c.addStudent(ada);\r\n                    c.addStudent(alan);\r\n                    c.printStudents();\r\n                    \r\n                    Student mostImproved = c.getMostImprovedStudent();\r\n                    System.out.println(\"The most improved student is \" + mostImproved.getName());\r\n                }\r\n            }public class Student\r\n{\r\n    private static final int NUM_EXAMS = 4;\r\n    \r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private double gpa;\r\n    \r\n    private int[] exams;\r\n    private int numExamsTaken;\r\n\r\n    /**\r\n     * This is a constructor.  A constructor is a method\r\n     * that creates an object -- it creates an instance\r\n     * of the class. What that means is it takes the input\r\n     * parameters and sets the instance variables (or fields)\r\n     * to the proper values.\r\n     * \r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor. \r\n     */\r\n    public Student(String fName, String lName, int grade)\r\n    {\r\n        firstName = fName;\r\n        lastName = lName;\r\n        gradeLevel = grade;\r\n        exams = new int[NUM_EXAMS];\r\n        numExamsTaken = 0;\r\n    }\r\n    \r\n    public int getExamRange()\r\n    {\r\n        int min = Integer.MAX_VALUE;\r\n        for(int m : exams) min = Math.min(min, m);\r\n        \r\n        int max = Integer.MIN_VALUE;\r\n        for(int m : exams) max = Math.max(max, m);\r\n        \r\n        return max - min;\r\n    }\r\n    \r\n    public String getName()\r\n    {\r\n        return firstName + \" \" + lastName;\r\n    }\r\n    \r\n    public void addExamScore(int score)\r\n    {\r\n        exams[numExamsTaken] = score;\r\n        numExamsTaken++;\r\n    }\r\n    \r\n    // This is a setter method to set the GPA for the Student.\r\n    public void setGPA(double theGPA)\r\n    {\r\n        gpa = theGPA;\r\n    }\r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade: \" + gradeLevel;\r\n    }\r\n}public class Classroom\r\n{\r\n    Student[] students;\r\n    int numStudentsAdded;\r\n    \r\n    public Classroom(int numStudents)\r\n    {\r\n        students = new Student[numStudents];\r\n        numStudentsAdded = 0;\r\n    }\r\n    \r\n    public Student getMostImprovedStudent()\r\n    {\r\n        int mostImprovedRange = Integer.MIN_VALUE;\r\n        Student mostImprovedStudent = students[0];\r\n        \r\n        for(Student s : students) {\r\n            if(s == null) continue;\r\n            \r\n            int range = s.getExamRange();\r\n            if(range > mostImprovedRange) {\r\n                mostImprovedStudent = s;\r\n                mostImprovedRange = range;\r\n            }\r\n        }\r\n        \r\n        return mostImprovedStudent;\r\n    }\r\n    \r\n    public void addStudent(Student s)\r\n    {\r\n        students[numStudentsAdded] = s;\r\n        numStudentsAdded++;\r\n    }\r\n    \r\n    public void printStudents()\r\n    {\r\n        for(int i = 0; i < numStudentsAdded; i++)\r\n        {\r\n            System.out.println(students[i]);\r\n        }\r\n    }\r\n}","n":0.05},"2":{"v":"/codehs/java/6/4/most-improved.html","n":1}}},{"i":173,"$":{"0":{"v":"7.1.8 Car Inventory","n":0.577},"1":{"v":"7.1.8 Car Inventoryimport java.util.ArrayList;\r\n            public class CarTracker\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //Initialize your ArrayList here:\r\n                    ArrayList<Car> inventory = new ArrayList<Car>();\r\n                }\r\n            }","n":0.2},"2":{"v":"/codehs/java/7/1/car-inventory.html","n":1}}},{"i":174,"$":{"0":{"v":"7.1.7 Initializing an ArrayList","n":0.5},"1":{"v":"7.1.7 Initializing an ArrayListimport java.util.ArrayList;\r\n            public class Agency\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<String> companyName = new ArrayList<String>();\r\n                    ArrayList<Integer> contractValue = new ArrayList<Integer>();\r\n                }\r\n            }","n":0.192},"2":{"v":"/codehs/java/7/1/initializing-an-arraylist.html","n":1}}},{"i":175,"$":{"0":{"v":"7.2.7 ArrayList of Even Numbers","n":0.447},"1":{"v":"7.2.7 ArrayList of Even Numbersimport java.util.ArrayList;\r\n\r\n            public class Evens\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<Integer> evens = new ArrayList<Integer>();\r\n                    \r\n                    for(int i = 2; i <= 100; i+=2) evens.add(i);\r\n                    \r\n                    printArray(evens);\r\n                }\r\n                \r\n                \r\n                //Don't alter this method! It will print your array in the console\r\n                public static void printArray(ArrayList<Integer> array)\r\n                {\r\n                    System.out.println(\"Array:\");\r\n                    for(int name: array)\r\n                    {\r\n                        System.out.print(name + \" \");\r\n                    }\r\n                }\r\n            }","n":0.123},"2":{"v":"/codehs/java/7/2/arraylist-of-even-numbers.html","n":1}}},{"i":176,"$":{"0":{"v":"7.2.6 Get First Element","n":0.5},"1":{"v":"7.2.6 Get First Elementimport java.util.ArrayList;\r\n\r\n            public class Numbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<Integer> numbers = new ArrayList<Integer>();\r\n                    // Add 5 numbers to `numbers`\r\n                    numbers.add(1);\r\n                    numbers.add(2);\r\n                    numbers.add(3);\r\n                    numbers.add(4);\r\n                    numbers.add(5);\r\n                    \r\n                    // Print out the first element in `numbers`\r\n                    System.out.println(numbers.get(0));\r\n                }\r\n            }","n":0.152},"2":{"v":"/codehs/java/7/2/get-first-element.html","n":1}}},{"i":177,"$":{"0":{"v":"7.2.9 Teacher Class List Methods","n":0.447},"1":{"v":"7.2.9 Teacher Class List Methodspublic class ClassListTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //You don't need to change anything here, but feel free to add more Students!\r\n                    Student alan = new Student(\"Alan\", 11);\r\n                    Student kevin = new Student(\"Kevin\", 10);\r\n                    Student annie = new Student(\"Annie\", 12);\r\n                    System.out.println(Student.printClassList());\r\n                    \r\n                    System.out.println(Student.getLastStudent());\r\n                    System.out.println(Student.getStudent(1));\r\n                \r\n                    Student.addStudent(2, new Student(\"Trevor\", 12));\r\n                    System.out.println(Student.printClassList());\r\n                    System.out.println(Student.getClassSize());\r\n                }\r\n                \r\n                \r\n                \r\n            }import java.util.ArrayList;\r\n\r\npublic class Student\r\n{\r\n    private String name;\r\n    private int grade;\r\n    //Implement classList here:\r\n    private static ArrayList<Student> classList = new ArrayList<Student>();\r\n    \r\n    public Student(String name, int grade)\r\n    {\r\n        this.name = name;\r\n        this.grade = grade;\r\n        classList.add(this);\r\n    }\r\n    \r\n    public String getName()\r\n    {\r\n        return this.name;\r\n    }\r\n    //Add the static methods here:\r\n    \r\n    public static String getLastStudent() {\r\n        return classList.get(classList.size() - 1).getName();\r\n    }\r\n    \r\n    public static int getClassSize() {\r\n        return classList.size();\r\n    }\r\n    \r\n    public static void addStudent(int index, Student student) {\r\n        classList.remove(classList.size() - 1);\r\n        classList.add(index, student);\r\n    }\r\n    \r\n    public static String getStudent(int index) {\r\n        return classList.get(index).getName();\r\n    }\r\n\r\n\r\n    public static String printClassList()\r\n    {\r\n        String names = \"\";\r\n        for(Student name: classList)\r\n        {\r\n            names+= name.getName() + \"\\n\";\r\n        }\r\n        return \"Student Class List:\\n\" + names;\r\n    }\r\n}","n":0.075},"2":{"v":"/codehs/java/7/2/teacher-class-list-methods.html","n":1}}},{"i":178,"$":{"0":{"v":"7.2.8 Teacher Class List","n":0.5},"1":{"v":"7.2.8 Teacher Class Listpublic class ClassListTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        //You don't need to change anything here, but feel free to add more Students!\r\n        Student alan = new Student(\"Alan\", 11);\r\n        Student kevin = new Student(\"Kevin\", 10);\r\n        Student annie = new Student(\"Annie\", 12);\r\n        System.out.println(Student.printClassList());\r\n    }\r\n    \r\n    \r\n    \r\n}import java.util.ArrayList;\r\n            public class Student\r\n            {\r\n                private String name;\r\n                private int grade;\r\n                \r\n                //Implement classList here:\r\n                private static ArrayList<Student> classList = new ArrayList<Student>();\r\n                \r\n                public Student(String name, int grade)\r\n                {\r\n                    this.name = name;\r\n                    this.grade = grade;\r\n                    \r\n                    classList.add(this);    \r\n                }\r\n                \r\n                public String getName()\r\n                {\r\n                    return this.name;\r\n                }\r\n                \r\n                /*Don't change the code in this method!\r\n                This method will print out all the Student names in the classList Array\r\n                */\r\n                public static String printClassList()\r\n                {\r\n                    String names = \"\";\r\n                    for(Student name : classList)\r\n                    {\r\n                        names += name.getName() + \"\\n\";\r\n                    }\r\n                    return \"Student Class List:\\n\" + names;\r\n                }\r\n            }","n":0.083},"2":{"v":"/codehs/java/7/2/teacher-class-list.html","n":1}}},{"i":179,"$":{"0":{"v":"7.3.8 ArrayList Helper Methods","n":0.5},"1":{"v":"7.3.8 ArrayList Helper Methodsimport java.util.ArrayList;\r\n\r\n            public class ArrayListMethodsTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<String> stringArray = new ArrayList<String>();\r\n                    stringArray.add(\"This\");\r\n                    stringArray.add(\"is\");\r\n                    stringArray.add(\"an\");\r\n                    stringArray.add(\"ArrayList\");\r\n                    stringArray.add(\"of\");\r\n                    stringArray.add(\"Strings\");\r\n                    \r\n                    ArrayListMethods.print(stringArray);\r\n                    System.out.println(\"\\nArrayList is condensing:\");\r\n                    ArrayListMethods.condense(stringArray);\r\n                    ArrayListMethods.print(stringArray);\r\n                    System.out.println(\"\\nArrayList is duplicating:\");\r\n                    ArrayListMethods.duplicate(stringArray);\r\n                    ArrayListMethods.print(stringArray);\r\n                    \r\n                }\r\n            }import java.util.ArrayList;\r\npublic class ArrayListMethods\r\n{\r\n    public static void print(ArrayList<String> array) {\r\n        for(String s : array) System.out.println(s);\r\n    }\r\n    public static void condense(ArrayList<String> array) {\r\n        for(int i = 0; i < array.size() - 1; i++) {\r\n            array.set(i, array.get(i) + array.get(i+1));\r\n            array.remove(i+1);\r\n        }\r\n    }\r\n    public static void duplicate(ArrayList<String> array) {\r\n        for(int i = 0; i < array.size(); i+=2) {\r\n            array.add(i, array.get(i));\r\n        }\r\n    }\r\n}","n":0.101},"2":{"v":"/codehs/java/7/3/arraylist-helper-methods.html","n":1}}},{"i":180,"$":{"0":{"v":"7.3.9 Road Trip!","n":0.577},"1":{"v":"7.3.9 Road Trip!/*\r\n            * This class stores information about a location on Earth.  Locations are\r\n            * specified using latitude and longitude.  The class includes a method for\r\n            * computing the distance between two locations.\r\n            *\r\n            * This implementation is based off of the example from Stuart Reges at \r\n            * the University of Washington.\r\n            */\r\n           \r\n           public class GeoLocation \r\n           {\r\n               // Earth radius in miles\r\n               public static final double RADIUS = 3963.1676;  \r\n           \r\n               private double latitude;\r\n               private double longitude;\r\n               \r\n               private String name;\r\n           \r\n               /**\r\n                * Constructs a geo location object with given latitude and longitude\r\n                */\r\n               public GeoLocation(String name, double theLatitude, double theLongitude) \r\n               {\r\n                   this.name = name;\r\n                   latitude = theLatitude;\r\n                   longitude = theLongitude;\r\n               }\r\n               \r\n               public String getName() {\r\n                   return this.name;\r\n               }\r\n           \r\n               /**\r\n                * Returns the latitude of this geo location\r\n                */\r\n               public double getLatitude() \r\n               {\r\n                   return latitude;\r\n               }\r\n           \r\n               /**\r\n                * returns the longitude of this geo location\r\n                */\r\n               public double getLongitude() \r\n               {\r\n                   return longitude;\r\n               }\r\n           \r\n               // returns a string representation of this geo location\r\n               public String toString() \r\n               {\r\n                   return name + \" (\" + latitude + \", \" + longitude + \")\";\r\n               }\r\n           \r\n               // returns the distance in miles between this geo location and the given\r\n               // other geo location\r\n               public double distanceFrom(GeoLocation other) \r\n               {\r\n                   double lat1 = Math.toRadians(latitude);\r\n                   double long1 = Math.toRadians(longitude);\r\n                   double lat2 = Math.toRadians(other.latitude);\r\n                   double long2 = Math.toRadians(other.longitude);\r\n                   // apply the spherical law of cosines with a triangle composed of the\r\n                   // two locations and the north pole\r\n                   double theCos = Math.sin(lat1) * Math.sin(lat2) +\r\n                       Math.cos(lat1) * Math.cos(lat2) * Math.cos(long1 - long2);\r\n                   double arcLength = Math.acos(theCos);\r\n                   return arcLength * RADIUS;\r\n               }\r\n           }public class RoadTripTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        RoadTrip rt = new RoadTrip();\r\n        rt.addStop(\"San Francisco\", 37.7833, -122.4167);\r\n        rt.addStop(\"Los Angeles\", 34.052235, -118.243683);\r\n        rt.addStop(\"Las Vegas\", 36.114647, -115.172813);\r\n\r\n        \r\n        System.out.println(rt);\r\n        \r\n        System.out.println(\"Stops: \" + rt.getNumberOfStops());\r\n        System.out.println(\"Total Miles: \" + rt.getTripLength());\r\n    }\r\n}import java.util.ArrayList;\r\n\r\n            public class RoadTrip\r\n            {\r\n                private ArrayList<GeoLocation> places;\r\n                \r\n                public RoadTrip() {\r\n                    this.places = new ArrayList<GeoLocation>();\r\n                }\r\n                \r\n                // Create a GeoLocation and add it to the road trip\r\n                public void addStop(String name, double latitude, double longitude) {\r\n                    places.add(new GeoLocation(name, latitude, longitude));\r\n                }\r\n                \r\n                // Get the total number of stops in the trip\r\n                public int getNumberOfStops() {\r\n                    return places.size();\r\n                }\r\n                \r\n                // Get the total miles of the trip\r\n                public double getTripLength() {\r\n                    double total = 0;\r\n                    for(int i = 1; i < places.size(); i++) {\r\n                        total += places.get(i).distanceFrom(places.get(i - 1));\r\n                    }\r\n                    return total;\r\n                }\r\n                \r\n                // Return a formatted toString of the trip\r\n                public String toString() {\r\n                    String list = \"\";\r\n                    \r\n                    for(int i = 0; i < places.size(); i++) list += (i + 1) + \". \" + places.get(i).toString() + \"\\n\";\r\n                    \r\n                    return list;\r\n                }\r\n            }","n":0.047},"2":{"v":"/codehs/java/7/3/road-trip.html","n":1}}},{"i":181,"$":{"0":{"v":"7.3.6 Traversing Odds","n":0.577},"1":{"v":"7.3.6 Traversing Oddsimport java.util.ArrayList;\r\n\r\n            public class Odds\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<Integer> odds = new ArrayList<Integer>();\r\n                    // Pre-load the array list with values.\r\n                    for(int index = 1; index < 101; index++)\r\n                    {\r\n                        odds.add(index);\r\n                        odds.add(index);\r\n                    }\r\n                    //call removeEvens on the array above!\r\n                    removeEvens(odds);\r\n                }\r\n                \r\n                public static void removeEvens(ArrayList<Integer> array)\r\n                {\r\n                    for(int i = 0; i < array.size(); i++) {\r\n                        if(array.get(i) % 2 == 0) {\r\n                            array.remove(i);\r\n                            i--;\r\n                        }\r\n                    }\r\n                    \r\n                    for(int i = 0; i < array.size(); i++) System.out.println(array.get(i));\r\n                }\r\n            }","n":0.109},"2":{"v":"/codehs/java/7/3/traversing-odds.html","n":1}}},{"i":182,"$":{"0":{"v":"7.4.7 Airline Tickets","n":0.577},"1":{"v":"7.4.7 Airline Ticketspublic class AirlineTicket\r\n            {\r\n                private String[] seats = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"};\r\n                private String name;\r\n                private String seat;\r\n                private int boardingGroup;\r\n                private int row;\r\n                \r\n                public AirlineTicket(String name, String seat, int boardingGroup, int row)\r\n                {\r\n                    this.name = name;\r\n                    if(isValidSeat(seat))\r\n                    {\r\n                        this.seat = seat;\r\n                    }\r\n                    this.boardingGroup = boardingGroup;\r\n                    this.row = row;\r\n                    \r\n                }\r\n                \r\n                private boolean isValidSeat(String seat)\r\n                {\r\n                    boolean isValidSeat = false;\r\n                    for(String elem: seats)\r\n                    {\r\n                        if(seat.equals(elem))\r\n                        {\r\n                            isValidSeat = true;\r\n                        }\r\n                    }\r\n                    return isValidSeat;\r\n                }\r\n                \r\n                public String getSeat()\r\n                {\r\n                    return this.seat;\r\n                }\r\n                \r\n                public String getName()\r\n                {\r\n                    return this.name;\r\n                }\r\n                \r\n                public int getBoardingGroup()\r\n                {\r\n                    return this.boardingGroup;\r\n                }\r\n                \r\n                public int getRow()\r\n                {\r\n                    return this.row;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return name + \" Seat: \" +seat + \" Row: \" + row + \" Boarding Group: \" + boardingGroup;\r\n                }\r\n            }import java.util.ArrayList;\r\n\r\n            public class AirlineTicketTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<AirlineTicket> tickets = new ArrayList<AirlineTicket>();\r\n                    //This creates a randomized list of passengers\r\n                    addPassengers(tickets);\r\n                    for(AirlineTicket elem: tickets)\r\n                    {\r\n                        System.out.println(elem);\r\n                    }\r\n                   //This creates a TicketOrganizer object\r\n                    TicketOrganizer ticketOrganizer = new TicketOrganizer(tickets);\r\n                    \r\n                    //These are the methods of the ticketOrganizer in action\r\n                    System.out.println(\"\\nPassengers Ordered by Boarding Group:\");\r\n                    ticketOrganizer.printPassengersByBoardingGroup();\r\n                    System.out.println(\"\\nPassengers in line who can board together:\");\r\n                    ticketOrganizer.canBoardTogether();\r\n                }\r\n                \r\n                //Do not touch this method! It is adding random passengers to the AirlineTicket array\r\n                public static void addPassengers(ArrayList<AirlineTicket> tickets)\r\n                {\r\n                    String[] seats = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"};\r\n                    for(int index = 0; index < 15; index++)\r\n                    {\r\n                        int random = (int)(Math.random() * 5);\r\n                        AirlineTicket ticket = new AirlineTicket(\"Passenger \" + (index+1), seats[random], ((int)(Math.random()*5)+1), ((int)(Math.random()*8)+1));\r\n                        tickets.add(ticket);\r\n                    }\r\n                }\r\n                \r\n            }import java.util.ArrayList;\r\n\r\n            public class TicketOrganizer\r\n            {\r\n                private ArrayList<AirlineTicket> tickets;\r\n                \r\n                public TicketOrganizer(ArrayList<AirlineTicket> theTickets) {\r\n                    this.tickets = theTickets;\r\n                }\r\n                \r\n                public ArrayList<AirlineTicket> getTickets() {\r\n                    return this.tickets;\r\n                }\r\n            \r\n                public void printPassengersByBoardingGroup() {\r\n                    for(int i = 1; i <= 5; i++) {\r\n                        System.out.println(\"Boarding Group \" + i + \":\");\r\n                        for(int j = 0; j < tickets.size(); j++) {\r\n                            if(tickets.get(j).getBoardingGroup() == i) System.out.println(\"Passenger \" + (j + 1));\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                public void canBoardTogether() {\r\n                    boolean somePassengersCanBoard = false;\r\n                    for(int i = 0; i < tickets.size() - 1; i++) {\r\n                        if(tickets.get(i).getBoardingGroup() == tickets.get(i + 1).getBoardingGroup() &&\r\n                            tickets.get(i).getRow() == tickets.get(i + 1).getRow()) {\r\n                                System.out.println(\"Passenger \" + (i+1) +\" can board with Passenger \" + (i+2) +\".\");\r\n                                somePassengersCanBoard = true;\r\n                            }\r\n                    }\r\n                    if(!somePassengersCanBoard) System.out.println(\"There are no passengers with the same row and boarding group.\");\r\n                }\r\n            }","n":0.051},"2":{"v":"/codehs/java/7/4/airline-tickets.html","n":1}}},{"i":183,"$":{"0":{"v":"7.4.6 ArrayList equals","n":0.577},"1":{"v":"7.4.6 ArrayList equalsimport java.util.ArrayList;\r\n            public class isEqual\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //This code is just to test your equals method\r\n                    ArrayList<Integer> list1 = new ArrayList<Integer>();\r\n                    list1.add(10);\r\n                    list1.add(9);\r\n                    list1.add(5);\r\n                    list1.add(2);\r\n                    list1.add(9);\r\n                    ArrayList<Integer> list2 = new ArrayList<Integer>();\r\n                    list2.add(10);\r\n                    list2.add(9);\r\n                    list2.add(5);\r\n                    list2.add(2);\r\n                    list2.add(9);\r\n                    boolean isEqual = equals(list1, list2);\r\n                    System.out.println(\"List 1 is equal to List 2: \"+isEqual);\r\n                    ArrayList<Integer> list3 = new ArrayList<Integer>();\r\n                    list3.add(1);\r\n                    list3.add(9);\r\n                    list3.add(5);\r\n                    list3.add(2);\r\n                    list3.add(9);\r\n                    boolean isEqual2 = equals(list2, list3);\r\n                    System.out.println(\"List 2 is equal to List 3: \"+isEqual2);\r\n                    \r\n                }\r\n                \r\n                //Write your method here!\r\n                public static boolean equals(ArrayList<Integer> array1, ArrayList<Integer> array2)\r\n                {\r\n                    if(array1.size() != array2.size()) return false;\r\n                    int size = array1.size();\r\n                    for(int i = 0; i < size; i++) {\r\n                        if(array1.get(i) != array2.get(i)) return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }","n":0.091},"2":{"v":"/codehs/java/7/4/arraylist-equals.html","n":1}}},{"i":184,"$":{"0":{"v":"7.4.8 Billboard Top 10","n":0.5},"1":{"v":"7.4.8 Billboard Top 10public class Musician\r\n{\r\n    private String name;\r\n    private int weeksInTop40;\r\n    private int albumsSold;\r\n    private boolean isPlatinum;;\r\n    \r\n    public Musician(String name, int weeksInTop40, int albumsSold)\r\n    {\r\n        this.name = name;\r\n        this.weeksInTop40 = weeksInTop40;\r\n        this.albumsSold = albumsSold;\r\n        setPlatinum(albumsSold);\r\n    }\r\n    \r\n    public void setPlatinum(int albumsSold)\r\n    {\r\n        if(albumsSold >= 1000000)\r\n        {\r\n            isPlatinum = true;\r\n        }\r\n        else\r\n        {\r\n            isPlatinum = false;\r\n        }\r\n    }\r\n    \r\n    public int getWeeksInTop40()\r\n    {\r\n        return this.weeksInTop40;\r\n    }\r\n    \r\n    public String getName()\r\n    {\r\n        return this.name;\r\n    }\r\n    \r\n    public boolean getIsPlatinum()\r\n    {\r\n        return isPlatinum;\r\n    }\r\n    \r\n    public String toString()\r\n    {\r\n        return this.name;\r\n    }\r\n}public class BillboardTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Billboard top10 = new Billboard();\r\n        top10.add(new Musician(\"Beyonce\", 316, 100000000));\r\n        top10.add(new Musician(\"The Beatles\", 365, 600000000));\r\n        top10.add(new Musician(\"Drake\", 425, 150000000));\r\n        top10.add(new Musician(\"Pink Floyd\", 34, 250000000));\r\n        top10.add(new Musician(\"Mariah Carey\", 287, 200000000));\r\n        top10.add(new Musician(\"Rihanna\", 688, 250000000));\r\n        top10.add(new Musician(\"Queen\", 327, 170000000));\r\n        top10.add(new Musician(\"Ed Sheeran\", 536, 150000000));\r\n        top10.add(new Musician(\"Katy Perry\", 317, 143000000));\r\n        top10.add(new Musician(\"Justin Bieber\", 398, 140000000));\r\n\r\n        //This musician should not be added to the top10 because they don't have enough records sold        \r\n        top10.add(new Musician(\"Karel the Dog\", 332, 60));\r\n        \r\n        //This musician should replace the artist with the least Weeks on the top 40 charts.\r\n        top10.add(new Musician(\"Tracy the Turtle\", 332, 150000000));\r\n        \r\n        //This musician should not replace an artist, but is a Platinum artist\r\n        top10.add(new Musician(\"Alex Eacker\", 100, 23400000));\r\n        \r\n        top10.printTop10();\r\n\r\n\r\n    } \r\n}import java.util.ArrayList;\r\n            public class Billboard\r\n            {\r\n                private ArrayList<Musician> top10 = new ArrayList<Musician>();\r\n             \r\n             \r\n             \r\n                public void add(Musician m) {\r\n                    if(!m.getIsPlatinum()) {\r\n                        System.out.println(\"Sorry, \" + m.getName() + \" does not qualify for Top 10\");\r\n                        return;\r\n                    }\r\n                    if(top10.size() < 10) top10.add(m);\r\n                    else replace(m);\r\n                }\r\n                \r\n                public void replace(Musician toAdd) {\r\n                    int minWeeksTop40 = 1000;\r\n                    int minWeeksTop40Index = 0;\r\n                    for(int i = 0; i < top10.size(); i++) {\r\n                        Musician m = top10.get(i);\r\n                        if(m.getWeeksInTop40() < minWeeksTop40) {\r\n                            minWeeksTop40 = m.getWeeksInTop40();\r\n                            minWeeksTop40Index = i;\r\n                        }\r\n                    }\r\n                    \r\n                    if(toAdd.getWeeksInTop40() <= minWeeksTop40) {\r\n                        System.out.println(\"Sorry, \" + toAdd.getName() + \" has less weeks in the Top 40 than the other musicians.\");\r\n                    } else {\r\n                        System.out.println(\"The musician \" + top10.get(minWeeksTop40Index).getName() + \" has been replaced by \" + toAdd.getName() + \".\");\r\n                        top10.set(minWeeksTop40Index, toAdd);\r\n                    }\r\n                }\r\n             \r\n             \r\n                //Don't make alterations to this method!\r\n                public void printTop10()\r\n                {\r\n                    System.out.println(top10);\r\n                }\r\n            }","n":0.053},"2":{"v":"/codehs/java/7/4/billboard-top-10.html","n":1}}},{"i":185,"$":{"0":{"v":"7.4.9 User Data Cleanup","n":0.5},"1":{"v":"7.4.9 User Data Cleanupimport java.util.ArrayList;\r\n\r\npublic class DataPurgeTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<String> emails = new ArrayList<String>();\r\n        addEmails(emails);\r\n        System.out.println(\"List is all emails: \" +DataPurge.containsOnlyEmails(emails));\r\n        DataPurge.removeDuplicates(emails);\r\n        DataPurge.removeAOL(emails);\r\n        System.out.println(emails);\r\n    }\r\n    \r\n    \r\n    \r\n    public static void addEmails(ArrayList<String> emails)\r\n    {\r\n        emails.add(\"tbmaddux@icloud.com\");\r\n        emails.add(\"rfisher@outlook.com\");\r\n        emails.add(\"anicolao@verizon.net\");\r\n        emails.add(\"openldap@me.com\");\r\n        emails.add(\"improv@gmail.com\");\r\n        emails.add(\"alias@sbcglobal.net\");\r\n        emails.add(\"portele@me.com\");\r\n        emails.add(\"doormat@icloud.com\");\r\n        emails.add(\"mailarc@aol.com\");\r\n        emails.add(\"portele@me.com\");\r\n        emails.add(\"rmcfarla@optonline.net\");\r\n        emails.add(\"chrisk@verizon.net\");\r\n        emails.add(\"gordonjcp@aol.com\");\r\n        emails.add(\"improv@gmail.com\");\r\n    }\r\n}import java.util.ArrayList;\r\n\r\n            public class DataPurge\r\n            {\r\n                public static void removeDuplicates(ArrayList<String> list) {\r\n                    ArrayList<String> existing = new ArrayList<String>();\r\n                    \r\n                    for(int i = 0; i < list.size(); i++) {\r\n                        String email = list.get(i);\r\n                        if(existing.indexOf(email) != -1) {\r\n                            list.remove(i);\r\n                            i--;\r\n                        }\r\n                        existing.add(email);\r\n                    }\r\n                }\r\n                public static void removeAOL(ArrayList<String> list) {\r\n                    for(int i = 0; i < list.size(); i++) {\r\n                        if(list.get(i).indexOf(\"@aol.com\") > -1) {\r\n                            System.out.println(\"removing \" + list.get(i));\r\n                            list.remove(i);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n                public static boolean containsOnlyEmails(ArrayList<String> list) {\r\n                    for(int i = 0; i < list.size(); i++) {\r\n                        if(list.get(i).indexOf(\"@\") == -1 || list.get(i).indexOf(\".\") == -1) return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }","n":0.082},"2":{"v":"/codehs/java/7/4/user-data-cleanup.html","n":1}}},{"i":186,"$":{"0":{"v":"7.5.8 Card Collector FRQ","n":0.5},"1":{"v":"7.5.8 Card Collector FRQimport java.util.ArrayList;\r\n            public class CardCollection {\r\n                private ArrayList<Card> collection;\r\n                \r\n                public CardCollection(ArrayList<Card> theCollection) {\r\n                    this.collection = theCollection;\r\n                }\r\n                \r\n                public double totalValue() {\r\n                    double total = 0.0;\r\n                    for(int i = 0; i < collection.size(); i++) {\r\n                        total += collection.get(i).getValue();\r\n                    }\r\n                    return total;\r\n                }\r\n                \r\n                public void checkPerfect() {\r\n                    for(int i = 0; i < collection.size(); i++) {\r\n                        if(collection.get(i).getCondition().equals(\"perfect\")) System.out.println(collection.get(i).getName());\r\n                    }\r\n                }\r\n                \r\n                public void orderNumerically() {\r\n                    //horribly inoptimal sort algo, but we haven't learned anything better\r\n                    for(int i = 0; i < collection.size(); i++) {\r\n                        int setNumBase = collection.get(i).getSetNum();\r\n                        for(int j = i + 1; j < collection.size(); j++) {\r\n                            Card toMove = collection.get(j);\r\n                            if(toMove.getSetNum() < setNumBase) {\r\n                                collection.remove(j);\r\n                                collection.add(i, toMove);\r\n                                j--;\r\n                            }\r\n                        }\r\n                    }    \r\n                }\r\n            }","n":0.091},"2":{"v":"/codehs/java/7/5/card-collector.html","n":1}}},{"i":187,"$":{"0":{"v":"7.5.7 Fantasy Football Roster","n":0.5},"1":{"v":"7.5.7 Fantasy Football Rosterimport java.util.ArrayList;\r\n            import java.util.Scanner;\r\n            \r\n            public class FantasyFootball\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<String> availablePlayers = new ArrayList<String>();\r\n                    addPlayers(availablePlayers);\r\n                    \r\n                    String[] team = new String[5];\r\n                    \r\n                    Scanner sc = new Scanner(System.in);\r\n                    \r\n                    for(int i = 0; i < 5; i++) {\r\n                        System.out.println(\"Enter Player you would like on your team: \");\r\n                        String player = sc.nextLine();\r\n                        int playerIndex = search(availablePlayers, player);\r\n                        if(playerIndex > -1) {\r\n                            System.out.println(\"Great! That player is added to your team!\");   \r\n                            team[i] = player;\r\n                            availablePlayers.remove(playerIndex);\r\n                        } else {\r\n                            System.out.println(\"That player is not available, please pick another player.\");\r\n                            i--;\r\n                        }\r\n                        System.out.println(\"\");\r\n                    }\r\n                    \r\n                    System.out.println(\"Your team is:\");\r\n                    for(int i = 0; i < 5; i++) {\r\n                        System.out.println(team[i]);\r\n                    }\r\n                }\r\n                \r\n                public static int search(ArrayList<String> array, String player)\r\n                {\r\n                    for(int i = 0; i < array.size(); i++) {\r\n                        if(array.get(i).equals(player)) return i;\r\n                    }\r\n                    return -1;\r\n                }\r\n                \r\n                public static void addPlayers(ArrayList<String> array)\r\n                {\r\n                    array.add(\"Cam Newton\");\r\n                    array.add(\"Antonio Brown\");\r\n                    array.add(\"Leveon Bell\");\r\n                    array.add(\"Patrick Mahomes\");\r\n                    array.add(\"Saquon Barkley\");\r\n                    array.add(\"Mike Evans\");\r\n                    array.add(\"Odell Beckham Jr.\");\r\n                    array.add(\"Travis Kelce\");\r\n                    array.add(\"Baker Mayfield\");\r\n                    array.add(\"Michael Thomas\");\r\n                    array.add(\"Julio Jones\");\r\n                    array.add(\"Ezekial Elliott\");\r\n                    array.add(\"Alvin Kamara\");\r\n                    array.add(\"Davante Adams\");\r\n                    array.add(\"Aaron Rogers\");\r\n                }\r\n            }","n":0.075},"2":{"v":"/codehs/java/7/5/fantasy-football-roster.html","n":1}}},{"i":188,"$":{"0":{"v":"7.5.6 Linear Search on ArrayList with While Loop","n":0.354},"1":{"v":"7.5.6 Linear Search on ArrayList with While Loopimport java.util.ArrayList;\r\n\r\npublic class ArrayListSearch\r\n{\r\n    public static void main(String[] args) {\r\n        ArrayList<Double> array = new ArrayList<Double>();\r\n        array.add(4.5);\r\n        array.add(6.7);\r\n        array.add(5.0);\r\n        array.add(2.9);\r\n        array.add(7.0);\r\n        System.out.println(search(array, 5.0));\r\n    }\r\n\r\n    public static int search(ArrayList<Double> array, double key)\r\n    {\r\n        int i = 0;\r\n        while(i < array.size()) {\r\n            if(array.get(i) == key) return i;\r\n            i++;\r\n        }\r\n        return -1;\r\n    }\r\n}","n":0.134},"2":{"v":"/codehs/java/7/5/linear-search-on-arraylist-with-while-loop.html","n":1}}},{"i":189,"$":{"0":{"v":"7.6.9 Explore Insertion Sort","n":0.5},"1":{"v":"7.6.9 Explore Insertion Sortimport java.util.Arrays;\r\n\r\n            public class InsertionSort\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] array1 = {9, 8, 7, 6, 5, 4, 3, 2, 1};\r\n                    int[] array2 = {5, 6, 4, 8, 9, 7, 3, 1, 2};\r\n                    \r\n                    System.out.print(\"First array: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                    System.out.println();\r\n            \r\n                    // sort first array\r\n                    insertionSort(array1);\r\n                    // sort second array\r\n                    insertionSort(array2);\r\n            \r\n                    System.out.print(\"First array sorted: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array sorted: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                }\r\n                \r\n                /*\r\n                 * Insertion sort takes in an array of integers and\r\n                 * returns a sorted array of the same integers.\r\n                 */\r\n                public static void insertionSort(int[] arr)\r\n                {\r\n                \r\n                for (int i = 0; i < arr.length; i++) {\r\n                    int value = arr[i];\r\n                    \r\n                    int j;\r\n                    \r\n                    for (j = i - 1; j >= 0 && arr[j] < value; j--) {\r\n                        arr[j + 1] = arr[j];\r\n                    }\r\n            \r\n                    arr[j + 1] = value;\r\n                }\r\n                    \r\n                }\r\n            }","n":0.082},"2":{"v":"/codehs/java/7/6/explore-insertion-sort.html","n":1}}},{"i":190,"$":{"0":{"v":"7.6.4 Explore Selection Sort","n":0.5},"1":{"v":"7.6.4 Explore Selection Sortimport java.util.Arrays;\r\n\r\n            public class SelectionSort\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] array1 = {9, 8, 7, 6, 5, 4, 3, 2, 1};\r\n                    int[] array2 = {5, 6, 4, 8, 9, 7, 3, 1, 2};\r\n                    \r\n                    System.out.print(\"First array: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                    System.out.println();\r\n            \r\n                    // sort first array\r\n                    selectionSort(array1);\r\n                    // sort second array\r\n                    selectionSort(array2);\r\n            \r\n                    System.out.print(\"First array sorted: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array sorted: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                }\r\n                \r\n                /*\r\n                 * Selection sort takes in an array of integers and\r\n                 * returns a sorted array of the same integers.\r\n                 */\r\n                public static int[] selectionSort(int[] arr)\r\n                {\r\n                    int swaps = 0;\r\n                    int currentMinIndex;\r\n                    for (int i = 0; i < arr.length - 1; i++)\r\n                    {\r\n                        currentMinIndex = i;\r\n                        for (int j = i + 1; j < arr.length; j++)\r\n                        {\r\n                            if(arr[j] < arr[currentMinIndex])\r\n                            {\r\n                                currentMinIndex = j;\r\n                            }\r\n                        }\r\n                        \r\n                        // swap numbers if needed\r\n                        if (i != currentMinIndex)\r\n                        {\r\n                            int temp = arr[currentMinIndex];\r\n                            arr[currentMinIndex] = arr[i];\r\n                            arr[i] = temp;\r\n                            swaps++;\r\n                        }\r\n                    }\r\n                    \r\n                    // Print out the number of swaps that took place here\r\n                    // before returning arr\r\n                    System.out.println(swaps);\r\n                    return arr;\r\n                }\r\n            }","n":0.073},"2":{"v":"/codehs/java/7/6/explore-selection-sort.html","n":1}}},{"i":191,"$":{"0":{"v":"7.6.10 Selection Sort vs. Insertion Sort Run Time","n":0.354},"1":{"v":"7.6.10 Selection Sort vs. Insertion Sort Run TimeJSYK\r\n            This assignment seems to have the wrong type, because you don't have to do anything at first. However,\r\n                it's used by the next task, which is an open-response (and, as such, not on Dinner Coding Time).public class InsertionvSelection\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    /*\r\n                    This program evaluates the speed that Selection and Insertion sort are able to \r\n                    sort different arrays. What do you notice about the difference in speed?\r\n                    Why do you think that's the case?\r\n                    */\r\n                    \r\n                    //Try changing the size of the array by changing the value of makeReverseArray()\r\n                    //Does that change the results?\r\n                    int[] reverse = makeReverseArray(100);\r\n                    System.out.println(\"Reversed Array:\");\r\n                    printArray(reverse);\r\n                    long startTime = System.nanoTime();\r\n                    selectionSort(reverse);\r\n                    long endTime = System.nanoTime();\r\n                    long timeElapsed = endTime - startTime;\r\n                    System.out.println(\"\\nSelection Sort on Reversed Array:\");\r\n                    printArray(reverse);\r\n                    System.out.println(\"Time elapsed: \"+ timeElapsed + \" nanoseconds.\");\r\n                    \r\n                    //Try changing the size of the array by changing the value of makeReverseArray()\r\n                    //Does that change the results?\r\n                    int[] reverse2 = makeReverseArray(100);\r\n                    System.out.println(\"\\nReversed Array:\");\r\n                    printArray(reverse2);\r\n                    long newstartTime = System.nanoTime();\r\n                    insertionSort(reverse2);\r\n                    long newendTime = System.nanoTime();\r\n                    long newtimeElapsed = newendTime - newstartTime;\r\n                    System.out.println(\"\\nInsertion Sort on Reversed Array:\");\r\n                    printArray(reverse2);\r\n                    System.out.println(\"Time elapsed: \"+ newtimeElapsed + \" nanoseconds.\\n\");\r\n                    \r\n                    checkSpeed(timeElapsed, newtimeElapsed);\r\n                    \r\n                    System.out.println(\"\\n==================================================\");\r\n                    //Try changing the size of the array by changing the value of makeAlmostSortedArray()\r\n                    //Does that change the results?\r\n                    int[] almostSorted = makeAlmostSortedArray(100);\r\n                    System.out.println(\"Almost Sorted Array:\");\r\n                    printArray(almostSorted);\r\n                    startTime = System.nanoTime();\r\n                    selectionSort(almostSorted);\r\n                    endTime = System.nanoTime();\r\n                    timeElapsed = endTime - startTime;\r\n                    System.out.println(\"\\nSelection Sort on Almost Sorted Array:\");\r\n                    printArray(almostSorted);\r\n                    System.out.println(\"Time elapsed: \"+ timeElapsed + \" nanoseconds.\");\r\n                    \r\n                    //Try changing the size of the array by changing the value of makeAlmostSortedArray()\r\n                    //Does that change the results?\r\n                    int[] almostSorted2 = makeAlmostSortedArray(100);\r\n                    System.out.println(\"\\nAlmost Sorted Array:\");\r\n                    printArray(almostSorted2);\r\n                    newstartTime = System.nanoTime();\r\n                    insertionSort(almostSorted2);\r\n                    newendTime = System.nanoTime();\r\n                    newtimeElapsed = newendTime - newstartTime;\r\n                    System.out.println(\"\\nInsertion Sort on Almost Sorted Array:\");\r\n                    printArray(almostSorted2);\r\n                    System.out.println(\"Time elapsed: \"+ newtimeElapsed + \" nanoseconds.\\n\");\r\n                    \r\n                    checkSpeed(timeElapsed, newtimeElapsed);\r\n                }\r\n                \r\n                public static void insertionSort(int[] array)\r\n                {\r\n                    for(int index = 1; index < array.length; index++)\r\n                    {\r\n                        int currentIndexValue = array[index];\r\n                        \r\n                        int sortedIndex = index - 1;\r\n                        \r\n                        while( sortedIndex > -1 && array[sortedIndex] > currentIndexValue)\r\n                        {\r\n                            array[sortedIndex + 1] = array[sortedIndex];\r\n                            \r\n                            sortedIndex--;\r\n                        }\r\n                        \r\n                        array[sortedIndex + 1] = currentIndexValue;\r\n                    }\r\n                }\r\n                \r\n                public static void selectionSort(int[] array)\r\n                {\r\n                    for(int index = 0; index < array.length - 1; index++)\r\n                    {\r\n                        int minIndex = index;\r\n                        for(int i = index; i < array.length; i ++)\r\n                        {\r\n                            if(array[i] < array[minIndex])\r\n                            {\r\n                                minIndex = i;\r\n                            }\r\n                        }\r\n                        int tempValue = array[index];\r\n                        array[index] = array[minIndex];\r\n                        array[minIndex] = tempValue;\r\n                    }\r\n                }\r\n                \r\n                 public static void printArray(int[] array)\r\n                {\r\n                    for(int elem: array)\r\n                    {\r\n                        System.out.print(elem+ \" \");\r\n                    }\r\n                    System.out.println();\r\n                }\r\n                \r\n                 /**\r\n                 * This method returns an array in reverse order starting from the parameter number\r\n                 * and going to the value 0.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number. Index 0 is the value number, and \r\n                 * index array.length-1 is 0\r\n                 */\r\n                public static int[] makeReverseArray(int number)\r\n                {\r\n                    int[] array = new int[number];\r\n                    int counter = number;\r\n                    for(int i = 0; i < number; i++)\r\n                    {\r\n                        array[i] = counter;\r\n                        counter--;\r\n                    }\r\n                    return array;\r\n                }\r\n                \r\n                /**\r\n                 * This method returns an array that is almost sorted, but the last index\r\n                 * and last index-1 are switched.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number with index array.length - 1 \r\n                 * and array.length- 2 swapped.\r\n                 */\r\n                public static int[] makeAlmostSortedArray(int number)\r\n                {\r\n                    int[] array = new int[number];\r\n                    for(int i= 0; i < number; i++)\r\n                    {\r\n                        array[i] = i+1;\r\n                    }\r\n                    int temp = array[array.length - 1];\r\n                    array[array.length - 1] = array[array.length - 2];\r\n                    array[array.length - 2] = temp;\r\n                    return array;\r\n                    \r\n                }\r\n                \r\n                /**\r\n                 * This method compares the speed of Selection Sort and Insertion Sort and prints\r\n                 * the results depending on which Sort method is faster.\r\n                 * @param selectionTime- the time elapsed during the selection sort\r\n                 * @param insertionTime- the time elapsed during insertion sort\r\n                 */\r\n                public static void checkSpeed(long selectionTime, long insertionTime)\r\n                {\r\n                    if(selectionTime > insertionTime)\r\n                    {\r\n                        System.out.println(\"Insertion time is faster than Selection time by \" + (selectionTime- insertionTime) + \" nanoseconds.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"Selection time is faster than Insertion time by \"+ (insertionTime- selectionTime) + \" nanoseconds.\");\r\n            \r\n                    }\r\n                }\r\n                \r\n            }","n":0.037},"2":{"v":"/codehs/java/7/6/selection-sort-vs-insertion-sort-run-time.html","n":1}}},{"i":192,"$":{"0":{"v":"8.1.6 Complete Chessboard","n":0.577},"1":{"v":"8.1.6 Complete Chessboardpublic class ChessBoard\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //Create an 8x8 2D String array called chess.\r\n                    String[][] chess = {\r\n                        {\"Rook\", \"Knight\", \"Bishop\", \"Queen\", \"King\", \"Bishop\", \"Knight\", \"Rook\"},\r\n                        {\"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\",  \"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\"},\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\",  \"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\"},\r\n                        {\"Rook\", \"Knight\", \"Bishop\", \"Queen\", \"King\", \"Bishop\", \"Knight\", \"Rook\"}\r\n                    };\r\n                    \r\n                    //Use this method to print the chess board onto the console\r\n                    print(chess);\r\n                    \r\n            \r\n                }\r\n                \r\n                //Do not make alterations to this method!\r\n                public static void print(String[][] array)\r\n                {\r\n                    for(String[] row: array)\r\n                    {\r\n                        for(String thing: row)\r\n                        {\r\n                            System.out.print(thing + \"\\t\");\r\n                        }\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","n":0.085},"2":{"v":"/codehs/java/8/1/complete-chessboard.html","n":1}}},{"i":193,"$":{"0":{"v":"8.1.5 Manipulating 2D Arrays","n":0.5},"1":{"v":"8.1.5 Manipulating 2D Arrayspublic class ArrayPractice\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[][] array = {{5, 4, 2, 1, 0}, {523, 63, 2342, 586, 1, 6534, 0}, {10, 9, 2, 0}};\r\n                    //Call the fixArray method three times on this array:\r\n                    fixArray(array, 0, 4, array[0].length);\r\n                    fixArray(array, 1, 6, array[1][0] + array[1][5]);\r\n                    fixArray(array, 2, 3, array.length);\r\n                    \r\n                    \r\n                    print(array);\r\n                }\r\n                \r\n                //Create a method to add the correct value to the array at the correct col, row\r\n                public static void fixArray(int[][] arr, int row, int col, int value)\r\n                {\r\n                    arr[row][col] = value;\r\n                }\r\n                \r\n                \r\n                \r\n                //Do not make alterations to this method!\r\n                public static void print(int[][] array)\r\n                {\r\n                    for(int[] row: array)\r\n                    {\r\n                        for(int num: row)\r\n                        {\r\n                            System.out.print(num + \" \");\r\n                        }\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","n":0.089},"2":{"v":"/codehs/java/8/1/manipulating-2d-arrays.html","n":1}}},{"i":194,"$":{"0":{"v":"8.1.7 Tic Tac Toe Board","n":0.447},"1":{"v":"8.1.7 Tic Tac Toe Boardpublic class TicTacToeTester\r\n{\r\n    //You don't need to alter any of the code in this class!\r\n    //This is just to test that your TicTacToe class is working correctly\r\n    public static void main(String[] args)\r\n    {\r\n        TicTacToe board = new TicTacToe();\r\n        printBoard(board.getBoard());\r\n    }\r\n    \r\n    public static void printBoard(String[][] array)\r\n    {\r\n        for(String[] row: array)\r\n        {\r\n            for(String play: row)\r\n            {\r\n                System.out.print(play+ \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}public class TicTacToe\r\n            {\r\n                private String[][] board;\r\n                \r\n                public TicTacToe() {\r\n                    this.board = new String[][] {\r\n                        {\"-\", \"-\", \"-\"},\r\n                        {\"-\", \"-\", \"-\"},\r\n                        {\"-\", \"-\", \"-\"}\r\n                    };\r\n                }\r\n                \r\n                public String[][] getBoard() {\r\n                    return this.board;\r\n                }\r\n                \r\n            }","n":0.099},"2":{"v":"/codehs/java/8/1/tic-tac-toe-board.html","n":1}}},{"i":195,"$":{"0":{"v":"8.2.7 Sum Rows in a 2D Array","n":0.378},"1":{"v":"8.2.7 Sum Rows in a 2D Arraypublic class Sum\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[][] array = {{32, 4, 14, 65, 23, 6},\r\n                                    {4, 2, 53, 31, 765, 34},\r\n                                    {64235, 23, 522, 124, 42, 64}};\r\n                                    \r\n                    for(int i = 0; i < array.length; i++) System.out.println(sumRow(array, i));\r\n                }\r\n                \r\n                public static int sumRow(int[][] array, int row)\r\n                {\r\n                    int total = 0;\r\n                    for(int n : array[row]) total += n;\r\n                    return total;\r\n                }\r\n            }","n":0.117},"2":{"v":"/codehs/java/8/2/sum-rows-in-a-2d-array.html","n":1}}},{"i":196,"$":{"0":{"v":"8.2.8 Tic Tac Toe Methods","n":0.447},"1":{"v":"8.2.8 Tic Tac Toe Methodspublic class TicTacToeTester\r\n            {\r\n            public static void main(String[] args)\r\n            {\r\n            //This is to help you test your methods. Feel free to add code at the end to check\r\n            //to see if your checkWin method works!\r\n            TicTacToe game = new TicTacToe();\r\n            System.out.println(\"Initial Game Board:\");\r\n            game.printBoard();\r\n            \r\n            //Prints the first row of turns taken\r\n            for(int row = 0; row < 3; row++)\r\n            {\r\n            if(game.pickLocation(0, row))\r\n            {\r\n            game.takeTurn(0, row);\r\n            }\r\n            }\r\n            System.out.println(\"\\nAfter three turns:\");\r\n            game.printBoard();\r\n            \r\n            \r\n            \r\n            }\r\n            }public class TicTacToe\r\n            {\r\n            //copy over your constructor from the Tic Tac Toe Board activity in the previous lesson!\r\n            private int turn;\r\n            private String[][] board;\r\n            \r\n            public TicTacToe() {\r\n            this.board = new String[][] {\r\n            {\"-\", \"-\", \"-\"},\r\n            {\"-\", \"-\", \"-\"},\r\n            {\"-\", \"-\", \"-\"}\r\n            };\r\n            this.turn = 0;\r\n            }\r\n            \r\n            public String[][] getBoard() {\r\n            return this.board;\r\n            }\r\n            \r\n            //this method returns the current turn\r\n            public int getTurn()\r\n            {\r\n            return this.turn;\r\n            }\r\n            \r\n            /*This method prints out the board array on to the console\r\n            */\r\n            public void printBoard()\r\n            {\r\n            for(int i = -1; i < 3; i++) {\r\n            for(int j = -1; j < 3; j++) {\r\n            //leave the top-left corner blank\r\n            if(i<0 && j<0) System.out.print(\" \");\r\n            else if(i<0) System.out.print(j);\r\n            else if(j<0)  System.out.print(i);\r\n            else System.out.print(board[i][j]);\r\n            \r\n            //codehs doesn't like us having the extra padding on the first row for some reason >:(\r\n            if(i > -1 || j < 2) System.out.print(\" \");\r\n            }\r\n            System.out.println();\r\n            }\r\n            }\r\n            \r\n            //This method returns true if space row, col is a valid space\r\n            public boolean pickLocation(int row, int col)\r\n            {\r\n            return board[row][col].equals(\"-\");\r\n            }\r\n            \r\n            //This method places an X or O at location row,col based on the int turn\r\n            public void takeTurn(int row, int col)\r\n            {\r\n            if(turn % 2 == 0) board[row][col] = \"X\";\r\n            else board[row][col] = \"O\";\r\n            \r\n            turn++;\r\n            }\r\n            \r\n            //This method returns a boolean that returns true if a row has three X or O's in a row\r\n            public boolean checkRow()\r\n            {\r\n            for(String[] row : board) {\r\n            int xInRow = 0;\r\n            int oInRow = 0;\r\n            for(String space : row) {\r\n            if(space.equals(\"X\")) xInRow++;\r\n            else xInRow = 0;\r\n            \r\n            if(space.equals(\"O\")) oInRow++;\r\n            else oInRow = 0;\r\n            \r\n            if(xInRow >= 3 || oInRow >= 3) return true;\r\n            }\r\n            }\r\n            return false;\r\n            }\r\n            \r\n            //This method returns a boolean that returns true if a col has three X or O's\r\n            public boolean checkCol()\r\n            {\r\n            for(int row = 0; row < 3; row++) {\r\n            int xInRow = 0;\r\n            int oInRow = 0;\r\n            for(int col = 0; col < 3; col++) {\r\n            if(board[col][row].equals(\"X\")) xInRow++;\r\n            else xInRow = 0;\r\n            \r\n            if(board[col][row].equals(\"O\")) oInRow++;\r\n            else oInRow = 0;\r\n            \r\n            if(xInRow >= 3 || oInRow >= 3) return true;\r\n            }\r\n            }\r\n            return false;\r\n            }\r\n            \r\n            //This method returns a boolean that returns true if either diagonal has three X or O's\r\n            public boolean checkDiag()\r\n            {\r\n            String diag1 = board[0][0] + board[1][1] + board[2][2];\r\n            String diag2 = board[0][2] + board[1][1] + board[0][2];\r\n            \r\n            return diag1.equals(\"XXX\") || diag1.equals(\"OOO\") || diag2.equals(\"XXX\") || diag2.equals(\"OOO\");\r\n            }\r\n            \r\n            //This method returns a boolean that checks if someone has won the game\r\n            public boolean checkWin()\r\n            {\r\n            return checkDiag() || checkCol() || checkRow();\r\n            }\r\n            \r\n            }","n":0.044},"2":{"v":"/codehs/java/8/2/tic-tac-toe-methods.html","n":1}}},{"i":197,"$":{"0":{"v":"9.1.7 Books","n":0.707},"1":{"v":"9.1.7 Bookspublic class Fiction extends Book\r\n            {\r\n                private String author;\r\n                \r\n                \r\n                public String getAuthor() {\r\n                    return author;\r\n                }\r\n                \r\n                public void setAuthor(String author) {\r\n                    this.author = author;\r\n                }\r\n            }public class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Fiction hungerGames = new Fiction();\r\n        \r\n        hungerGames.setPages(374);\r\n        hungerGames.setName(\"The Hunger Games\");\r\n        hungerGames.setAuthor(\"Suzanne Collins\");\r\n        \r\n        Dict websters = new Dict();\r\n        websters.setPages(720);\r\n        websters.setName(\"Webster's Dictionary\");\r\n        websters.setWords(171476);\r\n        \r\n        System.out.println(hungerGames.getName());\r\n        System.out.println(websters.getName());\r\n    }\r\n}public class Dict extends Book\r\n{\r\n    private int words;\r\n    \r\n    \r\n    public int getWords() {\r\n        return words;\r\n    }\r\n    \r\n    public void setWords(int words) {\r\n        this.words = words;\r\n    }\r\n}public class Book\r\n{\r\n    \r\n    \r\n    private int pages;\r\n    private String name;\r\n    \r\n    \r\n    public int getPages() {\r\n        return pages;\r\n    }\r\n    \r\n    public void setPages(int pages) {\r\n        this.pages = pages;\r\n    }\r\n    \r\n    public String getName() {\r\n        return name;\r\n    }\r\n    \r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n}","n":0.085},"2":{"v":"/codehs/java/9/1/books.html","n":1}}},{"i":198,"$":{"0":{"v":"9.1.8 Computers","n":0.707},"1":{"v":"9.1.8 Computerspublic class Desktop extends Computer\r\n            {\r\n                \r\n            private boolean monitor;\r\n            \r\n                \r\n                \r\n                public boolean hasMonitor() {\r\n                    return this.monitor;\r\n                }\r\n            }public class Laptop extends Computer\r\n{\r\n   private double batteryLife;\r\n   \r\n   public void setBatteryLife(double _batteryLife) {\r\n        this.batteryLife = _batteryLife;\r\n    }\r\n    \r\n    public double getBatteryLife() {\r\n        return this.batteryLife;\r\n    }\r\n}public class Computer\r\n{\r\n\r\n    private int screenSize;\r\n    private int memory;\r\n    \r\n    public void setScreenSize(int _screenSize) {\r\n        this.screenSize = _screenSize;\r\n    }\r\n    \r\n    public int getScreenSize() {\r\n        return this.screenSize;\r\n    }\r\n    \r\n    public void setMemory(int _memory) {\r\n        this.memory = _memory;\r\n    }\r\n    \r\n    public int getMemory() {\r\n        return this.memory;\r\n    }\r\n    \r\n    \r\n\r\n}public class ComputerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Laptop macBook = new Laptop();\r\n        macBook.setBatteryLife(8.5);\r\n        \r\n        Desktop dell = new Desktop();\r\n        dell.setScreenSize(18);\r\n        \r\n        Computer surface = new Computer();\r\n        surface.setScreenSize(11);\r\n        \r\n        System.out.println(macBook.getBatteryLife());\r\n        System.out.println(dell.getScreenSize());\r\n        System.out.println(surface.getScreenSize());\r\n    }\r\n}","n":0.089},"2":{"v":"/codehs/java/9/1/computers.html","n":1}}},{"i":199,"$":{"0":{"v":"9.1.9 More Animals!","n":0.577},"1":{"v":"9.1.9 More Animals!JSYK\r\n            You don't need to fill in AnimalTester.java at all-- the autograder doesn't care about it.public class AnimalTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Add code to test your hierarchy\r\n                }\r\n            }public class Pet extends Animal\r\n{\r\n   private String name;\r\n   private String size;\r\n   \r\n   public void setName(String _name) {\r\n       this.name = _name;\r\n   }\r\n   public String getName() {\r\n       return this.name;\r\n   }\r\n   \r\n   public void setSize(String _size) {\r\n       this.size = _size;\r\n   }\r\n   public String getSize() {\r\n       return this.size;\r\n   }\r\n   \r\n}public class Animal\r\n{\r\n   private String type;\r\n   \r\n   public void setType(String _type) {\r\n       this.type = _type;\r\n   }\r\n   public String getType() {\r\n       return this.type;\r\n   }\r\n   \r\n}public class Fish extends Pet\r\n{\r\n    \r\n    String water;\r\n    public void setWater(String _water) {\r\n       this.water = _water;\r\n   }\r\n   public String setWater() {\r\n       return this.water;\r\n   }\r\n}public class Dog extends Pet\r\n{\r\n   boolean isTrained;\r\n    public void setIsTrained(boolean _isTrained) {\r\n       this.isTrained = _isTrained;\r\n   }\r\n   public boolean getIsTrained() {\r\n       return this.isTrained;\r\n   }\r\n   \r\n}","n":0.082},"2":{"v":"/codehs/java/9/1/more-animals.html","n":1}}},{"i":200,"$":{"0":{"v":"9.1.6 Person / Student Object","n":0.447},"1":{"v":"9.1.6 Person / Student Objectpublic class Student extends Person {\r\n\r\n                private int grade;\r\n                private double gpa;\r\n            \r\n                public Student(String name, String birthday, int grade, double gpa){\r\n                    super(name, birthday);\r\n                    this.grade = grade;\r\n                    this.gpa = gpa;\r\n                }\r\n            \r\n                public int getGrade(){\r\n                    return grade;\r\n                }\r\n            \r\n                public double getGpa(){\r\n                    return gpa;\r\n                }\r\n            }public class Person {\r\n\r\n                private String name;\r\n                private String birthday;\r\n            \r\n                public Person (String name, String birthday)\r\n                {\r\n                    this.name = name;\r\n                    this.birthday = birthday;\r\n                }\r\n            \r\n                public String getBirthday(){ \r\n                    return birthday;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n            \r\n            }public class PersonRunner\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Person tom = new Person(\"Thomas Edison\", \" February 11, 1847\");\r\n        \r\n        System.out.println(tom.getName());\r\n        System.out.println(tom.getBirthday());\r\n        \r\n        Student albert = new Student(\"Albert Einstein\", \"March 14, 1879\", 12, 5.0);\r\n        \r\n        System.out.println(albert.getName());\r\n        System.out.println(albert.getBirthday());\r\n        System.out.println(albert.getGrade());\r\n        System.out.println(albert.getGpa());\r\n    }\r\n}","n":0.087},"2":{"v":"/codehs/java/9/1/person-student-object.html","n":1}}},{"i":201,"$":{"0":{"v":"9.2.9 Clothing Store","n":0.577},"1":{"v":"9.2.9 Clothing Storepublic class Sweatshirt extends Clothing\r\n            {\r\n            \r\n            private boolean hood;\r\n            \r\n            public Sweatshirt(String size, String color, boolean hasHood) {\r\n                super(size, color);\r\n                this.hood = hasHood;\r\n            }\r\n            \r\n            public boolean hasHood() {\r\n                return hood;\r\n            }\r\n            }public class TShirt extends Clothing\r\n{\r\n    private String fabric;\r\n    \r\n    public TShirt(String size, String color, String fabric) {\r\n        super(size, color);\r\n        this.fabric = fabric;\r\n    }\r\n    \r\n    public String getFabric() {\r\n        return fabric;\r\n    }\r\n}public class Clothing\r\n{\r\n    private String size;\r\n    private String color;\r\n    \r\n    public Clothing(String size, String color) {\r\n        this.size = size;\r\n        this.color = color;\r\n    }\r\n    \r\n    public String getSize() {\r\n        return size;\r\n    }\r\npublic String getColor() {\r\n    return color;\r\n}\r\n}public class Jeans extends Clothing\r\n{\r\n    public Jeans(String size) {\r\n        super(size, \"blue\");\r\n    }\r\n    \r\n}public class ClothingTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(new Sweatshirt(\"L\", \"blue\", false));\r\n        System.out.println(new Jeans(\"XS\"));\r\n        System.out.println(new Clothing(\"M\", \"red\"));\r\n        System.out.println(new Jeans(\"L\"));\r\n    }\r\n}","n":0.087},"2":{"v":"/codehs/java/9/2/clothing-store.html","n":1}}},{"i":202,"$":{"0":{"v":"9.2.8 Foods","n":0.707},"1":{"v":"9.2.8 Foodspublic class Fruit extends HealthyFood\r\n            {\r\n                private boolean isLocal;\r\n                private String color;\r\n                \r\n                public Fruit(String foodName, int calories, boolean isLocal, String foodColor) {\r\n                    super(foodName, calories, \"Fruit\");\r\n                    this.isLocal = isLocal;\r\n                    this.color = foodColor;\r\n                }\r\n                \r\n                public boolean isLocal() {\r\n                    return this.isLocal;\r\n                    }\r\n                public String getColor() {\r\n                    return this.color;\r\n                }\r\n            }public class FoodTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(new Food(\"Apple\", 2000));\r\n        System.out.println(new HealthyFood(\"Cake\", 2000, \"Meat\"));\r\n    }\r\n}public class HealthyFood extends Food\r\n{\r\n    private String group;\r\n    \r\n    public HealthyFood(String foodName, int calories, String foodGroup) {\r\n        super(foodName, calories);\r\n        this.group = foodGroup;\r\n    }\r\n    \r\n    public String getGroup() {\r\n        return this.group;\r\n    }\r\n}public class Food\r\n{\r\n    private String name;\r\n    private int calories;\r\n    \r\n    public Food (String foodName, int calories) {\r\n        this.name = foodName;\r\n        this.calories = calories;\r\n    }\r\n    \r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n    public int getCal() {\r\n        return this.calories;\r\n    }\r\n    \r\n    public String toString() {\r\n        return name + \" has \" + calories + \" calories\";\r\n    }\r\n}","n":0.081},"2":{"v":"/codehs/java/9/2/foods.html","n":1}}},{"i":203,"$":{"0":{"v":"9.2.7 Instruments","n":0.707},"1":{"v":"9.2.7 Instrumentspublic class Wind extends Instrument\r\n            {\r\n                private boolean usesReed;\r\n                \r\n                public Wind(String name, String family, boolean usesReed) {\r\n                    super(name, family);\r\n                    this.usesReed = usesReed;\r\n                }\r\n             \r\n            }public class InstrumentTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        /**\r\n         * Don't Change This Tester Class!\r\n         * \r\n         * When you are finished, this should run without error.\r\n         */ \r\n        Wind tuba = new Wind(\"Tuba\", \"Brass\", false);\r\n        Wind clarinet = new Wind(\"Clarinet\", \"Woodwind\", true);\r\n        \r\n        Strings violin = new Strings(\"Violin\", true);\r\n        Strings harp = new Strings(\"Harp\", false);\r\n        \r\n        System.out.println(tuba);\r\n        System.out.println(clarinet);\r\n        \r\n        System.out.println(violin);\r\n        System.out.println(harp);\r\n    }\r\n}public class Strings extends Instrument\r\n{\r\n     private boolean usesBow;\r\n    \r\n    public Strings(String name, boolean usesBow) {\r\n        super(name, \"Strings\");\r\n        this.usesBow = usesBow;\r\n    }\r\n       \r\n}public class Instrument\r\n{\r\n    \r\n    private String name;\r\n    private String family;\r\n    \r\n    public Instrument(String name, String family) {\r\n        this.name = name;\r\n        this.family = family;\r\n    }\r\n    \r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n    \r\n    public String getFamily() {\r\n        return this.family;\r\n    }\r\n    \r\n    public String toString() {\r\n        return this.name + \" is a member of the \" + this.family + \" family.\";\r\n    }\r\n}","n":0.076},"2":{"v":"/codehs/java/9/2/instruments.html","n":1}}},{"i":204,"$":{"0":{"v":"9.2.6 Students","n":0.707},"1":{"v":"9.2.6 StudentsJSYK\r\n    You don't need to fill in StudentTester.java at all-- the autograder doesn't care about it. It's just filled in here for posterity.public class Student\r\n            {\r\n                private String name;\r\n                private int classYear;\r\n               \r\n               public Student(String name, int classYear) {\r\n                   this.name = name;\r\n                   this.classYear = classYear;\r\n               }\r\n               \r\n               \r\n                public String getName(){\r\n                   return name;\r\n                }\r\n               \r\n                public int getClassYear(){\r\n                   return classYear;\r\n                }\r\n               \r\n                public String toString(){\r\n                    return name + \", class of \" + classYear;\r\n                }\r\n            }public class StudentTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        \r\n        /**\r\n         * Create a student in the class of 2020\r\n         */\r\n         Student student = new Student(\"Quin\", 2020);\r\n         \r\n         \r\n         /**\r\n         * Create a student athlete in the class of 2022\r\n         * that is eligible and plays soccer.\r\n         */\r\n         StudentAthlete jock = new StudentAthlete(\"Elle\", 2022, \"Soccer\", true);\r\n         \r\n         \r\n         System.out.println(student);\r\n         System.out.println(jock);\r\n    }\r\n}public class StudentAthlete extends Student\r\n{\r\n    private String sport;\r\n    private boolean eligible;\r\n    \r\n   public StudentAthlete(String name, int classYear, String sport, boolean eligible) {\r\n       super(name, classYear);\r\n       this.sport = sport;\r\n       this.eligible = eligible;\r\n   }\r\n   \r\n   \r\n   public String getSport(){\r\n       return sport;\r\n   }\r\n   \r\n   public boolean isEligible(){\r\n       return eligible;\r\n   }\r\n    \r\n    @Override\r\n    public String toString(){\r\n        return super.getName() + \", class of \" + super.getClassYear() +\r\n            \", plays \" + sport;\r\n    }\r\n}","n":0.07},"2":{"v":"/codehs/java/9/2/students.html","n":1}}},{"i":205,"$":{"0":{"v":"9.3.6 Dogs Bark","n":0.577},"1":{"v":"9.3.6 Dogs Barkpublic class DogTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(new Dog(\"Fido\"));\r\n                    System.out.println(new LoudDog(\"Tib\"));\r\n                }\r\n            }public class LoudDog extends Dog\r\n{\r\n   \r\n   public LoudDog(String name){\r\n       super(name);\r\n   }\r\n   \r\n   public String speak(){\r\n       return \"BARK!\";\r\n   }\r\n   \r\n   public String toString(){\r\n      return super.getName() + \" is loud and likes to \" + speak();\r\n   }\r\n}public class Dog\r\n{\r\n    private String name;\r\n    \r\n     public Dog(String name){\r\n       this.name = name;\r\n   }\r\n   \r\n   public String getName(){\r\n       return name;\r\n   }\r\n   \r\n   public String speak(){\r\n       return \"Bark!\";\r\n   }\r\n   \r\n   public String toString(){\r\n       return name + \" likes to \" + speak();\r\n   }\r\n}","n":0.104},"2":{"v":"/codehs/java/9/3/dogs-bark.html","n":1}}},{"i":206,"$":{"0":{"v":"9.3.7 Electric Cars","n":0.577},"1":{"v":"9.3.7 Electric Carspublic class CarTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Car object\r\n                    Car car = new Car(\"Toyota\", \"20\");\r\n                    // Print out the model\r\n                    System.out.println(car.getModel());\r\n                    // Print out the MPG\r\n                    System.out.println(car.getMPG());\r\n                    // Print the object\r\n                    System.out.println(car);\r\n                    // Create an ElectricCar object\r\n                    ElectricCar elecCar = new ElectricCar(\"Tesla\");\r\n                    // Print out the model\r\n                    System.out.println(elecCar.getModel());\r\n                    // Print out the MPG\r\n                    System.out.println(elecCar.getMPG());\r\n                    // Print the object\r\n                    System.out.println(elecCar);\r\n                }\r\n            }public class Car {\r\n\r\n                //This code is complete\r\n                private String model;\r\n                private String mpg;\r\n            \r\n                public Car(String model, String mpg){\r\n                    this.model = model;\r\n                    this.mpg = mpg;\r\n                }\r\n            \r\n                public String getModel(){\r\n                    return model;\r\n                }\r\n            \r\n                public String getMPG(){\r\n                    return mpg;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return model + \" gets \" + mpg + \" mpg.\";\r\n                }\r\n            }public class ElectricCar extends Car {\r\n\r\n                // Complete the constructor\r\n                public ElectricCar(String model){\r\n                   super(model, \"Electric cars do not calculate MPG.\");\r\n                }\r\n            \r\n                // Override the getMPG here.\r\n                // It should return: \"Electric cars do not calculate MPG.\r\n                @Override \r\n                public String getMPG() {\r\n                    return \"Electric cars do not calculate MPG.\";\r\n                }\r\n                \r\n            \r\n                // Override the toString() here.\r\n                // (model) is an  electric car.\r\n                @Override\r\n                public String toString() {\r\n                    return super.getModel() + \" is an electric car.\";\r\n                }\r\n                \r\n            }","n":0.07},"2":{"v":"/codehs/java/9/3/electric-cars.html","n":1}}},{"i":207,"$":{"0":{"v":"9.3.8 Online Companies","n":0.577},"1":{"v":"9.3.8 Online Companiespublic class Company {\r\n    \r\n                private String name;\r\n                private String streetAddress;\r\n                private String city;\r\n                private String state;\r\n            \r\n                // Set missing values to null\r\n                public Company(String name){\r\n                    this.streetAddress = null;\r\n                    this.name = name;\r\n                    this.city = null;\r\n                    this.state = null;\r\n                }\r\n                \r\n            \r\n                public Company(String name, String streetAddress, String city, String state){\r\n                   this.name = name;\r\n                   this.streetAddress = streetAddress;\r\n                   this.city = city;\r\n                   this.state = state;\r\n                }\r\n            \r\n                public String getName(){\r\n                  return name;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String address(){\r\n                   return streetAddress + \"\\n\" + city + \", \" + state;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * Widget Company\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String toString(){\r\n                   return name + \"\\n\" + this.address();\r\n                }\r\n            }public class OnlineCompany extends Company{\r\n\r\n                private String webAddress;\r\n            \r\n                public OnlineCompany(String name, String webAddress){\r\n                    super(name);\r\n                    this.webAddress = webAddress;\r\n                }\r\n            \r\n                //Return the website address\r\n            \r\n                public String address(){\r\n                    return webAddress;\r\n                }\r\n            \r\n                /**\r\n                * Remember To get name from superclass, use super.getName()\r\n                * \r\n                * Example Output:\r\n                * CodeHS\r\n                * www.codehs.com\r\n                */\r\n                \r\n                public String toString(){\r\n                    return super.getName() + \"\\n\" + webAddress;\r\n                }\r\n            }public class CompanyTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println((new Company(\"McDonalds\", \"123 Main Street\", \"Anytown\", \"USA\")).toString());\r\n        System.out.println((new OnlineCompany(\"Google\", \"https://google.com\")).toString());\r\n    }\r\n}","n":0.069},"2":{"v":"/codehs/java/9/3/online-companies.html","n":1}}},{"i":208,"$":{"0":{"v":"9.4.7 Bank Accounts","n":0.577},"1":{"v":"9.4.7 Bank Accountspublic class StudentAccount extends Account\r\n            {\r\n                // Complete this class with Override methods.   \r\n                public StudentAccount(String clientName, double openingBal){\r\n                   super(clientName, openingBal);\r\n                }\r\n                \r\n                // Students get a $1 bonus on depositing\r\n                public void deposit(double amount){\r\n                   super.deposit(amount + 1);\r\n                   \r\n                }\r\n                \r\n                \r\n                // Students pay a $2 fee for withdrawing\r\n                public void withdrawal(double amount){\r\n                   super.withdrawal(amount + 2);\r\n                   \r\n                }\r\n                \r\n                \r\n                // toString() Should read: Student account with a balance of $__.__\r\n                public String toString(){\r\n                   return \"Student account with a balance of $\" + super.getBalance();\r\n                   \r\n                }\r\n            }public class Account\r\n{\r\n    private String name;\r\n    private double balance;\r\n    \r\n    // Initialize values in constructor\r\n    public Account(String clientName, double openingBal){\r\n       name = clientName;\r\n       balance = openingBal;\r\n    }\r\n    \r\n    // Complete the accessor method\r\n    public double getBalance(){\r\n        \r\n        return balance;\r\n    }\r\n    \r\n    // Add amount to balance\r\n    public void deposit(double amount){\r\n       balance += amount;\r\n       \r\n    }\r\n    \r\n    // Subtract amount from balance\r\n    public void withdrawal(double amount){\r\n        balance -= amount;\r\n        \r\n    }\r\n    \r\n    // Should read: Regular account with a balance of $__.__\r\n    public String toString(){\r\n       return \"Regular account with a balance of $\" + balance;\r\n       \r\n    }\r\n}public class BankTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        StudentAccount s = new StudentAccount(\"Jem\", 300);\r\n        System.out.println(s);\r\n        s.deposit(20);\r\n        System.out.println(s);\r\n    }\r\n}","n":0.07},"2":{"v":"/codehs/java/9/4/bank-accounts.html","n":1}}},{"i":209,"$":{"0":{"v":"9.4.8 Employees","n":0.707},"1":{"v":"9.4.8 Employeespublic class HourlyEmployee extends Employee {\r\n\r\n                private double hoursPerWeek;\r\n            \r\n                // Call the Employee constructor and pass it a calculated annual salary\r\n                \r\n                public HourlyEmployee(String name, double hourlySalary, double hoursPerWeek){\r\n                    super(name, hourlySalary*hoursPerWeek*52);\r\n                    this.hoursPerWeek = hoursPerWeek;\r\n                    \r\n                    \r\n                }\r\n                \r\n                // Get the annual salary from the superclass and convert it back\r\n                // to hourly.\r\n                public double getHourlySalary(){\r\n                    return super.getAnnualSalary() / 52 / hoursPerWeek;\r\n                }\r\n            \r\n                // Use the input to set the annual salary in the superclass\r\n                \r\n                public void setHourlySalary(double hourlySalary){\r\n                   super.setAnnualSalary(hourlySalary*hoursPerWeek*52);\r\n                }\r\n            \r\n                /**\r\n                 * Example output:\r\n                 * Mike makes $18.0 per hour\r\n                 */\r\n                 \r\n                public String toString(){\r\n                    return super.getName() + \" makes $\" + getHourlySalary() + \" per hour\";   \r\n                }\r\n            }public class Employee {\r\n\r\n                private String name;\r\n                private double salary;\r\n            \r\n                public Employee(String name, double annualSalary){\r\n                   this.name = name;\r\n                   this.salary = annualSalary;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n                public double getAnnualSalary(){\r\n                    return salary;\r\n                }\r\n            \r\n                public void setAnnualSalary(double annualSalary){\r\n                    salary = annualSalary;\r\n                }\r\n            \r\n                /**\r\n                 * Example output:\r\n                 * Mr. Karel makes $75000.0 per year\r\n                 */\r\n                 \r\n                public String toString(){\r\n                    return name + \" makes $\" + salary + \" per year\"; \r\n                }\r\n            }public class EmployeeTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        HourlyEmployee eric = new HourlyEmployee(\"Eric B\", 13.0, 28);\r\n        System.out.println(eric);\r\n        eric.setHourlySalary(15.0);\r\n        System.out.println(eric);\r\n    }\r\n}","n":0.069},"2":{"v":"/codehs/java/9/4/employees.html","n":1}}},{"i":210,"$":{"0":{"v":"9.4.6 Squares","n":0.707},"1":{"v":"9.4.6 Squarespublic class Square extends Rectangle {\r\n\r\n                // Call to the Rectangle constructor\r\n                public Square(double sideLength){\r\n                   super(sideLength, sideLength);\r\n                }\r\n            \r\n                // Return either the width or height from the superclass\r\n                public double getSideLength(){\r\n                    return super.getHeight();\r\n                }\r\n            \r\n                //Set both the width and height in the superclass\r\n                public void setSideLength(double sideLength){\r\n                    super.setHeight(sideLength);\r\n                    super.setWidth(sideLength);\r\n                }\r\n                \r\n                // Get the width and/or the height from the superclass\r\n                public double area(){\r\n                    return super.getHeight() * super.getWidth();\r\n                }\r\n            \r\n                // Override to read: Square with side lengths ______\r\n                public String toString(){\r\n                    return \"Square with side lengths \" + super.getHeight();\r\n                }\r\n            }public class Rectangle {\r\n\r\n                private double width;\r\n                private double height;\r\n            \r\n                public Rectangle(double w, double h){\r\n                    width = w;\r\n                    height = h;\r\n                }\r\n            \r\n                public double getWidth(){\r\n                    return width;\r\n                }\r\n            \r\n                public void setWidth(double w){\r\n                    width = w;\r\n                }\r\n            \r\n                public double getHeight(){\r\n                    return height;\r\n                }\r\n            \r\n                public void setHeight(double h){\r\n                    height = h;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return \"Rectangle with width \" + width + \" and height \" + height;\r\n                }\r\n            }public class SquareTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Square sq = new Square(3.0);\r\n        System.out.println(sq);\r\n        sq.setSideLength(4.0);\r\n        System.out.println(sq);\r\n    }\r\n}","n":0.073},"2":{"v":"/codehs/java/9/4/squares.html","n":1}}},{"i":211,"$":{"0":{"v":"9.4.9 Student Test Scores","n":0.5},"1":{"v":"9.4.9 Student Test Scorespublic class StudentTest {\r\n\r\n                private int mathScore;\r\n                private int elaScore;\r\n                private String name;\r\n            \r\n                public StudentTest(String name, int mathScore, int elaScore){\r\n                   this.name = name;\r\n                   this.mathScore = mathScore;\r\n                   this.elaScore = elaScore;\r\n                }\r\n            \r\n                public int getMathScore() {\r\n                    return mathScore;\r\n                }\r\n            \r\n                public void setMathScore(int mathScore) {\r\n                    this.mathScore = mathScore;\r\n                }\r\n            \r\n                public int getElaScore() {\r\n                    return elaScore;\r\n                }\r\n            \r\n                public void setElaScore(int elaScore) {\r\n                    this.elaScore = elaScore;\r\n                }\r\n            \r\n                public String getName() {\r\n                    return name;\r\n                }\r\n            \r\n            }public class HSStudent extends StudentTest {\r\n\r\n                private int serviceHours;\r\n            \r\n                public HSStudent(String name, int mathScore, int elaScore, int serviceHours){\r\n                   super(name, mathScore, elaScore);\r\n                   this.serviceHours = serviceHours;\r\n                   \r\n                }\r\n            \r\n                public int getServiceHours(){\r\n                   return serviceHours;\r\n                }\r\n            \r\n                public void setServiceHours(int serviceHours){\r\n                   this.serviceHours += serviceHours;\r\n                   \r\n                }\r\n            \r\n                // If math score is at least 525, return true\r\n                public boolean passMath(){\r\n                    return super.getMathScore() >= 525;\r\n                    \r\n                }\r\n            \r\n                // If ela score is at least 560, return true\r\n                public boolean passEla(){\r\n                   return super.getElaScore() >= 525;\r\n                   \r\n                }\r\n            \r\n                // If service hours are at least 75, return true\r\n                public boolean completeService(){\r\n                    return serviceHours >= 75;\r\n                    \r\n                }\r\n            \r\n                // If the student has passed math, passed ela, and completed\r\n                // service hours, return true.\r\n                public boolean gradQualify(){\r\n                   return passMath() && passEla() && completeService();\r\n                   \r\n                }\r\n            \r\n                // If the student has qualified for graduation, print:\r\n                // (name) has qualified for graduation.\r\n                // Otherwise print:\r\n                // (name) has not yet qualified for graduation.\r\n                // Where (name) is the student's name.\r\n                public String toString(){\r\n                    if (gradQualify()){\r\n                        return super.getName() + \" has qualified for graduation.\";\r\n                    }\r\n            \r\n                    return super.getName() + \" has not yet qualified for graduation.\";\r\n                }\r\n            }import java.util.Scanner;\r\n\r\npublic class StudentTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        // Prompt the user for name, test scores, and service hours\r\n        System.out.println(\"Please enter the student name: \");\r\n        String name = sc.nextLine();\r\n        \r\n        System.out.println(\"Please enter the Math Score: \");\r\n        int mathScore = sc.nextInt();\r\n        \r\n        System.out.println(\"Please enter the Ela Score: \");\r\n        int elaScore = sc.nextInt();\r\n        \r\n        System.out.println(\"Please enter the Service Hours: \");\r\n        int hours = sc.nextInt();\r\n        \r\n        // Create a HSStudent object\r\n        HSStudent student = new HSStudent(name, mathScore, elaScore, hours);\r\n        \r\n        // Print the results\r\n        System.out.println(\"Pass Math? \" + student.passMath());\r\n        System.out.println(\"Pass ELA? \" + student.passEla());\r\n        System.out.println(\"Completed Service Hours? \" + student.completeService());\r\n        \r\n        System.out.println(student.toString());\r\n    }\r\n}","n":0.051},"2":{"v":"/codehs/java/9/4/student-test-scores.html","n":1}}},{"i":212,"$":{"0":{"v":"9.5.9 Assignments","n":0.707},"1":{"v":"9.5.9 Assignmentspublic class Project extends Assignment {\r\n                private String dueDate;\r\n                private boolean groups;\r\n                \r\n                public Project(String name, double availablePoints, double earnedPoints, String dueDate, boolean groups) {\r\n                    super(name, availablePoints, earnedPoints);\r\n                    this.dueDate = dueDate;\r\n                    this.groups = groups;\r\n                }\r\n                \r\n                public void setDueDate(String dueDate) {\r\n                this.dueDate = dueDate;\r\n            }\r\n            public String getDueDate() {\r\n                return this.dueDate;\r\n            }\r\n            public void setGroups(boolean groups) {\r\n                this.groups = groups;\r\n            }\r\n            public boolean getGroups() {\r\n                return this.groups;\r\n            }\r\n            }import java.util.*;\r\n\r\npublic class AssignmentRunner {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        ArrayList<Assignment> assignments = new ArrayList<Assignment>();\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        //keep looping until it's exited by the `break` statement\r\n        while(true) {\r\n            System.out.print(\"Please enter an assignment name (exit to quit): \");\r\n            String name = sc.nextLine();\r\n            if(name.equals(\"exit\")) break;\r\n            \r\n            System.out.print(\"Please enter the available points: \");\r\n            double pointTotal = sc.nextDouble();\r\n            sc.nextLine(); /*consume the ghost line formed by the scanner's tokenizer*/\r\n            \r\n            System.out.print(\"Please enter the earned points: \");\r\n            double pointsEarned = sc.nextDouble();\r\n            sc.nextLine(); /*consume the ghost line formed by the scanner's tokenizer*/\r\n            \r\n            System.out.print(\"Is this a (t)est or (p)roject: \");\r\n            String type = sc.nextLine();\r\n            \r\n            if(type.equals(\"t\")) {\r\n                System.out.print(\"Please enter the test date: \");\r\n                String testDate = sc.nextLine();\r\n                \r\n                Test test = new Test(name, pointTotal, pointsEarned, testDate);\r\n                assignments.add(test);\r\n            } else {\r\n                System.out.print(\"Please enter the due date: \");\r\n                String dueDate = sc.nextLine();\r\n                \r\n                System.out.print(\"Group project? true or false: \");\r\n                boolean groups = sc.nextBoolean();\r\n                sc.nextLine(); /*consume the ghost line formed by the scanner's tokenizer*/\r\n                \r\n                Project project = new Project(name, pointTotal, pointsEarned, dueDate, groups);\r\n                assignments.add(project);\r\n            }\r\n        }\r\n        System.out.print(\"Your average: \");\r\n        System.out.print(average(assignments));\r\n\r\n\r\n    }\r\n\r\n    public static double average(ArrayList<Assignment> assignments) {\r\n       double totalPointsEarned = 0;\r\n       double totalPointsAvailable = 0;\r\n       \r\n       for(Assignment a : assignments) {\r\n           totalPointsEarned += a.getEarnedPoints();\r\n           totalPointsAvailable += a.getAvailablePoints();\r\n       }\r\n       \r\n       return 100 * (totalPointsEarned / totalPointsAvailable);\r\n       \r\n    }\r\n}public class Assignment\r\n{\r\n    private String name;\r\n    private double availablePoints;\r\n    private double earnedPoints;\r\n    \r\n    public Assignment(String name, double availablePoints, double earnedPoints) {\r\n        this.name = name;\r\n        this.availablePoints = availablePoints;\r\n        this.earnedPoints = earnedPoints;\r\n    }\r\n    \r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n    \r\n    public void setAvailablePoints(double availablePoints) {\r\n        this.availablePoints = availablePoints;\r\n    }\r\n    public double getAvailablePoints() {\r\n        return this.availablePoints;\r\n    }\r\n    \r\n    public void setEarnedPoints(double earnedPoints) {\r\n        this.earnedPoints = earnedPoints;\r\n    }\r\n    public double getEarnedPoints() {\r\n        return this.earnedPoints;\r\n    }\r\n\r\n}public class Test extends Assignment {\r\n                private String testDate;\r\n                \r\n                public Test(String name, double availablePoints, double earnedPoints, String testDate) {\r\n                    super(name, availablePoints, earnedPoints);\r\n                    this.testDate = testDate;\r\n                }\r\n                \r\n                public void setTestDate(String testDate) {\r\n                    this.testDate = testDate;\r\n                }\r\n                public String getTestDate() {\r\n                    return this.testDate;\r\n                }\r\n                \r\n            }","n":0.05},"2":{"v":"/codehs/java/9/5/assignments.html","n":1}}},{"i":213,"$":{"0":{"v":"9.5.7 Creating .equals","n":0.577},"1":{"v":"9.5.7 Creating .equalspublic class Student extends Person {\r\n\r\n                private int grade;\r\n            \r\n                public Student(String name, String birthday, int grade){\r\n                    super(name, birthday);\r\n                    this.grade = grade;\r\n                }\r\n            \r\n                public int getGrade(){\r\n                    return grade;\r\n                }\r\n            }public class Person {\r\n\r\n                private String name;\r\n                private String birthday;\r\n            \r\n                public Person (String name, String birthday)\r\n                {\r\n                    this.name = name;\r\n                    this.birthday = birthday;\r\n                }\r\n            \r\n                public String getBirthday(){\r\n                    return birthday;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n                public boolean equals(Person other) {\r\n                    return other.getBirthday().equals(birthday) && other.getName().equals(name);\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class PersonTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        System.out.print(\"Please enter the Person's name: \");\r\n        String p1name = sc.nextLine();\r\n        System.out.print(\"Please enter the Person's birthday: \");\r\n        String p1bday = sc.nextLine();\r\n        \r\n        Person p1 = new Person(p1name, p1bday);\r\n        \r\n        System.out.print(\"Please enter the Student's name: \");\r\n        String p2name = sc.nextLine();\r\n        System.out.print(\"Please enter the Student's birthday: \");\r\n        String p2bday = sc.nextLine();\r\n        System.out.print(\"Please enter the Student's grade: \");\r\n        int    p2grade = sc.nextInt();\r\n        \r\n        Student p2 = new Student(p2name, p2bday, p2grade);\r\n        \r\n        System.out.println(\"Same: \" + p1.equals(p2));\r\n\r\n        \r\n    }\r\n}","n":0.076},"2":{"v":"/codehs/java/9/5/creating-equals.html","n":1}}},{"i":214,"$":{"0":{"v":"9.5.8 Online Companies Revisited","n":0.5},"1":{"v":"9.5.8 Online Companies Revisitedpublic class OnlineCompany extends Company{\r\n\r\n                private String webAddress;\r\n            \r\n                public OnlineCompany(String name, String webAddress){\r\n                    super(name);\r\n                    this.webAddress = webAddress;\r\n                }\r\n            \r\n                //Return the website address\r\n            \r\n                public String address(){\r\n                    return webAddress;\r\n                }\r\n            \r\n                /**\r\n                * Remember: To get name from superclass, use super.getName()\r\n                * Example Output:\r\n                * CodeHS\r\n                * www.codehs.com\r\n                */\r\n                \r\n                public String toString(){\r\n                    return super.getName() + \"\\nWebsite: \" + webAddress;   \r\n                }\r\n            }public class Company {\r\n    \r\n                private String name;\r\n                private String streetAddress;\r\n                private String city;\r\n                private String state;\r\n            \r\n                // Set missing values to null\r\n                public Company(String name){\r\n                    this.name = name;\r\n                    this.streetAddress = null;\r\n                    this.city = null;\r\n                    this.state = null;\r\n                }\r\n                \r\n            \r\n                public Company(String name, String streetAddress, String city, String state){\r\n                    this.name = name;\r\n                    this.streetAddress = streetAddress;\r\n                    this.city = city;\r\n                    this.state = state;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String address(){\r\n                   return streetAddress;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * Widget Company\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String toString(){\r\n                   return name + \"\\n\" + streetAddress + \"\\n\" + city + \", \" + state;\r\n                }\r\n            }import java.util.*;\r\n\r\npublic class CompanyTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        ArrayList<Company> companies = new ArrayList<Company>(); \r\n        \r\n        //keep looping until it is broken by the `break` statement\r\n        while(true) {\r\n            System.out.print(\"Please enter a company name, enter 'exit' to quit: \");\r\n            String companyName = sc.nextLine();\r\n            if(companyName.equals(\"exit\")) break;\r\n            \r\n            System.out.print(\"Is this an online company, 'yes' or 'no': \");\r\n            String online = sc.nextLine();\r\n            if(online.equals(\"yes\")) {\r\n                System.out.print(\"Please enter the website address: \");\r\n                String website = sc.nextLine();\r\n                \r\n                OnlineCompany onlineCompany = new OnlineCompany(companyName, website);\r\n                companies.add(onlineCompany);\r\n            } else {\r\n                System.out.print(\"Please enter the street address: \");\r\n                String streetAddress = sc.nextLine();\r\n                System.out.print(\"Please enter the city address: \");\r\n                String city = sc.nextLine();\r\n                System.out.print(\"Please enter the state address: \");\r\n                String state = sc.nextLine();\r\n                \r\n                Company company = new Company(companyName, streetAddress, city, state);\r\n                companies.add(company);\r\n            }\r\n        }\r\n        \r\n        //print out arraylist\r\n        for(Company company : companies) {\r\n            System.out.println(company.toString());\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","n":0.055},"2":{"v":"/codehs/java/9/5/online-companies-revisited.html","n":1}}},{"i":215,"$":{"0":{"v":"9.5.6 Pies","n":0.707},"1":{"v":"9.5.6 Piespublic class Pie {\r\n\r\n                private String type;\r\n                private int slices;\r\n                \r\n                public Pie (String type, int slices) {\r\n                    this.type = type;\r\n                    this.slices = slices;\r\n                }\r\n                \r\n                public int getSlices (){\r\n                    return slices;\r\n                }\r\n                \r\n                public void eatSlice(){\r\n                    slices --;\r\n                }\r\n                \r\n                public String getType(){\r\n                    return type;\r\n                }\r\n            }public class PumpkinPie extends Pie {\r\n    \r\n                private boolean canned;\r\n            \r\n                public PumpkinPie (int slices, boolean canned) \r\n                {\r\n                    super(\"Pumpkin\", slices);\r\n                    this.canned = canned;\r\n                }\r\n                \r\n                public boolean canned()\r\n                {\r\n                    return canned;\r\n                }\r\n                \r\n            }public class ApplePie extends Pie {\r\n\r\n                public ApplePie (int slices) \r\n                {\r\n                    super(\"Apple\", slices);\r\n                }\r\n                \r\n                public boolean hasSlice()\r\n                {\r\n                    return super.getSlices() > 0;\r\n                }\r\n                \r\n                @Override\r\n                public void eatSlice()\r\n                {\r\n                    if (this.hasSlice())\r\n                    {\r\n                        super.eatSlice();\r\n                    }\r\n                }\r\n            }import java.util.ArrayList;\r\n\r\npublic class PieTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Pie[] pies = new Pie[] {\r\n            new Pie(\"Blueberry\", 3),\r\n            new PumpkinPie(4, true),\r\n            new ApplePie(12)\r\n        };\r\n        \r\n        for(Pie pie : pies) {\r\n            System.out.println(\"Pie: \" + pie.getType());\r\n        }\r\n    }\r\n}","n":0.08},"2":{"v":"/codehs/java/9/5/pies.html","n":1}}},{"i":216,"$":{"0":{"v":"9.6.7 Cars","n":0.707},"1":{"v":"9.6.7 Carspublic class Car {\r\n\r\n                //This code is complete\r\n                private String model;\r\n                private String mpg;\r\n            \r\n                public Car(String model, String mpg){\r\n                    this.model = model;\r\n                    this.mpg = mpg;\r\n                }\r\n            \r\n                public String getModel(){\r\n                    return model;\r\n                }\r\n            \r\n                public String getMPG(){\r\n                    return mpg;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return model + \" gets \" + mpg + \" mpg.\";\r\n                }\r\n            }public class ElectricCar extends Car {\r\n\r\n                // Complete the constructor\r\n                public ElectricCar(String model){\r\n                   super(model, \"Electric cars do not calculate MPG.\");\r\n                }\r\n            \r\n                // Override the getMPG here.\r\n                // It should return: \"Electric cars do not calculate MPG.\r\n                @Override \r\n                public String getMPG() {\r\n                    return \"Electric cars do not calculate MPG\";\r\n                }\r\n                \r\n            \r\n                // Override the toString() here.\r\n                // (model) is an  electric car.\r\n                @Override\r\n                public String toString() {\r\n                    return super.getModel() + \" is an electric car.\";\r\n                }\r\n                \r\n            }import java.util.*;\r\n\r\npublic class CarTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Car> cars = new ArrayList<Car>();\r\n        \r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        //keep looping until the user exits with the `break;` statement\r\n        while(true) {\r\n            System.out.println(\"Please enter a car model name(exit to quit): \");\r\n            String name = sc.nextLine();\r\n            if(name.equals(\"exit\")) break;\r\n            \r\n            System.out.println(\"Is this car electric? (y or n) \");\r\n            String electric = sc.nextLine();\r\n            \r\n            if(electric.equals(\"y\")) {\r\n                ElectricCar electricCar = new ElectricCar(name);\r\n                cars.add(electricCar);\r\n            } else {\r\n                System.out.println(\"How many miles per gallon: \");\r\n                //you'd think you'd want a double, but it represents it as strings for some reason. idk.\r\n                String mpg = sc.nextLine();\r\n                \r\n                Car car = new Car(name, mpg);\r\n                cars.add(car);\r\n            }\r\n        }\r\n        \r\n        //print out each car\r\n        \r\n        for(Car c : cars) {\r\n            System.out.println(\"Car: \" + c.getModel());\r\n            System.out.println(\"MPG: \" + c.getMPG());\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","n":0.061},"2":{"v":"/codehs/java/9/6/cars.html","n":1}}},{"i":217,"$":{"0":{"v":"9.6.9 Fun with Solids","n":0.5},"1":{"v":"9.6.9 Fun with Solidsimport java.lang.Math;\r\n\r\n            public class Sphere extends Solid\r\n            {\r\n                \r\n                private double radius;\r\n                \r\n                \r\n                public Sphere(String name, double radius) {\r\n                    super(name);\r\n                    this.radius = radius;\r\n                }\r\n                \r\n                public double volume()\r\n                {\r\n                    return (4.0/3.0) * Math.PI * (radius*radius*radius);\r\n                }\r\n                \r\n                public double surfaceArea()\r\n                {\r\n                    return 4 * Math.PI * (radius*radius);\r\n                } \r\n            }public class Cube extends RectangularPrism\r\n{\r\n    \r\n    public Cube(String name, double sideLength) {\r\n        super(name, sideLength, sideLength, sideLength);\r\n    }\r\n}public class Solid\r\n{\r\n    private String myName;\r\n\r\n    public Solid(String name)\r\n    {\r\n        myName = name;\r\n    }\r\n\r\n    public String getName()\r\n    {\r\n        return myName;\r\n    }\r\n\r\n    // This should be overriden in the subclass\r\n    public double volume()\r\n    {\r\n        return 0;\r\n    }\r\n    \r\n    // This should be overriden in the subclass\r\n    public double surfaceArea()\r\n    {\r\n        return 0;\r\n    }\r\n}import java.lang.Math;\r\n\r\n            public class Cylinder extends Solid\r\n            {\r\n                private double radius;\r\n                private double height;\r\n                \r\n                public Cylinder(String name, double radius, double height) {\r\n                    super(name);\r\n                    this.radius = radius;\r\n                    this.height = height;\r\n                }\r\n                \r\n                public double volume()\r\n                {\r\n                    return Math.PI * (radius*radius) * height;\r\n                }\r\n                \r\n                public double surfaceArea()\r\n                {\r\n                    return 2 * Math.PI * radius * (height+radius);\r\n                }\r\n            }public class RectangularPrism extends Solid\r\n{\r\n    private double length;\r\n    private double width;\r\n    private double height;\r\n    \r\n    public RectangularPrism(String name, double length, double width, double height) {\r\n        super(name);\r\n        this.length = length;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    \r\n    public double volume()\r\n    {\r\n        return width*length*height;\r\n    }\r\n    \r\n    public double surfaceArea()\r\n    {\r\n        return width*length*2 + length*height*2 + height*width*2;\r\n    }\r\n}import java.lang.Math;\r\n\r\npublic class Pyramid extends Solid\r\n{\r\n    private double length;\r\n    private double width;\r\n    private double height;\r\n    \r\n    public Pyramid(String name, double length, double width, double height) {\r\n        super(name);\r\n        this.length = length;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    \r\n    public double volume()\r\n    {\r\n        return (length*width)/3 * height;\r\n    }\r\n    \r\n    public double surfaceArea()\r\n    {\r\n        double baseArea = (length*width);\r\n        \r\n        \r\n        double slantHeightFront = Math.sqrt(Math.pow(height,2) + Math.pow(length/2, 2));\r\n        double slantHeightSide = Math.sqrt(Math.pow(height,2) + Math.pow(width/2, 2));\r\n        \r\n        double frontArea = (width * slantHeightFront) * 0.5;\r\n        double sideArea = (length * slantHeightSide) * 0.5;\r\n        \r\n        return baseArea + frontArea*2 + sideArea*2;\r\n    }\r\n}public class SolidTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        String name;\r\n        double volume;\r\n        double surfaceArea;\r\n\r\n        // Pyramid constructor should take name, length, width, height\r\n        // in that order\r\n        Pyramid pyramid = new Pyramid(\"My pyramid\", 1, 3, 5);\r\n        name = pyramid.getName();\r\n        volume = round(pyramid.volume(), 2);\r\n        surfaceArea = round(pyramid.surfaceArea(), 2);\r\n        System.out.println(\"Pyramid '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n\r\n        // Sphere constructor should take name then radius\r\n        Sphere sphere = new Sphere(\"My sphere\", 4);\r\n        name = sphere.getName();\r\n        volume = round(sphere.volume(), 2);\r\n        surfaceArea = round(sphere.surfaceArea(), 2);\r\n        System.out.println(\"Sphere '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n            \r\n        // RectangularPrism constructor should take name, \r\n        // length, width, height in that order\r\n        RectangularPrism rectangularPrism = new RectangularPrism(\"My rectangular prism\",\r\n            5, 8, 3);\r\n        name = rectangularPrism.getName();\r\n        volume = round(rectangularPrism.volume(), 2);\r\n        surfaceArea = round(rectangularPrism.surfaceArea(), 2);\r\n        System.out.println(\"RectangularPrism '\" + name + \"' has volume: \" +\r\n            volume + \" and surface area: \" + surfaceArea + \".\");\r\n\r\n        // Cylinder constructor should take name, radius, height\r\n        // in that order\r\n        Cylinder cylinder = new Cylinder(\"My cylinder\", 4, 9);\r\n        name = cylinder.getName();\r\n        volume = round(cylinder.volume(), 2);\r\n        surfaceArea = round(cylinder.surfaceArea(), 2);\r\n        System.out.println(\"Cylinder '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n\r\n        // Cube constructor should take name then side length\r\n        Cube cube = new Cube(\"My cube\", 4);\r\n        name = cube.getName();\r\n        volume = round(cube.volume(), 2);\r\n        surfaceArea = round(cube.surfaceArea(), 2);\r\n        System.out.println(\"Cube '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n    }\r\n\r\n    public static double round(double value, int places) {\r\n        if (places < 0) throw new IllegalArgumentException();\r\n\r\n        long factor = (long) Math.pow(10, places);\r\n        value = value * factor;\r\n        long tmp = Math.round(value);\r\n        return (double) tmp / factor;\r\n    }\r\n}","n":0.04},"2":{"v":"/codehs/java/9/6/fun-with-solids.html","n":1}}},{"i":218,"$":{"0":{"v":"9.6.8 Library Books","n":0.577},"1":{"v":"9.6.8 Library Bookspublic class Novel extends Book\r\n            {\r\n                private String genre;\r\n                private int pages;\r\n                \r\n                public Novel(String title, String author, \r\n                            String genre, int pages) {\r\n                                super(title, author);\r\n                                this.genre = genre;\r\n                                this.pages = pages;\r\n                            }\r\n                            public void setGenre(String genre) {\r\n                this.genre = genre;\r\n            }\r\n            public String getGenre() {\r\n                return this.genre;\r\n            }\r\n            \r\n            public void setPages(int pages) {\r\n                this.pages = pages;\r\n            }\r\n            public int getPages() {\r\n                return this.pages;\r\n            }\r\n            }public class Book\r\n            {\r\n            \r\n                private String title;\r\n                private String author;\r\n                \r\n                public Book(String title, String author) {\r\n                    this.title = title;\r\n                    this.author = author;\r\n                }\r\n                \r\n                public void setTitle(String title) {\r\n                this.title = title;\r\n            }\r\n            public String getTitle() {\r\n                return this.title;\r\n            }\r\n            \r\n            public void setAuthor(String author) {\r\n                this.author = author;\r\n            }\r\n            public String getAuthor() {\r\n                return this.author;\r\n            }\r\n            }public class TextBook extends Book\r\n{\r\n    private String subject;\r\n    private String edition;\r\n    \r\n    public TextBook(String title, String author, \r\n                String subject, String edition) {\r\n                    super(title, author);\r\n                    this.subject = subject;\r\n                    this.edition = edition;\r\n                }\r\n                public void setSubject(String subject) {\r\n    this.subject = subject;\r\n}\r\npublic String getSubject() {\r\n    return this.subject;\r\n}\r\n\r\npublic void setEdition(String edition) {\r\n    this.edition = edition;\r\n}\r\npublic String getEdition() {\r\n    return this.edition;\r\n}\r\n\r\n}import java.util.ArrayList;\r\n\r\npublic class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Book> books = new ArrayList<Book>();\r\n        \r\n        books.add(new TextBook(\"Genetics\", \"Some Old Dude\", \"Biology\", \"3rd\"));\r\n        books.add(new TextBook(\"The Golden Ratio: A Historical Look\", \"Some Other Old Dude\", \"Maths\", \"1st\"));\r\n        \r\n        books.add(new Novel(\"Harry Potter\", \"J.K. Rowling\", \"Fantasy\", 300));\r\n        books.add(new Novel(\"Lord of the Rings\", \"J.R.R. Tolkien\", \"Fantasy\", 1000));\r\n        \r\n        \r\n        for(Book book : books) {\r\n            System.out.println(book.getTitle());\r\n            System.out.println(book.getAuthor());\r\n            System.out.println(book.toString());\r\n        }\r\n    }\r\n}","n":0.064},"2":{"v":"/codehs/java/9/6/library-books.html","n":1}}},{"i":219,"$":{"0":{"v":"9.6.6 Which Team?","n":0.577},"1":{"v":"9.6.6 Which Team?public class Team {\r\n\r\n                private String name;\r\n                private String location;\r\n                private int wins;\r\n                private int losses;\r\n            \r\n                public Team(String name, String location, int wins, int losses) {\r\n                    this.name = name;\r\n                    this.location = location;\r\n                    this.wins = wins;\r\n                    this.losses = losses;\r\n                }\r\n            \r\n                public String getName() {\r\n                    return name;\r\n                }\r\n            \r\n                public void setName(String name) {\r\n                    this.name = name;\r\n                }\r\n            \r\n                public String getLocation() {\r\n                    return location;\r\n                }\r\n            \r\n                public void setLocation(String location) {\r\n                    this.location = location;\r\n                }\r\n            \r\n                public int getWins() {\r\n                    return wins;\r\n                }\r\n            \r\n                public void setWins(int wins) {\r\n                    this.wins = wins;\r\n                }\r\n            \r\n                public int getLosses() {\r\n                    return losses;\r\n                }\r\n            \r\n                public void setLosses(int losses) {\r\n                    this.losses = losses;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return wins + \" - \" + losses;\r\n                }\r\n            }public class BaseballTeam extends Team {\r\n\r\n                private String league;\r\n            \r\n                public BaseballTeam(String name, String location,\r\n                                int wins, int losses, String league) {\r\n                    super(name, location, wins, losses);\r\n                    this.league = league;\r\n                }\r\n            \r\n                public String getLeague() {\r\n                    return league;\r\n                }\r\n            \r\n                public void setLeague(String league) {\r\n                    this.league = league;\r\n                }\r\n            \r\n            }public  class FootballTeam extends Team {\r\n\r\n                private int ties;\r\n            \r\n            \r\n                public FootballTeam(String name, String location,\r\n                                int wins, int losses, int ties) {\r\n                    super(name, location, wins, losses);\r\n                    this.ties = ties;\r\n                }\r\n            \r\n                public int getTies() {\r\n                    return ties;\r\n                }\r\n            \r\n                public void setTies(int ties) {\r\n                    this.ties = ties;\r\n                }\r\n            \r\n                @Override\r\n                public String toString(){\r\n                    return super.getWins() + \" - \" + super.getLosses() + \" - \" + ties;\r\n                }\r\n            }public  class TeamTester {\r\n\r\n                public static void main(String[] args) {\r\n                    FootballTeam dolphins = new FootballTeam(\"Dolphins\", \"Miami\", 8, 4, 1);\r\n                    Team cubs = new BaseballTeam(\"Cubs\", \"Chicago\", 80, 65, \"National\");\r\n                    Team lizards = new Team(\"Lizards\", \"New York\", 9, 5);\r\n            \r\n                    //Print out all available information for the Dolphins\r\n                    System.out.println(dolphins.getName());\r\n                    System.out.println(dolphins.getLocation());\r\n                    System.out.println(dolphins.getWins());\r\n                    System.out.println(dolphins.getLosses());\r\n                    System.out.println(dolphins.getTies());\r\n                    System.out.println(dolphins.toString());\r\n            \r\n                    //Print out all available information for the Cubs\r\n                    System.out.println(cubs.getName());\r\n                    System.out.println(cubs.getLocation());\r\n                    System.out.println(cubs.getWins());\r\n                    System.out.println(cubs.getLosses());\r\n                    System.out.println(cubs.toString());\r\n            \r\n                    //Print out all available information for the Lizards\r\n                    System.out.println(lizards.getName());\r\n                    System.out.println(lizards.getLocation());\r\n                    System.out.println(lizards.getWins());\r\n                    System.out.println(lizards.getLosses());\r\n                    System.out.println(lizards.toString());\r\n            \r\n                }\r\n            }","n":0.055},"2":{"v":"/codehs/java/9/6/which-team.html","n":1}}},{"i":220,"$":{"0":{"v":"9.7.9 2D Array Tester","n":0.5},"1":{"v":"9.7.9 2D Array Testerpublic class TwoDTester {\r\n\r\n                public static void main(String[] args) {\r\n            \r\n            \r\n                    Integer[][] firstArray = {{2,3}, {3,4}, {4,5}};\r\n                    Integer[][] secondArray = {{2,3}, {3,4}, {4,5}};\r\n                    TwoDArray first = new TwoDArray(firstArray);\r\n                    \r\n                    System.out.println(first.equals(secondArray));\r\n                    \r\n                    String[][] thirdArray = {{\"Hello\", \"Goodbye\"}, \r\n                                             {\"Hola\", \"Adios\"},\r\n                                             {\"Bonjour\", \"Au revoir\"}};\r\n                    String[][] fourthArray = {{\"Hello\", \"Goodbye\"}, \r\n                                             {\"Ciao\", \"Addio\"},\r\n                                             {\"Bonjour\", \"Au revoir\"}};\r\n                    TwoDArray third = new TwoDArray(thirdArray);\r\n                    \r\n                    System.out.println(third.equals(fourthArray));\r\n                }\r\n            \r\n            }public class TwoDArray {\r\n\r\n                private Object[][] myArray;\r\n            \r\n                public TwoDArray(Object[][] input){\r\n                    myArray = input;\r\n                }\r\n            \r\n                public boolean equals(Object[][] other){\r\n            \r\n                    for(int i = 0; i < myArray.length; i++) {\r\n                        int rowLength = myArray[i].length;\r\n                        for(int j = 0; j < rowLength; j++) {\r\n                            if(!myArray[i][j].equals(other[i][j])) return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            \r\n            }","n":0.092},"2":{"v":"/codehs/java/9/7/2d-array-tester.html","n":1}}},{"i":221,"$":{"0":{"v":"9.7.8 Equal Rectangles","n":0.577},"1":{"v":"9.7.8 Equal Rectanglespublic class Rectangle{\r\n\r\n                private int width;\r\n                private int height;\r\n                 \r\n                public Rectangle(int width, int height) {\r\n                  this.width = width;\r\n                  this.height = height;\r\n                }\r\n                \r\n                public boolean equals(Rectangle other) {\r\n                    return toString().equals(other.toString());\r\n                }\r\n                \r\n                public String toString() {\r\n                    return \"A rectangle with a width of \" + width + \" and a height of \" + height;\r\n                }\r\n                \r\n               \r\n            }public class RectangleTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rectangle rect1 = new Rectangle(5, 4);\r\n        Rectangle rect2 = new Rectangle(5, 4);\r\n        Rectangle rect3 = new Rectangle(10, 4);\r\n        \r\n        // Print all three rectangles\r\n        System.out.println(rect1);\r\n        System.out.println(rect2);\r\n        System.out.println(rect3);\r\n        \r\n        // Print one true statement comparing rectangles\r\n        System.out.println(rect1.equals(rect3));\r\n        // Print one false statment comparing rectangles\r\n        System.out.println(rect1.equals(rect2));\r\n    }\r\n}","n":0.093},"2":{"v":"/codehs/java/9/7/equal-rectangles.html","n":1}}},{"i":222,"$":{"0":{"v":"9.7.6 Equal?","n":0.707},"1":{"v":"9.7.6 Equal?public class Ball\r\n            {\r\n               private String color;\r\n               \r\n               public Ball(String color){\r\n                   this.color = color;\r\n               }\r\n               \r\n                public String getColor(){\r\n                   return color;\r\n               }\r\n            }public class TestEquals\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(\"** Object **\");\r\n        Object obj1 = new Object();\r\n        Object obj2 = new Object();\r\n        Object obj3 = obj1;\r\n        \r\n        // Print out all three objects\r\n        System.out.println(obj1);\r\n        System.out.println(obj2);\r\n        System.out.println(obj3);\r\n        \r\n        // Print a true statement using 2 objects and ==\r\n        System.out.println(obj1 == obj3);\r\n        \r\n        // Print a false statement using 2 objects and ==\r\n        System.out.println(obj1 == obj2);\r\n        \r\n        // Print a true statement using 2 objects and .equals()\r\n        System.out.println(obj1.equals(obj3));\r\n        \r\n        // Print a false statement using 2 objects and .equals()\r\n        System.out.println(obj1.equals(obj2));\r\n        \r\n        System.out.println(\"** Ball **\");\r\n        \r\n        \r\n        Ball ball1 = new Ball(\"Red\");\r\n        Ball ball2 = new Ball(\"Red\");\r\n        Ball ball3 = ball1;\r\n        \r\n        // Print out all three objects\r\n        System.out.println(ball1);\r\n        System.out.println(ball2);\r\n        System.out.println(ball3);\r\n        \r\n         // Print a true statement using 2 objects and ==\r\n        System.out.println(ball1 == ball3);\r\n        \r\n        // Print a false statement using 2 objects and ==\r\n        System.out.println(ball1 == ball2);\r\n        \r\n        // Print a true statement using 2 objects and .equals()\r\n        System.out.println(ball1.equals(ball3));\r\n        \r\n        // Print a false statement using 2 objects and .equals()\r\n        System.out.println(ball1.equals(ball2));\r\n\r\n    }\r\n}","n":0.072},"2":{"v":"/codehs/java/9/7/equal.html","n":1}}},{"i":223,"$":{"0":{"v":"9.7.7 Equals? - Part 2","n":0.447},"1":{"v":"9.7.7 Equals? - Part 2public class Ball\r\n            {\r\n               private String color;\r\n               \r\n               public Ball(String color){\r\n                   this.color = color;\r\n               }\r\n               \r\n               public String getColor(){\r\n                   return color;\r\n               }\r\n               \r\n               public boolean equals(Ball other) {\r\n                   return color.equals(other.getColor());\r\n               }\r\n               \r\n               public String toString() {\r\n                    return \"Color: \" + color;\r\n               }\r\n               \r\n               \r\n            }public class TestEquals\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"** Object **\");\r\n                    Object obj1 = new Object();\r\n                    Object obj2 = new Object();\r\n                    Object obj3 = obj1;\r\n                    \r\n                    // Print out all three objects\r\n                    System.out.println(obj1);\r\n                    System.out.println(obj2);\r\n                    System.out.println(obj3);\r\n                    \r\n                    // Print a true statement using 2 objects and ==\r\n                    System.out.println(obj1 == obj3);\r\n                    \r\n                    // Print a false statement using 2 objects and ==\r\n                    System.out.println(obj1 == obj2);\r\n                    \r\n                    // Print a true statement using 2 objects and .equals()\r\n                    System.out.println(obj1.equals(obj3));\r\n                    \r\n                    // Print a false statement using 2 objects and .equals()\r\n                    System.out.println(obj1.equals(obj2));\r\n                    \r\n                    System.out.println(\"** Ball **\");\r\n                    \r\n                    \r\n                    Ball ball1 = new Ball(\"Red\");\r\n                    Ball ball2 = new Ball(\"Red\");\r\n                    Ball ball3 = ball1;\r\n                    \r\n                    // Print out all three objects\r\n                    System.out.println(ball1);\r\n                    System.out.println(ball2);\r\n                    System.out.println(ball3);\r\n                    \r\n                     // Print a true statement using 2 objects and ==\r\n                    System.out.println(ball1 == ball3);\r\n                    \r\n                    // Print a false statement using 2 objects and ==\r\n                    System.out.println(ball1 == ball2);\r\n                    \r\n                    // Print a true statement using 2 objects and .equals()\r\n                    System.out.println(ball1.equals(ball3));\r\n                    \r\n                    // Print a false statement using 2 objects and .equals()\r\n                    System.out.println(ball1.equals(ball2));\r\n            \r\n                }\r\n            }","n":0.067},"2":{"v":"/codehs/java/9/7/equals-part-2.html","n":1}}},{"i":224,"$":{"0":{"v":"CodeHS: Java","n":0.707},"1":{"v":"CodeHS: JavaBelow are all Java CodeHS lessons on this site. Only exercises are included, so you won't see any videos, examples, or tests-- if you are confused by an example, feel free to ask in the Discord!Primitive Types\r\n                \r\n                    \r\n                        \r\n                            \r\n                                1.2 Why Programming? Why Java?\r\n                            \r\n                            \r\n                                \r\n                                    1.2.5\r\n                                            Welcome Program\r\n                                \r\n                                \r\n                                    1.2.6\r\n                                            ASCII Art\r\n                                \r\n                                \r\n                                    1.2.7\r\n                                            Fixing a Paragraph\r\n                                \r\n                                \r\n                                    1.2.8\r\n                                            Making Popcorn\r\n                                \r\n                                \r\n                                    1.2.9\r\n                                            Personal Timeline\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.3 Variables and Data Types\r\n                            \r\n                            \r\n                                \r\n                                    1.3.5\r\n                                            Our First Integer\r\n                                \r\n                                \r\n                                    1.3.8\r\n                                            Answering Questions\r\n                                \r\n                                \r\n                                    1.3.9\r\n                                            Team Rankings\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.4 Expressions and Assignments Statements\r\n                            \r\n                            \r\n                                \r\n                                    1.4.6\r\n                                            Weight of a Pyramid\r\n                                \r\n                                \r\n                                    1.4.7\r\n                                            Add Fractions\r\n                                \r\n                                \r\n                                    1.4.8\r\n                                            Freely Falling Bodies\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.5 Compound Assignment Operators\r\n                            \r\n                            \r\n                                \r\n                                    1.5.5\r\n                                            Work Shift\r\n                                \r\n                                \r\n                                    1.5.6\r\n                                            My Age\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.6 User Input\r\n                            \r\n                            \r\n                                \r\n                                    1.6.4\r\n                                            My Age (User Input)\r\n                                \r\n                                \r\n                                    1.6.5 Night\r\n                                            Out\r\n                                \r\n                                \r\n                                    1.6.6\r\n                                            MLA Citation\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.7 Casting and Ranges of Variables\r\n                            \r\n                            \r\n                                \r\n                                    1.7.4\r\n                                            Casting to an Int\r\n                                \r\n                                \r\n                                    1.7.5\r\n                                            Casting to a Double\r\n                                \r\n                                \r\n                                    1.7.8\r\n                                            Movie Ratings\r\n                                \r\n                                \r\n                                    1.7.11\r\n                                            Integer Overflow\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Using Objects\r\n                \r\n                    \r\n                        \r\n                            \r\n                                2.1 Objects: Instances of Classes\r\n                            \r\n                            \r\n                                \r\n                                    2.1.8\r\n                                            Pizza Instance Variables\r\n                                \r\n                                \r\n                                    2.1.9\r\n                                            Phone Skeleton\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.2 Creating and Storing Objects (Instantiation)\r\n                            \r\n                            \r\n                                \r\n                                    2.2.6\r\n                                            Using the Rectangle Class\r\n                                \r\n                                \r\n                                    2.2.7\r\n                                            Student GPA Field\r\n                                \r\n                                \r\n                                    2.2.8\r\n                                            Instance Variables for Your Dog\r\n                                \r\n                                \r\n                                    2.2.9\r\n                                            Pizza Time!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.3 Overloading\r\n                            \r\n                            \r\n                                \r\n                                    2.3.7\r\n                                            Plain Coffee\r\n                                \r\n                                \r\n                                    2.3.8\r\n                                            Custom Pinatas\r\n                                \r\n                                \r\n                                    2.3.9\r\n                                            Website Class\r\n                                \r\n                                \r\n                                    2.3.10\r\n                                            Empty References\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.4 Calling a Void Method\r\n                            \r\n                            \r\n                                \r\n                                    2.4.5\r\n                                            Hello!\r\n                                \r\n                                \r\n                                    2.4.6\r\n                                            Loose Change\r\n                                \r\n                                \r\n                                    2.4.7\r\n                                            Chat Bot\r\n                                \r\n                                \r\n                                    2.4.8\r\n                                            Greetings and Salutations\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.5 Calling a Void Method with Parameters\r\n                            \r\n                            \r\n                                \r\n                                    2.5.5\r\n                                            Using the Point Class\r\n                                \r\n                                \r\n                                    2.5.7\r\n                                            Basketball Players\r\n                                \r\n                                \r\n                                    2.5.8\r\n                                            More Operations\r\n                                \r\n                                \r\n                                    2.5.9\r\n                                            Chat Bot 2.0\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.6 Calling a Non-void Method\r\n                            \r\n                            \r\n                                \r\n                                    2.6.6\r\n                                            Number Games\r\n                                \r\n                                \r\n                                    2.6.7\r\n                                            Construction Costs\r\n                                \r\n                                \r\n                                    2.6.8\r\n                                            How Far Away is ...?\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.7 String Objects\r\n                            \r\n                            \r\n                                \r\n                                    2.7.7\r\n                                            Pretty Printing Operations\r\n                                \r\n                                \r\n                                    2.7.8\r\n                                            Full Name\r\n                                \r\n                                \r\n                                    2.7.9\r\n                                            QuoteMachine\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.8 String Methods\r\n                            \r\n                            \r\n                                \r\n                                    2.8.6\r\n                                            Speaking\r\n                                \r\n                                \r\n                                    2.8.7\r\n                                            toString for Flowers\r\n                                \r\n                                \r\n                                    2.8.8\r\n                                            Organizing Files\r\n                                \r\n                                \r\n                                    2.8.9\r\n                                            Concatenating Fractions\r\n                                \r\n                                \r\n                                    2.8.10\r\n                                            Word Games\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.9 Wrapper Classes: Integers and Doubles\r\n                            \r\n                            \r\n                                \r\n                                    2.9.6\r\n                                            Order Up!\r\n                                \r\n                                \r\n                                    2.9.7\r\n                                            Currency\r\n                                \r\n                                \r\n                                    2.9.8\r\n                                            Guess the number!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.10 Using the Math Class\r\n                            \r\n                            \r\n                                \r\n                                    2.10.6\r\n                                            Circle Area\r\n                                \r\n                                \r\n                                    2.10.7\r\n                                            The Unit Circle\r\n                                \r\n                                \r\n                                    2.10.8\r\n                                            Racing\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Boolean Expressions and if Statements\r\n                \r\n                    \r\n                        \r\n                            \r\n                                3.1 Boolean Expressions\r\n                            \r\n                            \r\n                                \r\n                                    3.1.6\r\n                                            Number Order\r\n                                \r\n                                \r\n                                    3.1.7\r\n                                            Sugar Tax\r\n                                \r\n                                \r\n                                    3.1.8\r\n                                            Triple Double\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.2 if Statements and Control Flow\r\n                            \r\n                            \r\n                                \r\n                                    3.2.6\r\n                                            Discounts\r\n                                \r\n                                \r\n                                    3.2.7\r\n                                            Sweet or Unsweet?\r\n                                \r\n                                \r\n                                    3.2.8\r\n                                            Cooking\r\n                                \r\n                                \r\n                                    3.2.9\r\n                                            Rating\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.3 if-else Statements\r\n                            \r\n                            \r\n                                \r\n                                    3.3.5\r\n                                            Positive or Negative\r\n                                \r\n                                \r\n                                    3.3.6\r\n                                            Battleships Move\r\n                                \r\n                                \r\n                                    3.3.7\r\n                                            Ratings\r\n                                \r\n                                \r\n                                    3.3.8\r\n                                            Player Score\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.4 else if Statements\r\n                            \r\n                            \r\n                                \r\n                                    3.4.6\r\n                                            Positive, Negative, or Zero\r\n                                \r\n                                \r\n                                    3.4.7\r\n                                            Salmon Spawn\r\n                                \r\n                                \r\n                                    3.4.8\r\n                                            Berries\r\n                                \r\n                                \r\n                                    3.4.9\r\n                                            Battleships\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.5 Compound Boolean Expressions\r\n                            \r\n                            \r\n                                \r\n                                    3.5.6\r\n                                            Roller Coaster\r\n                                \r\n                                \r\n                                    3.5.7\r\n                                            Compound Roller Coaster\r\n                                \r\n                                \r\n                                    3.5.8\r\n                                            Divisibility\r\n                                \r\n                                \r\n                                    3.5.9\r\n                                            Find the Minimum\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.6 Equivalent Boolean Expressions\r\n                            \r\n                            \r\n                                \r\n                                    3.6.5\r\n                                            Amusement Park\r\n                                \r\n                                \r\n                                    3.6.6\r\n                                            Odd Numbers\r\n                                \r\n                                \r\n                                    3.6.7\r\n                                            Odd and Even\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.7 Comparing Objects\r\n                            \r\n                            \r\n                                \r\n                                    3.7.7\r\n                                            String Variable Trace\r\n                                \r\n                                \r\n                                    3.7.9\r\n                                            Three Strings\r\n                                \r\n                                \r\n                                    3.7.10\r\n                                            Comparing Circles\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Iteration\r\n                \r\n                    \r\n                        \r\n                            \r\n                                4.1 While Loops\r\n                            \r\n                            \r\n                                \r\n                                    4.1.6 Making\r\n                                            Taffy\r\n                                \r\n                                \r\n                                    4.1.7\r\n                                            Guess the Number\r\n                                \r\n                                \r\n                                    4.1.8\r\n                                            Divisibility\r\n                                \r\n                                \r\n                                    4.1.9\r\n                                            Max and Min Values\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.2 For Loops\r\n                            \r\n                            \r\n                                \r\n                                    4.2.6 Print\r\n                                            the Odds\r\n                                \r\n                                \r\n                                    4.2.7\r\n                                            Repeat 100 Times\r\n                                \r\n                                \r\n                                    4.2.8\r\n                                            Replace WHILE with FOR Loop\r\n                                \r\n                                \r\n                                    4.2.9\r\n                                            Replace FOR Loop with WHILE Loop\r\n                                \r\n                                \r\n                                    4.2.10\r\n                                            Multiplication Table\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.3 Developing Algorithms Using Strings\r\n                            \r\n                            \r\n                                \r\n                                    4.3.6\r\n                                            Replace Letter\r\n                                \r\n                                \r\n                                    4.3.7\r\n                                            Password Checker\r\n                                \r\n                                \r\n                                    4.3.8\r\n                                            Finding Palindromes\r\n                                \r\n                                \r\n                                    4.3.9\r\n                                            Fixing Grammar\r\n                                \r\n                                \r\n                                    4.3.10\r\n                                            Teen Talk\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.4 Nested Iteration\r\n                            \r\n                            \r\n                                \r\n                                    4.4.6\r\n                                            Upright Number Triangle\r\n                                \r\n                                \r\n                                    4.4.7\r\n                                            Make a Tree\r\n                                \r\n                                \r\n                                    4.4.8\r\n                                            Multiplication Table\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.5 Informal Code Analysis\r\n                            \r\n                            \r\n                                \r\n                                    4.5.7\r\n                                            Improving isChar Speed\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Writing Classes\r\n                \r\n                    \r\n                        \r\n                            \r\n                                5.1 Anatomy of Classes\r\n                            \r\n                            \r\n                                \r\n                                    5.1.4\r\n                                            Access for DNA Class\r\n                                \r\n                                \r\n                                    5.1.5\r\n                                            Access for Employee Class\r\n                                \r\n                                \r\n                                    5.1.6\r\n                                            Fixing Circle\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.2 Constructors\r\n                            \r\n                            \r\n                                \r\n                                    5.2.5\r\n                                            Batting Average\r\n                                \r\n                                \r\n                                    5.2.6 Dog\r\n                                            Class\r\n                                \r\n                                \r\n                                    5.2.7\r\n                                            Student Overload\r\n                                \r\n                                \r\n                                    5.2.8\r\n                                            SchoolClub Class\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.3 Documentation with Comments\r\n                            \r\n                            \r\n                                \r\n                                    5.3.5\r\n                                            Commenting Activity Tracker\r\n                                \r\n                                \r\n                                    5.3.6\r\n                                            Commenting Activity Log\r\n                                \r\n                                \r\n                                    5.3.7\r\n                                            C.Y.O.A. Layout\r\n                                \r\n                                \r\n                                    5.3.8\r\n                                            C.Y.O.A. Finishing the story\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.4 Accessor Methods\r\n                            \r\n                            \r\n                                \r\n                                    5.4.5\r\n                                            Text Messages Getter Methods\r\n                                \r\n                                \r\n                                    5.4.6\r\n                                            Full Dragon Class\r\n                                \r\n                                \r\n                                    5.4.7\r\n                                            A Different Dragon Class\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.5 Mutator Methods\r\n                            \r\n                            \r\n                                \r\n                                    5.5.5\r\n                                            Rectangle class\r\n                                \r\n                                \r\n                                    5.5.6\r\n                                            Full Fraction Class\r\n                                \r\n                                \r\n                                    5.5.7\r\n                                            Weekly Routine\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.6 Writing Classes\r\n                            \r\n                            \r\n                                \r\n                                    5.6.5\r\n                                            Distance Conversions\r\n                                \r\n                                \r\n                                    5.6.6\r\n                                            Food App Demo\r\n                                \r\n                                \r\n                                    5.6.7\r\n                                            Car Class\r\n                                \r\n                                \r\n                                    5.6.8\r\n                                        Open Response: Combination Lock FRQ\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.7 Static Variables and Methods\r\n                            \r\n                            \r\n                                \r\n                                    5.7.5\r\n                                            Randomizer Class\r\n                                \r\n                                \r\n                                    5.7.6\r\n                                            Rock, Paper, Scissors!\r\n                                \r\n                                \r\n                                    5.7.7\r\n                                            How Many Players in the Game?\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.8 Scope and Access\r\n                            \r\n                            \r\n                                \r\n                                    5.8.7\r\n                                            Scope\r\n                                \r\n                                \r\n                                    5.8.8\r\n                                            Which Variables Exist?\r\n                                \r\n                                \r\n                                    5.8.9\r\n                                            Broken Calculator\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.9 this Keyword\r\n                            \r\n                            \r\n                                \r\n                                    5.9.5\r\n                                            Write Your Own CodeHS\r\n                                \r\n                                \r\n                                    5.9.6\r\n                                            Song Class\r\n                                \r\n                                \r\n                                    5.9.7\r\n                                            Fraction Math\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Array\r\n                \r\n                    \r\n                        \r\n                            \r\n                                6.1 Array Creation and Access\r\n                            \r\n                            \r\n                                \r\n                                    6.1.6\r\n                                            Our First Array\r\n                                \r\n                                \r\n                                    6.1.7\r\n                                            Set Scores\r\n                                \r\n                                \r\n                                    6.1.8\r\n                                            Last Element in Array\r\n                                \r\n                                \r\n                                    6.1.9\r\n                                            Snap Shot Splash Screen\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                6.2 Traversing Arrays\r\n                            \r\n                            \r\n                                \r\n                                    6.2.7 Print\r\n                                            Array\r\n                                \r\n                                \r\n                                    6.2.8\r\n                                            Print Odd Array Indices\r\n                                \r\n                                \r\n                                    6.2.9\r\n                                            Find Index of a String\r\n                                \r\n                                \r\n                                    6.2.10\r\n                                            Fibonacci Sequence\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                6.3 Enhanced for Loop for Arrays\r\n                            \r\n                            \r\n                                \r\n                                    6.3.6\r\n                                            Print Odds\r\n                                \r\n                                \r\n                                    6.3.7\r\n                                            Largest Value\r\n                                \r\n                                \r\n                                    6.3.8\r\n                                            Classroom Array\r\n                                \r\n                                \r\n                                    6.3.9\r\n                                            Array Average\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                6.4 Developing Algorithms Using Arrays\r\n                            \r\n                            \r\n                                \r\n                                    6.4.6\r\n                                            Find the Median\r\n                                \r\n                                \r\n                                    6.4.7\r\n                                            Find the Last Multiple of 3\r\n                                \r\n                                \r\n                                    6.4.8\r\n                                            Most Improved\r\n                                \r\n                                \r\n                                    6.4.9\r\n                                            Car Showroom\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                ArrayList\r\n                \r\n                    \r\n                        \r\n                            \r\n                                7.1 Introduction to ArrayList\r\n                            \r\n                            \r\n                                \r\n                                    7.1.7\r\n                                            Initializing an ArrayList\r\n                                \r\n                                \r\n                                    7.1.8\r\n                                            Car Inventory\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.2 ArrayList Methods\r\n                            \r\n                            \r\n                                \r\n                                    7.2.6\r\n                                            Get First Element\r\n                                \r\n                                \r\n                                    7.2.7\r\n                                            ArrayList of Even Numbers\r\n                                \r\n                                \r\n                                    7.2.8\r\n                                            Teacher Class List\r\n                                \r\n                                \r\n                                    7.2.9\r\n                                            Teacher Class List Methods\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.3 Traversing ArrayLists\r\n                            \r\n                            \r\n                                \r\n                                    7.3.6\r\n                                            Traversing Odds\r\n                                \r\n                                \r\n                                    7.3.8\r\n                                            ArrayList Helper Methods\r\n                                \r\n                                \r\n                                    7.3.9\r\n                                            Road Trip!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.4 Developing Algorithms using ArrayLists\r\n                            \r\n                            \r\n                                \r\n                                    7.4.6\r\n                                            ArrayList equals\r\n                                \r\n                                \r\n                                    7.4.7\r\n                                            Airline Tickets\r\n                                \r\n                                \r\n                                    7.4.8\r\n                                            Billboard Top 10\r\n                                \r\n                                \r\n                                    7.4.9\r\n                                            User Data Cleanup\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.5 Searching\r\n                            \r\n                            \r\n                                \r\n                                    7.5.6\r\n                                            Linear Search on ArrayList with While Loop\r\n                                \r\n                                \r\n                                    7.5.7\r\n                                            Fantasy Football Roster\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.6 Sorting\r\n                            \r\n                            \r\n                                \r\n                                    7.6.4\r\n                                            Explore Selection Sort\r\n                                \r\n                                \r\n                                    7.6.9\r\n                                            Explore Insertion Sort\r\n                                \r\n                                \r\n                                    7.6.10\r\n                                            Selection Sort vs. Insertion Sort Run Time\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                2D Array\r\n                \r\n                    \r\n                        \r\n                            \r\n                                8.1 2D Arrays\r\n                            \r\n                            \r\n                                \r\n                                    8.1.5\r\n                                            Manipulating 2D Arrays\r\n                                \r\n                                \r\n                                    8.1.6\r\n                                            Complete Chessboard\r\n                                \r\n                                \r\n                                    8.1.7 Tic\r\n                                            Tac Toe Board\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                8.2 Traversing 2D Arrays\r\n                            \r\n                            \r\n                                \r\n                                    8.2.7\r\n                                            Sum Rows in a 2D Array\r\n                                \r\n                                \r\n                                    8.2.8\r\n                                            Tic Tac Toe Methods\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Inheritance\r\n                \r\n                    \r\n                        \r\n                            \r\n                                9.1 Creating Superclasses and Subclasses\r\n                            \r\n                            \r\n                                \r\n                                    9.1.6\r\n                                            Person / Student Object\r\n                                \r\n                                \r\n                                    9.1.7\r\n                                            Books\r\n                                \r\n                                \r\n                                    9.1.8\r\n                                            Computers\r\n                                \r\n                                \r\n                                    9.1.9\r\n                                            More Animals!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.2 Writing Constructors for Subclasses\r\n                            \r\n                            \r\n                                \r\n                                    9.2.6\r\n                                            Students\r\n                                \r\n                                \r\n                                    9.2.7\r\n                                            Instruments\r\n                                \r\n                                \r\n                                    9.2.8\r\n                                            Foods\r\n                                \r\n                                \r\n                                    9.2.9\r\n                                            Clothing Store\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.3 Overriding Methods\r\n                            \r\n                            \r\n                                \r\n                                    9.3.6\r\n                                            Dogs Bark\r\n                                \r\n                                \r\n                                    9.3.7\r\n                                            Electric Cars\r\n                                \r\n                                \r\n                                    9.3.8\r\n                                            Online Companies\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.4 super Keyword\r\n                            \r\n                            \r\n                                \r\n                                    9.4.6\r\n                                            Squares\r\n                                \r\n                                \r\n                                    9.4.7\r\n                                            Bank Accounts\r\n                                \r\n                                \r\n                                    9.4.8\r\n                                            Employees\r\n                                \r\n                                \r\n                                    9.4.9\r\n                                            Student Test Scores\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.5 Creating References Using Inheritance\r\n                            \r\n                            \r\n                                \r\n                                    9.5.6\r\n                                            Pies\r\n                                \r\n                                \r\n                                    9.5.7\r\n                                            Creating .equals\r\n                                \r\n                                \r\n                                    9.5.8\r\n                                            Online Companies Revisited\r\n                                \r\n                                \r\n                                    9.5.9\r\n                                            Assignments\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.6 Polymorphism\r\n                            \r\n                            \r\n                                \r\n                                    9.6.6 Which\r\n                                            Team?\r\n                                \r\n                                \r\n                                    9.6.7 Cars\r\n                                \r\n                                \r\n                                    9.6.8\r\n                                            Library Books\r\n                                \r\n                                \r\n                                    9.6.9\r\n                                            Fun with Solids\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.7 Object Superclass\r\n                            \r\n                            \r\n                                \r\n                                    9.7.6\r\n                                            Equal?\r\n                                \r\n                                \r\n                                    9.7.7\r\n                                            Equals? - Part 2\r\n                                \r\n                                \r\n                                    9.7.8\r\n                                            Equal Rectangles\r\n                                \r\n                                \r\n                                    9.7.9\r\n                                            2D Array Tester\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Recursion\r\n                \r\n                    \r\n                        \r\n                            \r\n                                10.1 Recursion\r\n                            \r\n                            \r\n                                \r\n                                    10.1.6\r\n                                            Factorial\r\n                                \r\n                                \r\n                                    10.1.7\r\n                                            Countdown!\r\n                                \r\n                                \r\n                                    10.1.8\r\n                                            Recursive Minimum\r\n                                \r\n                                \r\n                                    10.1.9\r\n                                            Bacteria Cultures\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                10.2 Recursive Searching\r\n                            \r\n                            \r\n                                \r\n                                    10.2.6\r\n                                            Exploring Binary Searches\r\n                                \r\n                                \r\n                                    10.2.7\r\n                                            Comparing Binary Search and Linear Search\r\n                                \r\n                                \r\n                                    10.2.8\r\n                                            Maximum Iterations\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                10.3 Recursive Sorting\r\n                            \r\n                            \r\n                                \r\n                                    10.3.6\r\n                                            Explore Merge Sort\r\n                                \r\n                                \r\n                                    10.3.7\r\n                                            Merge Sort Benchmark Testing\r\n                                \r\n                                \r\n                                    10.3.8\r\n                                            Recursive Calls\r\n                                \r\n                                \r\n                                    10.3.9\r\n                                            Sort Benchmark Testing\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Additional Exercises\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Unit 3\r\n                            \r\n                            \r\n                                \r\n                                    Lesson\r\n                                            3.2 Constructions\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.2 Game Bonus\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.3 Comparing Doubles\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.4 Classifying the Rich\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.4 Mesozoic Age\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.5 Salmon Season\r\n                                \r\n                                \r\n                                    Lesson 3.6\r\n                                            Used Car\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                Unit 4\r\n                            \r\n                            \r\n                                \r\n                                    Lesson\r\n                                            4.1 Find Digits\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.2 Factorial\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.2 Five Little Ducks\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.3 Fix the Sum\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.5 Values Held In Variables\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Introduction to Programming in Java with Karel the Dog\r\n                \r\n                    \r\n                        \r\n                            \r\n                                11.1 Introduction to Programming With Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.1.5\r\n                                            Your First Karel Program\r\n                                \r\n                                \r\n                                    11.1.6\r\n                                            Short Stack\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.2 More Basic Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.2.4\r\n                                            Make a Tower\r\n                                \r\n                                \r\n                                    11.2.5\r\n                                            Pyramid of Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.3 Java Programs and the Run Method\r\n                            \r\n                            \r\n                                \r\n                                    11.3.4\r\n                                            Tower Karel\r\n                                \r\n                                \r\n                                    11.3.5\r\n                                            Gold Medal Karel\r\n                                \r\n                                \r\n                                    11.3.6\r\n                                            Maze Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.4 Karel Can't Turn Right\r\n                            \r\n                            \r\n                                \r\n                                    11.4.4\r\n                                            Slide Karel\r\n                                \r\n                                \r\n                                    11.4.5\r\n                                            Fireman Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.5 Methods in Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.5.4\r\n                                            Planting Bushes\r\n                                \r\n                                \r\n                                    11.5.5\r\n                                            Mario Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.6 Top Down Design and Decomposition in Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.6.4\r\n                                            The Two Towers\r\n                                \r\n                                \r\n                                    11.6.5\r\n                                            Planting Flowers\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.7 Commenting Your Code\r\n                            \r\n                            \r\n                                \r\n                                    11.7.4\r\n                                            The Two Towers + Comments\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.8 Super Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.8.4\r\n                                            The Two Towers + SuperKarel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.9 For Loops\r\n                            \r\n                            \r\n                                \r\n                                    11.9.5\r\n                                            Marathon Karel\r\n                                \r\n                                \r\n                                    11.9.6\r\n                                            Take 'em All\r\n                                \r\n                                \r\n                                    11.9.7\r\n                                            Dizzy Karel\r\n                                \r\n                                \r\n                                    11.9.8\r\n                                            For Loop Square\r\n                                \r\n                                \r\n                                    11.9.9\r\n                                            Planting Flowers\r\n                                \r\n                                \r\n                                    11.9.10\r\n                                            Lots of Hurdles\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.10 While Loops in Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.10.4\r\n                                            Follow The Yellow Ball Road\r\n                                \r\n                                \r\n                                    11.10.5\r\n                                            Just Keep Spinning\r\n                                \r\n                                \r\n                                    11.10.6\r\n                                            Lay Row of Tennis Balls\r\n                                \r\n                                \r\n                                    11.10.7\r\n                                            Big Tower\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.11 If Statements\r\n                            \r\n                            \r\n                                \r\n                                    11.11.5\r\n                                            Is There a Ball?\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.12 If/Else Statements\r\n                            \r\n                            \r\n                                \r\n                                    11.12.4\r\n                                            Fix It Karel\r\n                                \r\n                                \r\n                                    11.12.5\r\n                                            Invert\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.13 Control Structures Example\r\n                            \r\n                            \r\n                                \r\n                                    11.13.4\r\n                                            Random Hurdles\r\n                                \r\n                                \r\n                                    11.13.5\r\n                                            Fix It Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.15 How to Indent Your Code\r\n                            \r\n                            \r\n                                \r\n                                    11.15.4\r\n                                            Diagonal\r\n                                \r\n                                \r\n                                    11.15.5\r\n                                            Staircase\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Extra Course Assignments\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Assignments\r\n                            \r\n                            \r\n                                \r\n                                    Dinner\r\n                                \r\n                                \r\n                                    Dance\r\n                                            Battle\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            -->","n":0.02},"2":{"v":"/codehs/java/","n":1}}},{"i":225,"$":{"0":{"v":"Battleship: The Grid Class","n":0.5},"1":{"v":"Battleship: The Grid ClassBTW\r\n            The GridTester class is ignored by the autograder. You can just leave it how it is!public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method can be called on your own grid. To add a ship\r\n    * we will go to the ships location and mark a true value\r\n    * in every location that the ship takes up.\r\n    */\r\n   public void addShip(Ship s) {\r\n       int i = s.getRow(), j = s.getCol(), marked = 0;\r\n       while(marked < s.getLength()) {\r\n           setShip(i, j, true);\r\n           if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n           else j++;\r\n           \r\n           marked++;\r\n       }\r\n   }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","n":0.026},"2":{"v":"/codehs/java/projects/battleship/adding-a-ship-to-the-grid.html","n":1}}},{"i":226,"$":{"0":{"v":"Battleship: Finishing the Game","n":0.5},"1":{"v":"Battleship: Finishing the Gamepublic class Battleship extends ConsoleProgram {\r\n    \r\n    \r\n                private static final int MAX_COL = 10;\r\n                private static final char MAX_ROW = 'J';\r\n            \r\n                private static final int HORIZONTAL = 0;\r\n                private static final int VERTICAL = 1;\r\n            \r\n                public void run() {\r\n            \r\n                    Player player = new Player();\r\n                    Player cpu = new Player();\r\n            \r\n                    setUpShips(player, cpu);\r\n            \r\n                    readLine(\"Hit enter to start guessing.\");\r\n            \r\n                    boolean gameOver = false;\r\n            \r\n                    while (!gameOver) gameOver = playRound(player, cpu);\r\n            \r\n                    if (player.hasWon()) System.out.println(\"You won!\");\r\n                    else System.out.println(\"You lost!\");\r\n            \r\n                    System.out.println(\"Thanks for playing!\");\r\n                }\r\n            \r\n                private void setUpShips(Player player, Player cpu) {\r\n                    System.out.println(\"Time to place your ships.\");\r\n                    //initializeShipsFromInput(player);\r\n            \r\n                    readLine(\"Hit enter for the enemy to choose their ship locations.\");\r\n            \r\n                    cpu.initializeShipsRandomly();\r\n            \r\n                    System.out.println(\"The enemy has placed their ships.\");\r\n                }\r\n            \r\n                public void initializeShipsFromInput(Player player) {\r\n                    for (int i = 0; i < player.NUM_SHIPS; i++) {\r\n                        readLine(\"Hit enter to place the next ship.\");\r\n                        System.out.println(\"Your current grid of ships.\");\r\n                        player.printMyShips();\r\n            \r\n                        int length = player.SHIP_LENGTHS[i];\r\n                        System.out.println(\"Now you need to place a ship of length \" + length);\r\n                        int row = readRow();\r\n                        int col = readCol();\r\n                        int dir = readDirection();\r\n            \r\n                        player.chooseShipLocation(new Ship(length), row, col, dir);\r\n                    }\r\n                    System.out.println(\"Your current grid of ships.\");\r\n                    player.printMyShips();\r\n                }\r\n            \r\n                private int readDirection() {\r\n                    while (true) {\r\n                        String dir = readLine(\"Horizontal or vertical? \");\r\n                        dir = dir.toUpperCase();\r\n            \r\n                        if (dir.length() > 0) {\r\n                            if (dir.charAt(0) == 'H') {\r\n                                return HORIZONTAL;\r\n                            } else if (dir.charAt(0) == 'V') {\r\n                                return VERTICAL;\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid direction, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readCol() {\r\n                    while (true) {\r\n                        int col = readInt(\"Which column? (1-\" + MAX_COL + \") \");\r\n                        if (col >= 1 && col <= MAX_COL) {\r\n                            return col - 1;\r\n                        }\r\n                        System.out.println(\"Invalid column, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readRow() {\r\n                    while (true) {\r\n                        String row = readLine(\"Which row? (A-\" + MAX_ROW + \") \");\r\n                        row = row.toUpperCase();\r\n                        if (row.length() > 0) {\r\n                            char ch = row.charAt(0);\r\n                            if (ch >= 'A' && ch <= MAX_ROW) {\r\n                                return ch - 'A';\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid row, please try again.\");\r\n                    }\r\n                }\r\n                private boolean playRound(Player player, Player cpu) {\r\n                    readLine(\"Hit enter for your turn.\");\r\n                    humanTurn(player, cpu);\r\n            \r\n                    if (player.hasWon()) {\r\n                        return true;\r\n                    }\r\n            \r\n                    readLine(\"Hit enter for the cpu turn.\");\r\n                    computerTurn(player, cpu);\r\n            \r\n                    return cpu.hasWon();\r\n                }\r\n            \r\n                private void computerTurn(Player player, Player cpu) {\r\n                    int row = cpu.getRandomRowGuess();\r\n                    int col = cpu.getRandomColGuess();\r\n                    System.out.println(\"Computer player guesses row \" + (row + 1) + \" and column \" + (col + 1));\r\n            \r\n                    boolean hit = cpu.makeGuess(row, col, player);\r\n            \r\n                    if (hit) {\r\n                        System.out.println(\"Computer hit!\");\r\n                    } else {\r\n                        System.out.println(\"Computer missed.\");\r\n                    }\r\n            \r\n                    cpu.printMyGuesses();\r\n                }\r\n            \r\n                private void humanTurn(Player player, Player cpu) {\r\n                    System.out.println(\"Enemy grid\");\r\n                    player.printMyGuesses();\r\n                    System.out.println(\"It's your turn to guess.\");\r\n                    int row = readRow();\r\n                    int col = readCol();\r\n            \r\n                    boolean hit = player.makeGuess(row, col, cpu);\r\n            \r\n                    if (hit) {\r\n                        System.out.println(\"You got a hit!\");\r\n                    } else {\r\n                        System.out.println(\"Nope, that was a miss.\");\r\n                    }\r\n            \r\n                    player.printMyGuesses();\r\n                }\r\n            }import java.util.*;\r\npublic class Player\r\n{\r\n    public static final int[] SHIP_LENGTHS = {2, 3, 3, 4, 5};\r\n    public static final int NUM_SHIPS = 5;\r\n    \r\n    private ArrayList<Ship> ships;\r\n    \r\n    private Grid selfGrid;\r\n    private Grid otherGrid;\r\n    \r\n    public Player() {\r\n        this.ships = new ArrayList<Ship>();\r\n        this.selfGrid = new Grid();\r\n        this.otherGrid = new Grid();\r\n    }\r\n    \r\n    public void chooseShipLocation(Ship s, int row, int col, int direction) {\r\n        if(ships.size() < 5) {\r\n            s.setDirection(direction);\r\n            s.setLocation(row, col);\r\n            selfGrid.addShip(s);\r\n            ships.add(s);\r\n        }\r\n    }\r\n    \r\n    public void initializeShipsRandomly() {\r\n        //chosen by fair dice roll\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[0]), 0, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[1]), 1, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[2]), 2, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[3]), 3, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[4]), 4, 0, 0);\r\n    }\r\n    \r\n    // Print your ships on the grid\r\n    public void printMyShips() {\r\n        selfGrid.printShips();\r\n    }\r\n    \r\n    // Print opponent guesses\r\n    public void printOpponentGuesses() {\r\n        selfGrid.printStatus();\r\n    }\r\n    \r\n    // Print your guesses\r\n    public void printMyGuesses() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    public int getRandomRowGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    public int getRandomColGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    \r\n    public boolean hasWon() {\r\n        int total = 0;\r\n        for(int i = 0; i < Grid.NUM_ROWS; i++) {\r\n            for(int j = 0; j < Grid.NUM_COLS; j++) {\r\n                if(otherGrid.getStatus(i, j) == Location.HIT) total++;\r\n            }\r\n        }\r\n        return total >= 17;\r\n    }\r\n    \r\n    public boolean makeGuess(int row, int col, Player other) {\r\n        boolean guessHit = other.recordOpponentGuess(row, col);\r\n        \r\n        if(guessHit) {\r\n            otherGrid.markHit(row, col);\r\n        } else {\r\n            otherGrid.markMiss(row, col);\r\n        }\r\n        \r\n        return guessHit;\r\n    }\r\n    \r\n    public void printHitsDelivered() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    // Record a guess from the opponent\r\n    public boolean recordOpponentGuess(int row, int col) {\r\n        if(selfGrid.hasShip(row, col)) {\r\n            selfGrid.markHit(row, col);\r\n            return true;\r\n        }\r\n        else {\r\n            selfGrid.markMiss(row, col);\r\n            return false;\r\n        }\r\n    }\r\n}import java.util.*;\r\n\r\npublic class Randomizer{\r\n\r\n\tpublic static Random theInstance = null;\r\n\t\r\n\tpublic Randomizer(){\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic static Random getInstance(){\r\n\t\tif(theInstance == null){\r\n\t\t\ttheInstance = new Random();\r\n\t\t}\r\n\t\treturn theInstance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return a random boolean value.\r\n\t * @return True or false value simulating a coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(){\r\n\t\treturn Randomizer.getInstance().nextBoolean();\r\n\t}\r\n\r\n\t/**\r\n\t * This method simulates a weighted coin flip which will return\r\n\t * true with the probability passed as a parameter.\r\n\t * \r\n\t * @param\tprobability\tThe probability that the method returns true, a value between 0 to 1 inclusive. \r\n\t * @return True or false value simulating a weighted coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(double probability){\r\n\t\treturn Randomizer.nextDouble() < probability;\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method returns a random integer.\r\n\t * @return A random integer.\r\n\t */\r\n\tpublic static int nextInt(){\r\n\t\treturn Randomizer.getInstance().nextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * This method returns a random integer between 0 and n, exclusive.\r\n\t * @param n\tThe maximum value for the range.\r\n\t * @return A random integer between 0 and n, exclusive.\r\n\t */\r\n\tpublic static int nextInt(int n){\r\n\t\treturn Randomizer.getInstance().nextInt(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a number between min and max, inclusive.\r\n\t * @param min\tThe minimum integer value of the range, inclusive.\r\n\t * @param max\tThe maximum integer value in the range, inclusive.\r\n\t * @return A random integer between min and max.\r\n\t */\r\n\tpublic static int nextInt(int min, int max){\r\n\t\treturn min + Randomizer.nextInt(max - min + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between 0 and 1.\r\n\t * @return A random double between 0 and 1.\r\n\t */\r\n\tpublic static double nextDouble(){\r\n\t\treturn Randomizer.getInstance().nextDouble();\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between min and max.\r\n\t * @param min The minimum double value in the range.\r\n\t * @param max The maximum double value in the rang.\r\n\t * @return A random double between min and max.\r\n\t */\r\n\tpublic static double nextDouble(double min, double max){\r\n\t\treturn min + (max - min) * Randomizer.nextDouble();\r\n\t}\r\n\r\n\t\r\n}public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}public class Location\r\n{\r\n    public static final int UNGUESSED = 0;\r\n    public static final int HIT = 1;\r\n    public static final int MISSED = 2;\r\n    \r\n    private int status;\r\n    private boolean hasShip;\r\n    \r\n    // Location constructor. \r\n    public Location() {\r\n        this.status = UNGUESSED;\r\n    }\r\n    \r\n    // Was this Location a hit?\r\n    public boolean checkHit() {\r\n        return status == HIT;\r\n    }\r\n    \r\n    // Was this location a miss?\r\n    public boolean checkMiss() {\r\n        return status == MISSED;\r\n    }\r\n    \r\n    // Was this location unguessed?\r\n    public boolean isUnguessed() {\r\n        return status == UNGUESSED;\r\n    }\r\n    \r\n    // Mark this location a hit.\r\n    public void markHit() {\r\n        status = HIT;\r\n    }\r\n    \r\n    // Mark this location a miss.\r\n    public void markMiss() {\r\n        status = MISSED;\r\n    }\r\n    \r\n    // Return whether or not this location has a ship.\r\n    public boolean hasShip() {\r\n        return hasShip;\r\n    }\r\n    \r\n    // Set the value of whether this location has a ship.\r\n    public void setShip(boolean val) {\r\n        this.hasShip = val;\r\n    }\r\n    \r\n    // Set the status of this Location.\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n    \r\n    // Get the status of this Location.\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n}public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method can be called on your own grid. To add a ship\r\n     * we will go to the ships location and mark a true value\r\n     * in every location that the ship takes up.\r\n     */\r\n    public void addShip(Ship s) {\r\n        int i = s.getRow(), j = s.getCol(), marked = 0;\r\n        while(marked < s.getLength()) {\r\n            setShip(i, j, true);\r\n            if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n            else j++;\r\n            \r\n            marked++;\r\n        }\r\n    }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","n":0.02},"2":{"v":"/codehs/java/projects/battleship/finishing-the-game.html","n":1}}},{"i":227,"$":{"0":{"v":"Battleship: The Battleship Class","n":0.5},"1":{"v":"Battleship: The Battleship Classpublic class Battleship extends ConsoleProgram {\r\n    \r\n    \r\n                private static final int MAX_COL = 10;\r\n                private static final char MAX_ROW = 'J';\r\n            \r\n                private static final int HORIZONTAL = 0;\r\n                private static final int VERTICAL = 1;\r\n            \r\n                public void run() {\r\n            \r\n                    Player player = new Player();\r\n                    Player cpu = new Player();\r\n            \r\n            \r\n                    readLine(\"Hit enter to start guessing.\");\r\n            \r\n                    boolean playing = true;\r\n            \r\n                    while (playing) playRound(player, cpu);\r\n            \r\n                    if (player.hasWon()) System.out.println(\"You won!\");\r\n                    else System.out.println(\"You lost!\");\r\n            \r\n                    System.out.println(\"Thanks for playing!\");\r\n                }\r\n            \r\n                private int readDirection() {\r\n                    while (true) {\r\n                        String dir = readLine(\"Horizontal or vertical? \").toUpperCase();\r\n            \r\n                        if (dir.length() > 0) {\r\n                            if (dir.charAt(0) == 'H') {\r\n                                return HORIZONTAL;\r\n                            } else if (dir.charAt(0) == 'V') {\r\n                                return VERTICAL;\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid direction, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readCol() {\r\n                    while (true) {\r\n                        int col = readInt(\"Which column? (1-\" + MAX_COL + \") \");\r\n                        if (col >= 1 && col <= MAX_COL) {\r\n                            return col - 1;\r\n                        }\r\n                        System.out.println(\"Invalid column, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readRow() {\r\n                    while (true) {\r\n                        String row = readLine(\"Which row? (A-\" + MAX_ROW + \") \");\r\n                        row = row.toUpperCase();\r\n                        if (row.length() > 0) {\r\n                            char ch = row.charAt(0);\r\n                            if (ch >= 'A' && ch <= MAX_ROW) {\r\n                                return ch - 'A';\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid row, please try again.\");\r\n                    }\r\n                }\r\n                private void playRound(Player player, Player cpu) {\r\n                    readLine(\"Hit enter for your turn.\");\r\n                    humanTurn(player, cpu);\r\n                }\r\n            \r\n                private void humanTurn(Player player, Player cpu) {\r\n                    System.out.println(\"Enemy grid\");\r\n                    player.printMyGuesses();\r\n                    System.out.println(\"It's your turn to guess.\");\r\n                    int row = readRow();\r\n                    int col = readCol();\r\n            \r\n                    boolean hit = player.makeGuess(row, col, cpu);\r\n            \r\n                    if (hit) {\r\n                        System.out.println(\"You got a hit!\");\r\n                    } else {\r\n                        System.out.println(\"Nope, that was a miss.\");\r\n                    }\r\n            \r\n                    player.printMyGuesses();\r\n                }\r\n            }import java.util.*;\r\npublic class Player\r\n{\r\n    public static final int[] SHIP_LENGTHS = {2, 3, 3, 4, 5};\r\n    public static final int NUM_SHIPS = 5;\r\n    \r\n    private ArrayList<Ship> ships;\r\n    \r\n    private Grid selfGrid;\r\n    private Grid otherGrid;\r\n    \r\n    public Player() {\r\n        this.ships = new ArrayList<Ship>();\r\n        this.selfGrid = new Grid();\r\n        this.otherGrid = new Grid();\r\n    }\r\n    \r\n    public void chooseShipLocation(Ship s, int row, int col, int direction) {\r\n        if(ships.size() < 5) {\r\n            s.setDirection(direction);\r\n            s.setLocation(row, col);\r\n            selfGrid.addShip(s);\r\n            ships.add(s);\r\n        }\r\n    }\r\n    \r\n    public void initializeShipsRandomly() {\r\n        //chosen by fair dice roll\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[0]), 0, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[1]), 1, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[2]), 2, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[3]), 3, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[4]), 4, 0, 0);\r\n    }\r\n    \r\n    // Print your ships on the grid\r\n    public void printMyShips() {\r\n        selfGrid.printShips();\r\n    }\r\n    \r\n    // Print opponent guesses\r\n    public void printOpponentGuesses() {\r\n        selfGrid.printStatus();\r\n    }\r\n    \r\n    // Print your guesses\r\n    public void printMyGuesses() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    public int getRandomRowGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    public int getRandomColGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    \r\n    public boolean hasWon() {\r\n        int total = 0;\r\n        for(int i = 0; i < Grid.NUM_ROWS; i++) {\r\n            for(int j = 0; j < Grid.NUM_COLS; j++) {\r\n                if(otherGrid.getStatus(i, j) == Location.HIT) total++;\r\n            }\r\n        }\r\n        return total >= 17;\r\n    }\r\n    \r\n    public boolean makeGuess(int row, int col, Player other) {\r\n        boolean guessHit = other.recordOpponentGuess(row, col);\r\n        \r\n        if(guessHit) {\r\n            otherGrid.markHit(row, col);\r\n        } else {\r\n            otherGrid.markMiss(row, col);\r\n        }\r\n        \r\n        return guessHit;\r\n    }\r\n    \r\n    public void printHitsDelivered() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    // Record a guess from the opponent\r\n    public boolean recordOpponentGuess(int row, int col) {\r\n        if(selfGrid.hasShip(row, col)) {\r\n            selfGrid.markHit(row, col);\r\n            return true;\r\n        }\r\n        else {\r\n            selfGrid.markMiss(row, col);\r\n            return false;\r\n        }\r\n    }\r\n}import java.util.*;\r\n\r\npublic class Randomizer{\r\n\r\n\tpublic static Random theInstance = null;\r\n\t\r\n\tpublic Randomizer(){\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic static Random getInstance(){\r\n\t\tif(theInstance == null){\r\n\t\t\ttheInstance = new Random();\r\n\t\t}\r\n\t\treturn theInstance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return a random boolean value.\r\n\t * @return True or false value simulating a coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(){\r\n\t\treturn Randomizer.getInstance().nextBoolean();\r\n\t}\r\n\r\n\t/**\r\n\t * This method simulates a weighted coin flip which will return\r\n\t * true with the probability passed as a parameter.\r\n\t * \r\n\t * @param\tprobability\tThe probability that the method returns true, a value between 0 to 1 inclusive. \r\n\t * @return True or false value simulating a weighted coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(double probability){\r\n\t\treturn Randomizer.nextDouble() < probability;\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method returns a random integer.\r\n\t * @return A random integer.\r\n\t */\r\n\tpublic static int nextInt(){\r\n\t\treturn Randomizer.getInstance().nextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * This method returns a random integer between 0 and n, exclusive.\r\n\t * @param n\tThe maximum value for the range.\r\n\t * @return A random integer between 0 and n, exclusive.\r\n\t */\r\n\tpublic static int nextInt(int n){\r\n\t\treturn Randomizer.getInstance().nextInt(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a number between min and max, inclusive.\r\n\t * @param min\tThe minimum integer value of the range, inclusive.\r\n\t * @param max\tThe maximum integer value in the range, inclusive.\r\n\t * @return A random integer between min and max.\r\n\t */\r\n\tpublic static int nextInt(int min, int max){\r\n\t\treturn min + Randomizer.nextInt(max - min + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between 0 and 1.\r\n\t * @return A random double between 0 and 1.\r\n\t */\r\n\tpublic static double nextDouble(){\r\n\t\treturn Randomizer.getInstance().nextDouble();\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between min and max.\r\n\t * @param min The minimum double value in the range.\r\n\t * @param max The maximum double value in the rang.\r\n\t * @return A random double between min and max.\r\n\t */\r\n\tpublic static double nextDouble(double min, double max){\r\n\t\treturn min + (max - min) * Randomizer.nextDouble();\r\n\t}\r\n\r\n\t\r\n}public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}public class Location\r\n{\r\n    public static final int UNGUESSED = 0;\r\n    public static final int HIT = 1;\r\n    public static final int MISSED = 2;\r\n    \r\n    private int status;\r\n    private boolean hasShip;\r\n    \r\n    // Location constructor. \r\n    public Location() {\r\n        this.status = UNGUESSED;\r\n    }\r\n    \r\n    // Was this Location a hit?\r\n    public boolean checkHit() {\r\n        return status == HIT;\r\n    }\r\n    \r\n    // Was this location a miss?\r\n    public boolean checkMiss() {\r\n        return status == MISSED;\r\n    }\r\n    \r\n    // Was this location unguessed?\r\n    public boolean isUnguessed() {\r\n        return status == UNGUESSED;\r\n    }\r\n    \r\n    // Mark this location a hit.\r\n    public void markHit() {\r\n        status = HIT;\r\n    }\r\n    \r\n    // Mark this location a miss.\r\n    public void markMiss() {\r\n        status = MISSED;\r\n    }\r\n    \r\n    // Return whether or not this location has a ship.\r\n    public boolean hasShip() {\r\n        return hasShip;\r\n    }\r\n    \r\n    // Set the value of whether this location has a ship.\r\n    public void setShip(boolean val) {\r\n        this.hasShip = val;\r\n    }\r\n    \r\n    // Set the status of this Location.\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n    \r\n    // Get the status of this Location.\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n}public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method can be called on your own grid. To add a ship\r\n     * we will go to the ships location and mark a true value\r\n     * in every location that the ship takes up.\r\n     */\r\n    public void addShip(Ship s) {\r\n        int i = s.getRow(), j = s.getCol(), marked = 0;\r\n        while(marked < s.getLength()) {\r\n            setShip(i, j, true);\r\n            if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n            else j++;\r\n            \r\n            marked++;\r\n        }\r\n    }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","n":0.021},"2":{"v":"/codehs/java/projects/battleship/the-battleship-class.html","n":1}}},{"i":228,"$":{"0":{"v":"Battleship: The Grid Class","n":0.5},"1":{"v":"Battleship: The Grid ClassBTW\r\n            The GridTester class is ignored by the autograder. You can just leave it how it is!public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","n":0.027},"2":{"v":"/codehs/java/projects/battleship/the-grid-class.html","n":1}}},{"i":229,"$":{"0":{"v":"Battleship: The Location Class","n":0.5},"1":{"v":"Battleship: The Location ClassBTW\r\n            The LocationTester class is ignored by the autograder. You can just leave it how it is!public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }","n":0.069},"2":{"v":"/codehs/java/projects/battleship/the-location-class.html","n":1}}},{"i":230,"$":{"0":{"v":"Battleship: The Player Class","n":0.5},"1":{"v":"Battleship: The Player ClassBTW\r\n            The PlayerTester class is ignored by the autograder. You can just leave it how it is!import java.util.*;\r\npublic class Player\r\n{\r\n    private static final int[] SHIP_LENGTHS = {2, 3, 3, 4, 5};\r\n    \r\n    private ArrayList<Ship> ships;\r\n    \r\n    private Grid selfGrid;\r\n    private Grid otherGrid;\r\n    \r\n    public Player() {\r\n        this.ships = new ArrayList<Ship>();\r\n        this.selfGrid = new Grid();\r\n        this.otherGrid = new Grid();\r\n    }\r\n    \r\n    public void chooseShipLocation(Ship s, int row, int col, int direction) {\r\n        if(ships.size() < 5) {\r\n            s.setDirection(direction);\r\n            s.setLocation(row, col);\r\n            selfGrid.addShip(s);\r\n            ships.add(s);\r\n        }\r\n    }\r\n    \r\n    // Print your ships on the grid\r\n    public void printMyShips() {\r\n        selfGrid.printShips();\r\n    }\r\n    \r\n    // Print opponent guesses\r\n    public void printOpponentGuesses() {\r\n        selfGrid.printStatus();\r\n    }\r\n    \r\n    // Print your guesses\r\n    public void printMyGuesses() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    // Record a guess from the opponent\r\n    public boolean recordOpponentGuess(int row, int col) {\r\n        if(selfGrid.hasShip(row, col)) {\r\n            selfGrid.markHit(row, col);\r\n            return true;\r\n        }\r\n        else {\r\n            selfGrid.markMiss(row, col);\r\n            return false;\r\n        }\r\n    }\r\n}public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method can be called on your own grid. To add a ship\r\n    * we will go to the ships location and mark a true value\r\n    * in every location that the ship takes up.\r\n    */\r\n   public void addShip(Ship s) {\r\n       int i = s.getRow(), j = s.getCol(), marked = 0;\r\n       while(marked < s.getLength()) {\r\n           setShip(i, j, true);\r\n           if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n           else j++;\r\n           \r\n           marked++;\r\n       }\r\n   }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","n":0.025},"2":{"v":"/codehs/java/projects/battleship/the-player-class.html","n":1}}},{"i":231,"$":{"0":{"v":"Battleship: The Ship Class","n":0.5},"1":{"v":"Battleship: The Ship ClassBTW\r\n            The ShipTester class is ignored by the autograder. You can just leave it how it is!public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","n":0.056},"2":{"v":"/codehs/java/projects/battleship/the-ship-class.html","n":1}}},{"i":232,"$":{"0":{"v":"CodeHS Projects","n":0.707},"1":{"v":"CodeHS ProjectsJava Projects\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Battleship\r\n                            \r\n                            \r\n                                \r\n                                    The Ship Class\r\n                                \r\n                                \r\n                                    The Location Class\r\n                                \r\n                                \r\n                                    The Grid Class\r\n                                \r\n                                \r\n                                    Adding a Ship to the Grid\r\n                                \r\n                                \r\n                                    The Player Class\r\n                                \r\n                                \r\n                                    Finishing the Game","n":0.154},"2":{"v":"/codehs/java/projects/","n":1}}},{"i":233,"$":{"0":{"v":"10.1.2 Guess the Word, Part 1","n":0.408},"1":{"v":"10.1.2 Guess the Word, Part 1","n":0.408},"2":{"v":"/codehs/python3/10/1/guess-the-word-part-1.html","n":1}}},{"i":234,"$":{"0":{"v":"10.1.3 Guess the Word, Part 2","n":0.408},"1":{"v":"10.1.3 Guess the Word, Part 2","n":0.408},"2":{"v":"/codehs/python3/10/1/guess-the-word-part-2.html","n":1}}},{"i":235,"$":{"0":{"v":"10.1.4 Guess the Word, Part 3","n":0.408},"1":{"v":"10.1.4 Guess the Word, Part 3","n":0.408},"2":{"v":"/codehs/python3/10/1/guess-the-word-part-3.html","n":1}}},{"i":236,"$":{"0":{"v":"10.1.5 Guess the Word, Part 4","n":0.408},"1":{"v":"10.1.5 Guess the Word, Part 4","n":0.408},"2":{"v":"/codehs/python3/10/1/guess-the-word-part-4.html","n":1}}},{"i":237,"$":{"0":{"v":"2.1.4 Stretched Slinky","n":0.577},"1":{"v":"2.1.4 Stretched Slinkycircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)","n":0.577},"2":{"v":"/codehs/python3/2/1/stretched-slinky.html","n":1}}},{"i":238,"$":{"0":{"v":"2.10.4 Bubble Wrap 2.0","n":0.5},"1":{"v":"2.10.4 Bubble Wrap 2.0\"\"\"\r\nThis code will fill the canvas with light blue circles.\r\n\r\nNow add a function that will draw a white highlight on each bubble.\r\n\"\"\"\r\nspeed(0)\r\n\r\n# This function will draw one row of 10 circles\r\ndef draw_circle_row():\r\n    for i in range(10):\r\n        pendown()\r\n        begin_fill()\r\n        color(\"light blue\")\r\n        circle(20)\r\n        end_fill()\r\n        penup()\r\n        forward(40)\r\n\r\n# This function will move Tracy from end of row up to beginning of the row on top        \r\ndef move_up_a_row():\r\n    left(90)\r\n    forward(40)\r\n    right(90)\r\n    backward(400)\r\n    \r\n# Send Tracy to starting position in bottom left corner\r\npenup()\r\nsetposition(-180,-200)\r\n\r\n# Call circle drawing function 10 times to fill ten rows\r\nfor i in range(10):\r\n    draw_circle_row()\r\n    move_up_a_row()","n":0.103},"2":{"v":"/codehs/python3/2/10/bubble-wrap-2-0.html","n":1}}},{"i":239,"$":{"0":{"v":"2.10.5 Sidewalk","n":0.707},"1":{"v":"2.10.5 Sidewalkspeed(0)\r\npenup()\r\nsetposition(-200,-200)\r\n\r\ndef square():\r\n    \r\n    for i in range(8):\r\n\r\n        pendown()\r\n        \r\n        right(45)\r\n        \r\n        circle(35,360,4)\r\n        \r\n        left(45)\r\n        \r\n        forward(50)\r\n        \r\n        penup()\r\n        \r\nsetposition(-200,-200)\r\n        \r\nfor i in range(4):\r\n            \r\n    square()\r\n            \r\n    left(90)","n":0.189},"2":{"v":"/codehs/python3/2/10/sidewalk.html","n":1}}},{"i":240,"$":{"0":{"v":"2.11.4 Dartboard","n":0.707},"1":{"v":"2.11.4 Dartboardspeed(9)\r\nradius = 25\r\npenup()\r\nsetposition(0,-25)\r\ndef draw_dart_board():\r\n    pendown()\r\n    circle(radius)\r\n    right(90)\r\n    penup()\r\n    forward(25)\r\n    pendown()\r\n    left(90)\r\nfor i in range(4):\r\n    draw_dart_board()\r\n    radius = radius + 25","n":0.218},"2":{"v":"/codehs/python3/2/11/dartboard.html","n":1}}},{"i":241,"$":{"0":{"v":"2.11.5 Line of Increasing Blocks","n":0.447},"1":{"v":"2.11.5 Line of Increasing Blocksspeed(0)\r\nlength = 10\r\n\r\ndef draw_block():\r\n    pendown()\r\n    for i in range(4):\r\n        forward(length)\r\n        left(90)\r\n    penup()\r\n    forward(length*2)\r\npenup()\r\nsetposition(-150,0)\r\n\r\nfor i in range(5):\r\n    draw_block()\r\n    length = length + 10","n":0.196},"2":{"v":"/codehs/python3/2/11/line-of-increasing-blocks.html","n":1}}},{"i":242,"$":{"0":{"v":"2.12.4 Colored Dartboard","n":0.577},"1":{"v":"2.12.4 Colored Dartboardradius=100\r\nfor i in range(4):\r\n    penup()\r\n    setposition(0,0)\r\n    right(90)\r\n    forward(radius)\r\n    left(90)\r\n    color_choice= input(\"what color should the circle be?\")\r\n    color(color_choice)\r\n    begin_fill()\r\n    circle(radius)\r\n    end_fill()\r\n    radius=radius-25","n":0.209},"2":{"v":"/codehs/python3/2/12/colored-dartboard.html","n":1}}},{"i":243,"$":{"0":{"v":"2.12.5 Four Corners","n":0.577},"1":{"v":"2.12.5 Four Cornersint(input(\"square_length\"))\r\npenup()\r\nsetposition(-200,-200)\r\npendown()\r\nleft(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)\r\n    penup()\r\n    forward(400)\r\n    pendown()\r\n    right(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)\r\n    forward(400)\r\n    pendown()\r\n    right(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)\r\n    forward(400)\r\n    pendown()\r\n    right(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)","n":0.174},"2":{"v":"/codehs/python3/2/12/four-corners.html","n":1}}},{"i":244,"$":{"0":{"v":"2.13.5 Circle in a Square","n":0.447},"1":{"v":"2.13.5 Circle in a Squarefirst_radius=int(input(\"what is the first circle's radius?:\"))\r\ndef draw_square_big(color_choice, radius_choice):\r\n    penup()\r\n    backward(first_radius)\r\n    pendown()\r\n    color(color_choice)\r\n    begin_fill()\r\nfor i in range(4):\r\n    forward(first_radius*2)\r\n    left(90)\r\n    end_fill()\r\ndef draw_circle_wide(color_choice, radius_choice):\r\n    pendown()\r\n    color(color_choice)\r\n    begin_fill()\r\n    circle(radius_choice)\r\n    end_fill()\r\n    penup()\r\n    setposition(0,-first_radius)\r\ndraw_square_big(\"red\", first_radius)\r\npenup()\r\nsetposition(0,-first_radius)\r\ndraw_circle_wide(\"blue\", first_radius)","n":0.171},"2":{"v":"/codehs/python3/2/13/circle-in-a-square.html","n":1}}},{"i":245,"$":{"0":{"v":"2.13.4 Colorful Caterpillar","n":0.577},"1":{"v":"2.13.4 Colorful Caterpillarpenup()\r\nbackward(140)\r\ndef draw_circle(color_choice):\r\n    begin_fill()\r\n    color(color_choice)\r\n    circle(20)\r\n    end_fill()\r\n    forward(40)\r\nfor i in range (8):\r\n    color_choice = input(\"Enter color: \")\r\n    draw_circle(color_choice)","n":0.229},"2":{"v":"/codehs/python3/2/13/colorful-caterpillar.html","n":1}}},{"i":246,"$":{"0":{"v":"2.13.6 Snowman","n":0.707},"1":{"v":"2.13.6 Snowman# put imput\r\ninputs = [100]\r\n#functions\r\ndef draw_circle(radius):\r\n    pendown()\r\n    begin_fill()\r\n    circle(radius)\r\n    end_fill()\r\n    penup()\r\n    left(90)\r\n    forward(radius*2)\r\n    right(90)\r\n    penup()\r\nsetposition(0,-200)\r\ncolor(\"gray\")\r\nbottom_radius = int(input(\"What should the radius of the bottom circle be?: \"))\r\n#parameters\r\ndraw_circle(bottom_radius)\r\ndraw_circle(bottom_radius/2)\r\ndraw_circle(bottom_radius/4)","n":0.192},"2":{"v":"/codehs/python3/2/13/snowman.html","n":1}}},{"i":247,"$":{"0":{"v":"2.14.4 Geometry 2.0","n":0.577},"1":{"v":"2.14.4 Geometry 2.0penup()\r\nsetposition(0,-100)\r\npendown()\r\nradius = 20\r\nfor i in range(7):\r\n    circle(radius,360,i)\r\n    radius=(radius + 20)","n":0.289},"2":{"v":"/codehs/python3/2/14/geometry-2-0.html","n":1}}},{"i":248,"$":{"0":{"v":"2.15.4 Dartboard using i","n":0.5},"1":{"v":"2.15.4 Dartboard using iradius = 25\r\npenup()\r\nsetposition(0,-25)\r\ndef draw_dart_board():\r\n    pendown()\r\n    circle(radius)\r\n    right(90)\r\n    penup()\r\n    forward(25)\r\n    pendown()\r\n    left(90)\r\nfor i in range(4):\r\n    draw_dart_board()\r\n    radius = radius + 25","n":0.209},"2":{"v":"/codehs/python3/2/15/dartboard-using-i.html","n":1}}},{"i":249,"$":{"0":{"v":"2.15.5 Phone Signal","n":0.577},"1":{"v":"2.15.5 Phone Signalheight = 10\r\n\r\nfor i in range(5):\r\n    for i in range(2):\r\n        forward(10)\r\n        left(90)\r\n        forward(height)\r\n        left(90)\r\n    penup()\r\n    forward(25)\r\n    pendown()\r\n    height = height + 10","n":0.204},"2":{"v":"/codehs/python3/2/15/phone-signal.html","n":1}}},{"i":250,"$":{"0":{"v":"2.16.5 Black and White Squares","n":0.447},"1":{"v":"2.16.5 Black and White Squaresinputs = [\"Yes\"]\r\ndef draw_black_square():\r\n    color(\"black\")\r\n    begin_fill()\r\n    pendown()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\nblack = input(\"Is square black? (Yes/No): \")\r\nif black %\"Yes\":\r\n    penup()\r\n    right(90)\r\nfor i in range(1):\r\n     pendown()","n":0.189},"2":{"v":"/codehs/python3/2/16/black-and-white-squares.html","n":1}}},{"i":251,"$":{"0":{"v":"2.16.4 Happy Face","n":0.577},"1":{"v":"2.16.4 Happy Faceinputs = [\"Yes\"]\r\ndef draw_eye():\r\n    color(\"black\")\r\n    begin_fill()\r\n    pendown()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\nhappy = input(\"Are you happy? (Yes/No): \")\r\nif happy == \"Yes\":\r\n    penup()\r\n    right(90)","n":0.209},"2":{"v":"/codehs/python3/2/16/happy-face.html","n":1}}},{"i":252,"$":{"0":{"v":"2.17.5 Happy/ Sad Face","n":0.5},"1":{"v":"2.17.5 Happy/ Sad Faceinputs = [\"Yes\"]\r\ndef draw_eye():\r\n    color(\"black\")\r\n    begin_fill()\r\n    pendown()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\nhappy = input(\"Are you happy? (Yes/No): \")\r\nif happy == \"Yes\":\r\n    penup()\r\n    right(90)","n":0.204},"2":{"v":"/codehs/python3/2/17/happy-sad-face.html","n":1}}},{"i":253,"$":{"0":{"v":"2.17.4 Rating","n":0.707},"1":{"v":"2.17.4 Ratingrating= 8\r\ndef red_ex():\r\n    pensize(5)\r\n    color(\"red\")\r\n    left(45)\r\n    for i in range(4):\r\n        forward(100)\r\n        backward(100)\r\n        left(90)\r\ndef yellow_line():\r\n    pensize(5)\r\n    color(\"yellow\")\r\n    forward(100)\r\ndef green_check():\r\n    pensize(5)\r\n    color(\"green\")\r\n    left(45)\r\n    for i in range(2):\r\n        forward(100)\r\n        backward(100)\r\nnumber = int(input(\"Enter a number: \"))\r\nif number < 5:\r\n    red_ex()\r\nelif number == 7:\r\n    yellow_line()\r\nelse:\r\n    green_check()","n":0.154},"2":{"v":"/codehs/python3/2/17/rating.html","n":1}}},{"i":254,"$":{"0":{"v":"2.18.5 Guess a Number","n":0.5},"1":{"v":"2.18.5 Guess a Numberuser_number= int(input(\"Pick a number from 1-10?:\"))\r\nsecret_number=7\r\ndef draw_checkmark():\r\n    penup()\r\n    backward(50)\r\n    right(90)\r\n    pendown()\r\n    pensize(15)\r\n    color(\"green\")\r\n    left(45)\r\n    forward(50)\r\n    left(90)\r\n    forward(100)\r\n    penup()\r\ndraw_checkmark()","n":0.218},"2":{"v":"/codehs/python3/2/18/guess-a-number.html","n":1}}},{"i":255,"$":{"0":{"v":"2.18.4 Increasing Squares","n":0.577},"1":{"v":"2.18.4 Increasing Squareslength = 50\r\nspeed(0)\r\n#while loop for drawing the squares\r\ndef drawSquare(l):\r\n    \r\n    for i in range(4):\r\n        forward(l)\r\n        left(90)\r\nwhile length < 400:\r\n    penup()\r\n    backward(length/2)\r\n    right(90)\r\n    forward(length/2)\r\n    left(90)\r\n    pendown()\r\n    drawSquare(length)\r\n    penup()\r\n    forward(length/2)\r\n    left(90)\r\n    forward(length/2)\r\n    right(90)\r\n    length = length + 50","n":0.162},"2":{"v":"/codehs/python3/2/18/increasing-squares.html","n":1}}},{"i":256,"$":{"0":{"v":"2.19.5 Circle Pyramid 2.0","n":0.5},"1":{"v":"2.19.5 Circle Pyramid 2.0radius = int(input(\"What is the radius of the circle? \"))\r\nrow_value= int(input(\"What is the row value of the circle? \"))\r\ndef row_value():\r\n    setposition(0, radius)\r\nfor i in range(15):\r\n    circle(25)\r\n    row_value()","n":0.183},"2":{"v":"/codehs/python3/2/19/circle-pyramid-2-0.html","n":1}}},{"i":257,"$":{"0":{"v":"2.19.4 Guess a Number 2.0","n":0.447},"1":{"v":"2.19.4 Guess a Number 2.0user_number= int(input(\"Pick a number from 1-10?:\"))\r\nsecret_number=7\r\ndef draw_checkmark():\r\n    penup()\r\n    backward(50)\r\n    right(90)\r\n    pendown()\r\n    pensize(15)\r\n    color(\"green\")\r\n    left(45)\r\n    forward(50)\r\n    left(90)\r\n    forward(100)\r\n    penup()\r\ndraw_checkmark()\r\nif user_number < 5:\r\n    circle(50)\r\nelif count > 5:\r\n    circle(50,360,4)\r\nelse:\r\n    forward(50)","n":0.18},"2":{"v":"/codehs/python3/2/19/guess-a-number-2-0.html","n":1}}},{"i":258,"$":{"0":{"v":"2.2.5 Caterpillar","n":0.707},"1":{"v":"2.2.5 Caterpillarcircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()","n":0.707},"2":{"v":"/codehs/python3/2/2/caterpillar.html","n":1}}},{"i":259,"$":{"0":{"v":"2.2.4 Shorter Dashed Line","n":0.5},"1":{"v":"2.2.4 Shorter Dashed Linepenup()\r\nbackward(200)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)","n":0.5},"2":{"v":"/codehs/python3/2/2/shorter-dashed-line.html","n":1}}},{"i":260,"$":{"0":{"v":"2.3.6 4 Columns","n":0.577},"1":{"v":"2.3.6 4 Columnspenup()\r\nleft(90)\r\nforward(200)\r\npendown()\r\nright(180)\r\nforward(400)\r\npenup()\r\nleft(90)\r\npenup()\r\nforward(100)\r\npendown()\r\nleft(90)\r\nforward(400)\r\nleft(90)\r\npenup()\r\nforward(200)\r\npendown()\r\nleft(90)\r\nforward(400)","n":0.577},"2":{"v":"/codehs/python3/2/3/4-columns.html","n":1}}},{"i":261,"$":{"0":{"v":"2.3.5 Rectangle","n":0.707},"1":{"v":"2.3.5 Rectangleforward(50)\r\nleft(90)\r\nforward(100)\r\nleft(90)\r\nforward(50)\r\nleft(90)\r\nforward(100)\r\nleft(90)","n":0.707},"2":{"v":"/codehs/python3/2/3/rectangle.html","n":1}}},{"i":262,"$":{"0":{"v":"2.4.6 4 Columns 2.0","n":0.5},"1":{"v":"2.4.6 4 Columns 2.0penup()\r\nbackward(100)\r\nright(90)\r\nforward(200)\r\nleft(180)\r\nfor i in range(2):\r\n    pendown()\r\n    forward(400)\r\n    right(90)\r\n    forward(400)\r\n    penup()\r\n    right(90)\r\n    forward(50)\r\n    right(90)","n":0.258},"2":{"v":"/codehs/python3/2/4/4-columns-2-0.html","n":1}}},{"i":263,"$":{"0":{"v":"2.4.5 Row of Circles","n":0.5},"1":{"v":"2.4.5 Row of Circlespenup()\r\nbackward(200)\r\nforward(10)\r\nfor i in range(20):\r\n    pendown()\r\n    circle(10)\r\n    penup()\r\n    forward(20)","n":0.302},"2":{"v":"/codehs/python3/2/4/row-of-circles.html","n":1}}},{"i":264,"$":{"0":{"v":"2.5.7 Circle Pyramid","n":0.577},"1":{"v":"2.5.7 Circle Pyramidspeed(5)\r\npenup()\r\nsetposition(-100, -200)\r\nfor i in range(3):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\nsetposition(-50,-100)\r\nfor i in range(2):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\nsetposition(0,0)\r\npendown()\r\ncircle(50)","n":0.236},"2":{"v":"/codehs/python3/2/5/circle-pyramid.html","n":1}}},{"i":265,"$":{"0":{"v":"2.5.5 Hexagon","n":0.707},"1":{"v":"2.5.5 Hexagonspeed(5)\r\nfor i in range(6):\r\n    forward(50)\r\n    left(60)","n":0.378},"2":{"v":"/codehs/python3/2/5/hexagon.html","n":1}}},{"i":266,"$":{"0":{"v":"2.5.6 'X' Marks the Spot","n":0.447},"1":{"v":"2.5.6 'X' Marks the Spotspeed(5)\r\nright(45)\r\nfor i in range(4):\r\n    forward(100)\r\n    backward(100)\r\n    left(90)","n":0.302},"2":{"v":"/codehs/python3/2/5/x-marks-the-spot.html","n":1}}},{"i":267,"$":{"0":{"v":"2.6.4 Circle Pyramid with Comments","n":0.447},"1":{"v":"2.6.4 Circle Pyramid with Comments\"\"\"\r\nMoves Tracy to place the bottom row of circles\r\n\"\"\"\r\n\r\nspeed(5)\r\npenup()\r\nsetposition(-100, -200)\r\n\r\n# Tells tracy to draw 3 circles\r\nfor i in range(3):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\n\r\n# Sets tracy up to place the middle row of circles\r\nsetposition(-50, -100)\r\n\r\n# Tells tracy to place the middle row of circles\r\nfor i in range (2):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\n\r\n# Sets up Tracy to place the final ball at the top\r\nsetposition(0,0)\r\n\r\n#tracy placing the final ball\r\npendown()\r\ncircle(50)","n":0.12},"2":{"v":"/codehs/python3/2/6/circle-pyramid-with-comments.html","n":1}}},{"i":268,"$":{"0":{"v":"2.8.4 Beaded Bracelet","n":0.577},"1":{"v":"2.8.4 Beaded Braceletpenup()\r\n\r\nforward(-100)\r\n\r\nright(90)\r\n\r\npendown()\r\n\r\ndef beaded_bracelet():\r\n\r\n    circle(10)\r\n\r\n    penup()\r\n\r\n    forward(20)\r\n\r\n    left(10)\r\n\r\n    pendown()\r\n\r\nfor i in range(36):\r\n\r\n    beaded_bracelet()","n":0.277},"2":{"v":"/codehs/python3/2/8/beaded-bracelet.html","n":1}}},{"i":269,"$":{"0":{"v":"2.8.5 Shape Stack","n":0.577},"1":{"v":"2.8.5 Shape Stackspeed(0)\r\n\r\npenup()\r\nsetposition(-25,200)\r\n\r\ndef circle_twenty_five():\r\n    circle(25)\r\ndef square_fifty():\r\n    forward(25)\r\n    left(90)\r\n    forward(50)\r\n    left(90)\r\n    forward(50)\r\n    left(90)\r\n    forward(50)\r\n    left(90)\r\n    forward(25)\r\n         \r\npenup()\r\nsetposition(-25,200)\r\nright(90)\r\nforward(25)\r\npendown()\r\n         \r\nfor i in range(4):\r\n    pendown()\r\n    circle_twenty_five()\r\n    penup()\r\n    forward(50)\r\n    pendown()\r\n    square_fifty()\r\n    penup()\r\n    forward(50)\r\n             \r\nsetposition(-25,200)\r\nleft(90)","n":0.186},"2":{"v":"/codehs/python3/2/8/shape-stack.html","n":1}}},{"i":270,"$":{"0":{"v":"2.9.6 Colorful Bracelet","n":0.577},"1":{"v":"2.9.6 Colorful Braceletspeed(0)\r\n \r\n\r\ndef make_purple_bead():\r\n     penup()\r\n     forward(100)\r\n     pendown()\r\n     color(\"purple\")\r\n     begin_fill()\r\n     circle(10)\r\n     end_fill()\r\n     penup()\r\n     backward(100)\r\n     left(10)\r\n     \r\ndef make_red_bead():\r\n    penup()\r\n    forward(100)\r\n    pendown()\r\n    color(\"red\")\r\n    begin_fill()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\n    backward(100)\r\n    left(10)\r\n          \r\ndef make_blue_bead():\r\n    penup()\r\n    forward(100)\r\n    pendown()\r\n    color(\"blue\")\r\n    begin_fill()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\n    backward(100)\r\n    left(10)\r\nfor i in range(12):\r\n    make_purple_bead()\r\n    make_blue_bead()\r\n    make_red_bead()","n":0.149},"2":{"v":"/codehs/python3/2/9/colorful-bracelet.html","n":1}}},{"i":271,"$":{"0":{"v":"2.9.5 Four Colored Triangles","n":0.5},"1":{"v":"2.9.5 Four Colored Trianglesspeed(5)\r\npensize(5)\r\n\r\ndef draw_triangle():\r\n    pendown()\r\n    color(\"red\")\r\n    forward(50)\r\n    left(120)\r\n    color(\"blue\")\r\n    forward(50)\r\n    left(120)\r\n    color(\"green\")\r\n    forward(50)\r\n    left(120)\r\npenup()\r\nbackward(100)\r\nfor i in range (4):\r\n    draw_triangle()\r\n    penup()\r\n    forward(50)","n":0.213},"2":{"v":"/codehs/python3/2/9/four-colored-triangles.html","n":1}}},{"i":272,"$":{"0":{"v":"2.9.7: Kid's Shapes Toy","n":0.5},"1":{"v":"2.9.7: Kid's Shapes Toydef red_diamond():\r\n    color(\"red\")\r\n    pendown()\r\n    begin_fill()\r\n    circle(60, 360, 4)\r\n    end_fill()\r\n    penup()\r\n\r\ndef blue_circle():\r\n    pendown()\r\n    color(\"blue\")\r\n    begin_fill()\r\n    circle(60)\r\n    end_fill()\r\n    penup()\r\n\r\ndef green_pentagon():\r\n    pendown()\r\n    color(\"green\")\r\n    begin_fill()\r\n    circle(60, 360, 5)\r\n    end_fill()\r\n    penup()\r\n\r\ndef yellow_half_circle():\r\n    pendown()\r\n    color(\"yellow\")\r\n    begin_fill()\r\n    circle(60, 180)\r\n    end_fill()\r\n    penup()\r\n\r\npenup()\r\nbackward(100)\r\nleft(90)\r\nforward(40)\r\nright(90)\r\n\r\nred_diamond()\r\nforward(200)\r\nblue_circle()\r\nright(90)\r\nforward(200)\r\nleft(90)\r\ngreen_pentagon()\r\nbackward(200)\r\nyellow_half_circle()","n":0.164},"2":{"v":"/codehs/python3/2/9/kids-shapes-toy.html","n":1}}},{"i":273,"$":{"0":{"v":"3.1.5 Introduce Yourself","n":0.577},"1":{"v":"3.1.5 Introduce Yourselfprint(\"My name is Elle\")\r\nprint(\"I like writing python coding\")","n":0.316},"2":{"v":"/codehs/python3/3/1/introduce-yourself.html","n":1}}},{"i":274,"$":{"0":{"v":"3.1.7 Vertical name","n":0.577},"1":{"v":"3.1.7 Vertical nameprint(\"S\")\r\nprint(\"a\")\r\nprint(\"m\")\r\nprint(\"m\")\r\nprint(\"y\")","n":0.577},"2":{"v":"/codehs/python3/3/1/vertical-name.html","n":1}}},{"i":275,"$":{"0":{"v":"3.2.6 Make Some Variables!","n":0.5},"1":{"v":"3.2.6 Make Some Variables!name = \"Alen\"\r\nnumber = 45\r\n\r\nprint(name)\r\nprint(number)","n":0.354},"2":{"v":"/codehs/python3/3/2/make-some-variables.html","n":1}}},{"i":276,"$":{"0":{"v":"3.3.7 Age","n":0.707},"1":{"v":"3.3.7 Ageage = int(input(\"Enter your age:\"))\r\nbdaycandels = age + 1\r\nprint(\"You will need this many candles for your birthday cake:\")\r\nprint(bdaycandels)","n":0.229},"2":{"v":"/codehs/python3/3/3/age.html","n":1}}},{"i":277,"$":{"0":{"v":"3.3.6 Hello","n":0.707},"1":{"v":"3.3.6 Hellouser_name = input(\"What is your name?:\")\r\nprint(\"Hello\")\r\nprint(user_name)","n":0.378},"2":{"v":"/codehs/python3/3/3/hello-name.html","n":1}}},{"i":278,"$":{"0":{"v":"3.4.5 Add Parentheses","n":0.577},"1":{"v":"3.4.5 Add Parenthesesprint(2 + 3 * (4 + 8))","n":0.333},"2":{"v":"/codehs/python3/3/4/add-parentheses.html","n":1}}},{"i":279,"$":{"0":{"v":"3.4.8 Rectangle","n":0.707},"1":{"v":"3.4.8 Rectangle","n":0.707},"2":{"v":"/codehs/python3/3/4/rectangle.html","n":1}}},{"i":280,"$":{"0":{"v":"3.5.6 Introduce Yourself, Part 2","n":0.447},"1":{"v":"3.5.6 Introduce Yourself, Part 2name= \"Otis\"\r\nage= 14\r\nprint(\"Hi!\" + \" My name is \" + name +\" and I am \" + str(age) + \" years old.\")","n":0.196},"2":{"v":"/codehs/python3/3/5/introduce-yourself-part-2.html","n":1}}},{"i":281,"$":{"0":{"v":"3.5.7 Rectangle, Part 2","n":0.5},"1":{"v":"3.5.7 Rectangle, Part 2length= 50\r\nwidth= 30\r\nprint(\"Area:\" + str(length))\r\nprint(\"Perimeter:\" + str(width))","n":0.316},"2":{"v":"/codehs/python3/3/5/rectangle-part-2.html","n":1}}},{"i":282,"$":{"0":{"v":"3.5.8 Rectangle, Part 3","n":0.5},"1":{"v":"3.5.8 Rectangle, Part 3length = int(input(\"Length: \"))\r\nwidth = int(input(\"Width: \"))\r\nprint (\"Area: \" + str(length * width))\r\nprint (\"Perimeter: \" + str(2 * (length + width)))","n":0.204},"2":{"v":"/codehs/python3/3/5/rectangle-part-3.html","n":1}}},{"i":283,"$":{"0":{"v":"3.6.5 Add Comments!","n":0.577},"1":{"v":"3.6.5 Add Comments!\"\"\"this code will ask user imput on what is your name\"\"\"\r\n\r\nfirst_name = input(\"Enter your first name: \")\r\nmiddle_name = input(\"Enter your middle name: \")\r\nlast_name = input(\"Enter your last name: \")\r\n#the code will write your full name at the end\r\nfull_name = first_name + \" \" + middle_name + \" \" + last_name\r\nprint(full_name)","n":0.139},"2":{"v":"/codehs/python3/3/6/add-comments.html","n":1}}},{"i":284,"$":{"0":{"v":"4.1.5 Plants","n":0.707},"1":{"v":"4.1.5 Plantsneeds_water = True\r\nneeds_to_be_repotted = False\r\nprint(\"Needs water: \" + str(needs_water))\r\nprint (str(needs_to_be_repotted))\r\nprint(needs_water)","n":0.302},"2":{"v":"/codehs/python3/4/1/plants.html","n":1}}},{"i":285,"$":{"0":{"v":"4.2.6 Is It Raining?","n":0.5},"1":{"v":"4.2.6 Is It Raining?raining= True\r\nif raining:\r\n    print(\"I'm going to dance in the rain!\")\r\nelse:\r\n    print(str(\"I'm going to dance in the sun!\"))","n":0.224},"2":{"v":"/codehs/python3/4/2/is-it-raining.html","n":1}}},{"i":286,"$":{"0":{"v":"4.3.6 Old Enough to Vote?","n":0.447},"1":{"v":"4.3.6 Old Enough to Vote?your_age = int(input(\"How old are you?: \"))\r\nage_requirement = 18\r\ncan_vote= your_age >= age_requirement\r\nif can_vote:\r\n    print(\"old enough to vote\")\r\nelse:\r\n    print(\"not old enough to vote\")","n":0.196},"2":{"v":"/codehs/python3/4/3/old-enough-to-vote.html","n":1}}},{"i":287,"$":{"0":{"v":"4.3.7 Positive, Zero, or Negative?","n":0.447},"1":{"v":"4.3.7 Positive, Zero, or Negative?random_number = int(input(\"Enter a number: \"))\r\nif random_number < 0:\r\n    print(\"That number is negative!\")\r\nelif random_number > 0:\r\n    print(\"That number is positive!\")\r\nelse:\r\n    print(\"That number is zero!\")","n":0.189},"2":{"v":"/codehs/python3/4/3/positive-zero-or-negative.html","n":1}}},{"i":288,"$":{"0":{"v":"4.3.9 Table Reservation","n":0.577},"1":{"v":"4.3.9 Table Reservationreservation_name = \"Shonda\"\r\nname = input(\"Name: \")\r\nif name == reservation_name:\r\n    print (\"Right this way!\")\r\nelse:\r\n    print (\"Sorry, we don't have a reservation under that name.\")","n":0.2},"2":{"v":"/codehs/python3/4/3/table-reservation.html","n":1}}},{"i":289,"$":{"0":{"v":"4.4.4 Administrators, Teachers, and Students","n":0.447},"1":{"v":"4.4.4 Administrators, Teachers, and Studentsrole = input(\"Are you an administrator, teacher, or student? \")\r\nif role == \"teacher\" or role == \"administrator\":\r\n    print (\"Administrators and teachers get keys!\")\r\nelif role == \"student\":\r\n    print (\"Students do not get keys!\")\r\nelse:\r\n    print (\"You can only be an administrator, a teacher, or a student!\")","n":0.144},"2":{"v":"/codehs/python3/4/4/administrators-teachers-and-students.html","n":1}}},{"i":290,"$":{"0":{"v":"4.4.5 Presidential Eligibility","n":0.577},"1":{"v":"4.4.5 Presidential Eligibilityage = int(input(\"Age: \"))\r\nif age >= 35:\r\n    print (\"You are eligible to run for president.\")\r\nelse:\r\n    print (\"You are not eligible to run for president.\")","n":0.196},"2":{"v":"/codehs/python3/4/4/presidential-eligibility.html","n":1}}},{"i":291,"$":{"0":{"v":"4.5.4 Correct Portion","n":0.577},"1":{"v":"4.5.4 Correct Portion# Amount of food and number of people\r\ntons_of_food = 0.07\r\nnum_people = 25\r\n# Determine how much food each person gets\r\ntons_of_food_per_person =round(tons_of_food)/ round(num_people)\r\nprint(tons_of_food_per_person)\r\n# Ask the user how much food they took\r\ntons_taken = float(input(\"How many tons of food did you take? \"))\r\nif round(tons_taken, 5) == round(tons_of_food_per_person, 5):\r\n    print (\"Good job, you took the right amount of food!\")\r\nelse:\r\n    print (\"You took the wrong amount of food!\")","n":0.125},"2":{"v":"/codehs/python3/4/5/correct-portion.html","n":1}}},{"i":292,"$":{"0":{"v":"5.1.6 2 Through 20 Even","n":0.447},"1":{"v":"5.1.6 2 Through 20 Evennum = 2\r\n\r\nwhile num <= 20:\r\n    print(num)\r\n    num = num + 2","n":0.25},"2":{"v":"/codehs/python3/5/1/2-through-20-even.html","n":1}}},{"i":293,"$":{"0":{"v":"5.1.7 Divisibility","n":0.707},"1":{"v":"5.1.7 Divisibilitynumerator = int(input(\"Enter a numerator: \"))\r\ndenominator = int(input(\"Enter denominator: \"))\r\n\r\n# Use a while loop here to repeatedly ask the user for\r\n# a denominator for as long as the denominator is 0\r\n# (or, put another way, until the denominator is not\r\n# equal to 0).\r\n\r\nwhile denominator == 0:\r\n    denominator = int(input(\"Enter denominator: \"))\r\n\r\nif int(numerator / denominator) * denominator == numerator:\r\n    print(\"Divides evenly!\")\r\nelse:\r\n    print(\"Doesn't divide evenly.\")","n":0.125},"2":{"v":"/codehs/python3/5/1/divisibility.html","n":1}}},{"i":294,"$":{"0":{"v":"5.2.8 Average Test Score","n":0.5},"1":{"v":"5.2.8 Average Test Scoresum = 0\r\n\r\nfor i in range(3):\r\n    next = int(input(\"Enter a number: \"))\r\n    sum = sum + next\r\n    \r\nprint (\"Average: \" + str(sum/ 3))","n":0.196},"2":{"v":"/codehs/python3/5/2/average-test-score.html","n":1}}},{"i":295,"$":{"0":{"v":"5.2.5 Counting 10 to 100 by Tens","n":0.378},"1":{"v":"5.2.5 Counting 10 to 100 by Tensfor i in range(10, 101, 10):\r\n    print(i)","n":0.277},"2":{"v":"/codehs/python3/5/2/counting-10-to-100-by-tens.html","n":1}}},{"i":296,"$":{"0":{"v":"5.2.9 How Many Names?","n":0.5},"1":{"v":"5.2.9 How Many Names?names = \"\"\r\nn = int(input(\"How many names would you like to say? \"))\r\n\r\nfor i in range(n):\r\n    next = input(\"Enter a name: \")\r\n    names = names + next + \" \"\r\nprint(names)","n":0.174},"2":{"v":"/codehs/python3/5/2/how-many-names.html","n":1}}},{"i":297,"$":{"0":{"v":"5.3.7 Higher/ Lower","n":0.577},"1":{"v":"5.3.7 Higher/ Lowermagic_number = 3\r\n\r\nwhile True:\r\n    guess = int(input(\"Guess my number: \"))\r\n    if guess == magic_number:\r\n        print(\"You got it!\")\r\n        break\r\n    elif guess > magic_number:\r\n        print(\"Too high!\")\r\n    else:\r\n        print(\"Too Low!\")\r\nprint(\"Correct!\")","n":0.186},"2":{"v":"/codehs/python3/5/3/higher-lower.html","n":1}}},{"i":298,"$":{"0":{"v":"5.4.7 Categories","n":0.707},"1":{"v":"5.4.7 Categoriesall_names= \":\"\r\nfor i in range(3):\r\n    category = input(\"Enter a category: \")\r\nfor x in range(3):\r\n    names = input(\"name something in that category: \")\r\nall_names= all_names +\" \"+ names\r\n\r\nprint(category + all_names)\r\n\r\nall_names = \":\"","n":0.18},"2":{"v":"/codehs/python3/5/4/categories.html","n":1}}},{"i":299,"$":{"0":{"v":"5.4.6 Rolling Dice","n":0.577},"1":{"v":"5.4.6 Rolling Dicefor i in range(1, 7, 1):\r\n    for j in range(1, 7, 1):\r\n        print(str(i) + \", \" + str(j))","n":0.224},"2":{"v":"/codehs/python3/5/4/rolling-dice.html","n":1}}},{"i":300,"$":{"0":{"v":"6.1.5 Weather","n":0.707},"1":{"v":"6.1.5 Weather\"\"\"\r\nThis code will print out a greeting based on the time of day.\r\n\"\"\"\r\n\r\n# This function will print a greeting for the morning\r\ndef sunny_greeting():\r\n    print(\"If it is sunny, you should suggest I wear sandals\")\r\n    \r\n# This function will print a greeting for the afternoon\r\ndef rainy_greeting():\r\n    print(\"If it is rainy, you should suggest I wear galoshes\")\r\n    \r\n# This function will print a greeting for the evening\r\ndef snowy_greeting():\r\n    print(\"If it is snowy, you should suggest I wear boots\")\r\n    \r\n\r\n# Get input from the user and print matching greeting\r\n# If other option, print that it is invalid\r\nweather = input(\"What is the weather? (sunny, rainy, snowy):\")\r\n\r\nif weather == \"sunny\":\r\n    sunny_greeting()\r\nelif weather == \"rainy\":\r\n    rainy_greeting()\r\nelif weather == \"snowy\":\r\n    snowy_greeting()\r\nelse:\r\n    print(\"Invalid option.\")","n":0.093},"2":{"v":"/codehs/python3/6/1/weather.html","n":1}}},{"i":301,"$":{"0":{"v":"6.2.8 Area of a Square with Default Parameters","n":0.354},"1":{"v":"6.2.8 Area of a Square with Default Parametersdef calculate_area(side_length=10):\r\n    area = side_length ** 2\r\n    print(\"The area of a square with sides of length \" + str(side_length) + \" is \" + str(area))\r\n    \r\n    \r\nside_length = int(input(\"Enter a number: \"))\r\nif side_length <= 0:\r\n    calculate_area()\r\nelse:\r\n    calculate_area(side_length)","n":0.151},"2":{"v":"/codehs/python3/6/2/area-of-a-square-with-default-parameters.html","n":1}}},{"i":302,"$":{"0":{"v":"6.2.6 Print Multiple Times","n":0.5},"1":{"v":"6.2.6 Print Multiple Times\"\"\"\r\nThis function takes two arguments. It expects the first to be a string and\r\nthe second to be a number.\r\n\"\"\"\r\n\r\ndef print_name_and_age(name, age):\r\n    print(\"Hi, my name is \" + name + \" and I am \" + str(age) + \" years old.\")\r\n\r\nprint_name_and_age(\"Sierra\", 34)\r\nprint_name_and_age(\"Marcus\", 19)","n":0.149},"2":{"v":"/codehs/python3/6/2/print-multiple-times.html","n":1}}},{"i":303,"$":{"0":{"v":"6.2.5 Print Product","n":0.577},"1":{"v":"6.2.5 Print Product\"\"\"\r\nThis function takes two arguments. It expects the first to be a string and\r\nthe second to be a number.\r\n\"\"\"\r\n\r\ndef print_name_and_age(name, age):\r\n    print(\"Hi, my name is \" + name + \" and I am \" + str(age) + \" years old.\")\r\n\r\nprint_name_and_age(\"Sierra\", 34)\r\nprint_name_and_age(\"Marcus\", 19)","n":0.151},"2":{"v":"/codehs/python3/6/2/print-product.html","n":1}}},{"i":304,"$":{"0":{"v":"6.3.7 Add, Subtract, or Multiply","n":0.447},"1":{"v":"6.3.7 Add, Subtract, or Multiply","n":0.447},"2":{"v":"/codehs/python3/6/3/add-subtract-or-multiply.html","n":1}}},{"i":305,"$":{"0":{"v":"6.3.6 Adding to a Value","n":0.447},"1":{"v":"6.3.6 Adding to a Value","n":0.447},"2":{"v":"/codehs/python3/6/3/adding-to-a-value.html","n":1}}},{"i":306,"$":{"0":{"v":"6.4.4 Add One","n":0.577},"1":{"v":"6.4.4 Add One","n":0.577},"2":{"v":"/codehs/python3/6/4/add-one.html","n":1}}},{"i":307,"$":{"0":{"v":"6.4.8 Sum Two Numbers","n":0.5},"1":{"v":"6.4.8 Sum Two Numbers","n":0.5},"2":{"v":"/codehs/python3/6/4/sum-two-numbers.html","n":1}}},{"i":308,"$":{"0":{"v":"6.4.9 Temperature Converter","n":0.577},"1":{"v":"6.4.9 Temperature Converter","n":0.577},"2":{"v":"/codehs/python3/6/4/temperature-converter.html","n":1}}},{"i":309,"$":{"0":{"v":"6.5.6 Enter a Positive Number","n":0.447},"1":{"v":"6.5.6 Enter a Positive Number","n":0.447},"2":{"v":"/codehs/python3/6/5/enter-a-positive-number.html","n":1}}},{"i":310,"$":{"0":{"v":"6.5.5 Temperature Converter, Part 2","n":0.447},"1":{"v":"6.5.5 Temperature Converter, Part 2","n":0.447},"2":{"v":"/codehs/python3/6/5/temperature-converter-part-2.html","n":1}}},{"i":311,"$":{"0":{"v":"7.3.4 Find the Error","n":0.5},"1":{"v":"7.3.4 Find the Error","n":0.5},"2":{"v":"/codehs/python3/7/3/find-the-error.html","n":1}}},{"i":312,"$":{"0":{"v":"7.4.7 Spelling Bee","n":0.577},"1":{"v":"7.4.7 Spelling Bee","n":0.577},"2":{"v":"/codehs/python3/7/4/spelling-bee.html","n":1}}},{"i":313,"$":{"0":{"v":"7.6.10 Part 2, Remove All From String","n":0.378},"1":{"v":"7.6.10 Part 2, Remove All From String","n":0.378},"2":{"v":"/codehs/python3/7/6/part-2-remove-all-from-string.html","n":1}}},{"i":314,"$":{"0":{"v":"8.1.7 Fix This Tuple","n":0.5},"1":{"v":"8.1.7 Fix This Tuple","n":0.5},"2":{"v":"/codehs/python3/8/1/fix-this-tuple.html","n":1}}},{"i":315,"$":{"0":{"v":"8.4.5 Five Numbers","n":0.577},"1":{"v":"8.4.5 Five Numbers","n":0.577},"2":{"v":"/codehs/python3/8/4/five-numbers.html","n":1}}},{"i":316,"$":{"0":{"v":"8.4.4 How Many Names?","n":0.5},"1":{"v":"8.4.4 How Many Names?","n":0.5},"2":{"v":"/codehs/python3/8/4/how-many-names.html","n":1}}},{"i":317,"$":{"0":{"v":"8.4.7 Librarian","n":0.707},"1":{"v":"8.4.7 Librarian","n":0.707},"2":{"v":"/codehs/python3/8/4/librarian.html","n":1}}},{"i":318,"$":{"0":{"v":"9.1.6 Checkerboard, v1","n":0.577},"1":{"v":"9.1.6 Checkerboard, v1","n":0.577},"2":{"v":"/codehs/python3/9/1/checkerboard-v1.html","n":1}}},{"i":319,"$":{"0":{"v":"9.1.7 Checkerboard, v2","n":0.577},"1":{"v":"9.1.7 Checkerboard, v2","n":0.577},"2":{"v":"/codehs/python3/9/1/checkerboard-v2.html","n":1}}},{"i":320,"$":{"0":{"v":"9.1.8 Checkerboard, v3","n":0.577},"1":{"v":"9.1.8 Checkerboard, v3","n":0.577},"2":{"v":"/codehs/python3/9/1/checkerboard-v3.html","n":1}}},{"i":321,"$":{"0":{"v":"9.2.5 Divisible by 3","n":0.5},"1":{"v":"9.2.5 Divisible by 3","n":0.5},"2":{"v":"/codehs/python3/9/2/divisible-by-3.html","n":1}}},{"i":322,"$":{"0":{"v":"9.2.8 Last Names","n":0.577},"1":{"v":"9.2.8 Last Names","n":0.577},"2":{"v":"/codehs/python3/9/2/last-names.html","n":1}}},{"i":323,"$":{"0":{"v":"9.2.9 Strings To Integers","n":0.5},"1":{"v":"9.2.9 Strings To Integers","n":0.5},"2":{"v":"/codehs/python3/9/2/strings-to-integers.html","n":1}}},{"i":324,"$":{"0":{"v":"9.3.6 Coordinate Pair","n":0.577},"1":{"v":"9.3.6 Coordinate Pair","n":0.577},"2":{"v":"/codehs/python3/9/3/coordinate-pair.html","n":1}}},{"i":325,"$":{"0":{"v":"9.3.9 Full Name & Citation","n":0.447},"1":{"v":"9.3.9 Full Name & Citation","n":0.447},"2":{"v":"/codehs/python3/9/3/full-name-citation.html","n":1}}},{"i":326,"$":{"0":{"v":"9.3.7 Slopes","n":0.707},"1":{"v":"9.3.7 Slopes","n":0.707},"2":{"v":"/codehs/python3/9/3/slopes.html","n":1}}},{"i":327,"$":{"0":{"v":"9.4.5 Phone Book","n":0.577},"1":{"v":"9.4.5 Phone Book","n":0.577},"2":{"v":"/codehs/python3/9/4/phone-book.html","n":1}}},{"i":328,"$":{"0":{"v":"9.4.6 Word Counts","n":0.577},"1":{"v":"9.4.6 Word Counts","n":0.577},"2":{"v":"/codehs/python3/9/4/word-counts.html","n":1}}},{"i":329,"$":{"0":{"v":"9.5.6 Swapping","n":0.707},"1":{"v":"9.5.6 Swapping","n":0.707},"2":{"v":"/codehs/python3/9/5/swapping.html","n":1}}},{"i":330,"$":{"0":{"v":"9.5.7 Word Counts, Part 2","n":0.447},"1":{"v":"9.5.7 Word Counts, Part 2","n":0.447},"2":{"v":"/codehs/python3/9/5/word-counts-part-2.html","n":1}}},{"i":331,"$":{"0":{"v":"Codehs: Python 3","n":0.577},"1":{"v":"Codehs: Python 3Below are all Python 3 CodeHS lessons on this site. Only exercises are included, so you won't see any\r\n            videos, examples, or tests-- if you are confused by an example, feel free to ask in the Discord!Introduction to Programming with Turtle\r\n                    Graphics\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Intro to Python with Tracy the Turtle \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.1.4 Stretched Slinky \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Tracy's Grid World \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.2.4 Shorter Dashed Line\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.2.5 Caterpillar \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Turning Tracy \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.3.5 Rectangle \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.3.6 4 Columns \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.4.5 Row of Circles \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.4.6 4 Columns 2.0 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Turning Tracy Using Angles \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.5.5 Hexagon \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.5.6 'X' Marks the Spot \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.5.7 Circle Pyramid \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Comments \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.6.4 Circle Pyramid\r\n                                            with Comments \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.8.4 Beaded Bracelet \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.8.5 Shape Stack \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Artistic Effects \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.9.5 Four Colored\r\n                                            Triangles \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.9.6 Colorful Bracelet \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Top Down Design \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.10.4 Bubble Wrap 2.0 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.10.5 Sidewalk \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Variables \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.11.4 Dartboard \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.11.5 Line of\r\n                                            Increasing Blocks \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 User Input \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.12.4 Colored Dartboard \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.12.5 Four Corners \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Parameters \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.13.4 Colorful Caterpillar\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.13.5 Circle in a Square\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.13.6 Snowman \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Using i in For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.14.4 Geometry 2.0 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Extended Loop Control \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.15.4 Dartboard using i \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.15.5 Phone Signal \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 If Statements \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.16.4 Happy Face \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.16.5 Black and White\r\n                                            Squares \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 If/ Else Statements \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.17.4 Rating \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.17.5 Happy/ Sad Face \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 While Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.18.4 Increasing Squares\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.18.5 Guess a Number \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Putting Together Control Structures \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.19.4 Guess a Number 2.0\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.19.5 Circle Pyramid 2.0\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Basic Python and Console Interaction\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Printing in Python \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.1.5 Introduce Yourself \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.1.7 Vertical name \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Variables and Types \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.2.6 Make Some Variables!\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 User Input \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.3.6 Hello  \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.3.7 Age \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Mathematical Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.4.5 Add Parentheses \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.4.8 Rectangle \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 String Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.5.6 Introduce\r\n                                            Yourself, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.5.7 Rectangle, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.5.8 Rectangle, Part 3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Comments \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.6.5 Add Comments! \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Conditionals\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Booleans \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.1.5 Plants \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 If Statements \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.2.6 Is It Raining? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Comparison Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.3.6 Old Enough to Vote? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         4.3.7 Positive, Zero,\r\n                                            or Negative? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         4.3.9 Table Reservation \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Logical Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.4.4\r\n                                            Administrators, Teachers, and Students \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         4.4.5 Presidential\r\n                                            Eligibility \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Floating Point Numbers and Rounding \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.5.4 Correct Portion \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Looping\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 While Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.1.6 2 Through 20 Even \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.1.7 Divisibility \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.2.5 Counting 10 to\r\n                                            100 by Tens \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.2.8 Average Test Score \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.2.9 How Many Names? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Break and Continue \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.3.7 Higher/ Lower \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Nested Control Structures \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.4.6 Rolling Dice \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.4.7 Categories \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Functions and Exceptions\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.1.5 Weather \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions and Parameters \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.2.5 Print Product \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.2.6 Print Multiple Times\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.2.8\r\n                                            Area of a Square with Default Parameters \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Namespaces in Functions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.3.6 Adding to a Value \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.3.7 Add, Subtract, or\r\n                                            Multiply \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions and Return Values \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.4.4 Add One \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.4.8 Sum Two Numbers \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.4.9 Temperature Converter\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Exceptions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.5.5 Temperature\r\n                                            Converter, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.5.6 Enter a Positive\r\n                                            Number \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Strings\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Immutability \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         7.3.4 Find the Error \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Strings and For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         7.4.7 Spelling Bee \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 String Methods \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         7.6.10 Part 2,\r\n                                            Remove All From String \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Creating and Altering Data Structures\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Tuples \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         8.1.7 Fix This Tuple \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 List Methods \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         8.4.4 How Many Names? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         8.4.5 Five Numbers \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         8.4.7 Librarian \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Extending Data Structures\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 2d Lists \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.1.6 Checkerboard, v1 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.1.7 Checkerboard, v2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.1.8 Checkerboard, v3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 List Comprehensions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.2.5 Divisible by 3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.2.8 Last Names \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.2.9 Strings To Integers\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Packing and Unpacking \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.3.6 Coordinate Pair \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.3.7 Slopes \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.3.9 Full Name & Citation\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Dictionaries \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.4.5 Phone Book \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.4.6 Word Counts \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Equivalence vs. Identity \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.5.6 Swapping \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.5.7 Word Counts, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Project: Guess the Word\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Project: Guess the Word \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         10.1.2 Guess the Word,\r\n                                            Part 1 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         10.1.3 Guess the Word,\r\n                                            Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         10.1.4 Guess the Word,\r\n                                            Part 3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         10.1.5 Guess the Word,\r\n                                            Part 4","n":0.025},"2":{"v":"/codehs/python3/","n":1}}},{"i":332,"$":{"0":{"v":"CodeHS Bookmarklet","n":0.707},"1":{"v":"CodeHS BookmarkletA bookmarklet is a special bookmark that automatically runs a small snippet of code when you click it. This\r\n            bookmarklet magically gets the solutions to CodeHS problems and inserts them! All credit for the code goes to ExplosiveNight on the Discord\r\n        \r\n        To add it to your browser, follow the instructions below. To use it, go to any CodeHS assignment\r\n            page and click on its icon in your favorites bar.\r\n        \r\n            CodeHS Bookmarklet Link\r\n        \r\n        Please note that this is not an intended feature of CodeHS. It might get removed at any time. In addition,\r\n            please be responsible with this power :) We trust you to handle your learning best, but make sure that you understand the concepts behind the annoying problems that CodeHS builds.\r\n        \r\n            JSYK\r\n            Some solutions have been written incorrectly. Sadly, we can't fix them, as it's on CodeHS's end. In general,\r\n                the problem is just a typo or a missing word, but if you need any help, please contact us via email or Discord!\r\n        \r\n        Chrome\r\n        On Chrome, drag the CodeHS Bookmarklet Link above into your bookmark bar. If you don't see\r\n            the bookmark bar, you can press CTRL + SHIFT + B to open it.\r\n        \r\n        Edge\r\n        On Chrome, drag the CodeHS Bookmarklet Link above into your favorites bar. If you don't see\r\n            the favorites bar, you can press CTRL + SHIFT + B to open it.\r\n        \r\n        Firefox\r\n        On Firefox, drag the CodeHS Bookmarklet Link above into your favorites bar. If you don't see\r\n            the favorites bar, you can press CTRL + SHIFT + B to open it.\r\n        \r\n        Other Browsers\r\n        If you need help and don't see your browser here, please get in touch via email or Discord","n":0.059},"2":{"v":"/codehs-bookmarklet.html","n":1}}},{"i":333,"$":{"0":{"v":"Loading, please wait...","n":0.577},"1":{"v":"Edit Java\r\n            Add Annotations\r\n            Review & PublishLoading, please wait...🎉 Published! 🎉\r\n                    \r\n                    \r\n                        Please send this link in the Discord. You can also visit this link to preview the final assignment.Creating Assignment...\r\n                    \r\n                    \r\n                        Please wait; this may take a few seconds.Review Annotations\r\n                Because of technical limitations, annotations are not connected to lines. Instead, they're connected\r\n                    to specific statements in the code. For these purposes, classes, imports, and methods are all\r\n                    grouped under the general definition of \"statement\".\r\n                If you note your annotations being attached incorrectly, please let me know!\r\n                \r\n            \r\n            \r\n                Tip\r\n                A \"tip\" appears at the top of the assignment. This is a good place to let people know about a\r\n                    Grader.java quirk, a tricky way the assignment is worded, or something else that doesn't really fit\r\n                    in an annotation.\r\n                Include a tip in this\r\n                    assignment\r\n                \r\n                    TIP\r\n                    Edit me!\r\n                \r\n            \r\n            \r\n                Export & Publish\r\n                Input your name\r\n                I want to give you credit! This doesn't have to be your real name-- it could be your Discord username\r\n                    or your Twitter handle. Whatever you want! (as long as it's appropriate, ofc).\r\n                If you would prefer an air of mystery, you can also leave this blank.\r\n                Name: \r\n                If you'd like to link to your website, Twitter, GitHub, or whatever, feel free to do that here! This\r\n                    is completely optional.\r\n                Website: \r\n\r\n                Legal Junk\r\n                In order to legally host your work, you technically need to agree to grant the site a license.\r\n                \r\n                    I agree to grant an exclusive Creative\r\n                            Commons Attribution 4.0 International license to host my content.\r\n                    \r\n                    I agree that the site is\r\n                        not obligated to host any content that may be seen as objectionable or inappropriate.\r\n                    \r\n                    I affirm that this should not qualify as\r\n                        user-generated content, and that I am acting as a volunteer\r\n                \r\n            \r\n            \r\n                Submit for Publication\r\n                Please accept all legal items before publishing!","n":0.056},"2":{"v":"/contribute/edit/exercise.html","n":1}}},{"i":334,"$":{"0":{"v":"Loading, please wait...","n":0.577},"1":{"v":"Edit\n            Review & PublishLoading, please wait...🎉 Published! 🎉\n                    \n                    \n                        Please send this link in the Discord. You can also visit this link to preview the final assignment.Creating Assignment...\n                    \n                    \n                        Please wait; this may take a few seconds.Export & Publish\n                Input your name\n                I want to give you credit! This doesn't have to be your real name-- it could be your Discord username\n                    or your Twitter handle. Whatever you want! (as long as it's appropriate, ofc).\n                If you would prefer an air of mystery, you can also leave this blank.\n                Name: \n                If you'd like to link to your website, Twitter, GitHub, or whatever, feel free to do that here! This\n                    is completely optional.\n                Website: \n\n                Legal Junk\n                In order to legally host your work, you technically need to agree to grant the site a license.\n                \n                    I agree to grant an exclusive Creative\n                            Commons Attribution 4.0 International license to host my content.\n                    \n                    I agree that the site is\n                        not obligated to host any content that may be seen as objectionable or inappropriate.\n                    \n                    I affirm that this should not qualify as\n                        user-generated content, and that I am acting as a volunteer\n                \n            \n            \n                Submit for Publication\n                Please accept all legal items before publishing!","n":0.07},"2":{"v":"/contribute/edit/sheet.html","n":1}}},{"i":335,"$":{"0":{"v":"Contributing Guidelines","n":0.707},"1":{"v":"Contributing GuidelinesThese guidelines are intended to:Help explanations have the same general style. I'm not picky about grammar, dw\r\n            Make sure that people can read explanations well\r\n            Tell you about advanced features & how to use them\r\n            Ensure that explanations use non-discouraging languageOf course, you're not beholden to them. There are some things that I'll enforce (which will all be\r\n            noted), but the vast majority is up to you. I trust you <3StyleAlice & BobIf you need example names for an explanation or for code (e.g. 'the Student object is named x'), please use\r\n            these (in no particular order):Alice\r\n            Bob\r\n            Carol\r\n            Danny\r\n            Otis\r\n            Sam\r\n            Quin\r\n            ElleWhy?\r\n            Alice, Bob, Carol, and Dan are standard example names. If you go further into the alphabet (e.g. Eve),\r\n                then they start to have special meanings-- 'Eve' is 'the eavesdropper'. In order to have more names and\r\n                to have a distinct feel\r\n                to DCT examples, I came up with Sam, Quin, Otis, and Elle. If you want more information, you can read\r\n                about it on Wikipedia here :)GrammarJust... generally make sure that people can read it. You don't have to adhere to any standard :)Demeaning & Discouraging LanguageSome words will nearly always be read as patronising or confusing. Implying that an assignment is\r\n            'simple' or 'basic' when someone has been having trouble is incredibly discouraging for them. Please do not\r\n            use these thoughtlessly.If you have a usage, please read it through to make sure. These words aren't bad; they're just used\r\n            a lot. I trust you to use them well.\"Just\"\r\n                As in, \"just print out the array\". That implies it's easy, when it might not be easy for\r\n                    some people. Either remove it, or make it more clear using 'only' (\"This assignment\r\n                    only wants you to print out the array\").\r\n            \r\n            \r\n                \"Only\"\r\n                Depending on context, this can imply the same things as 'just'. Please make sure that your context is\r\n                    closer to 'Singly; alone; only; without another' than it is to 'easily; without difficulty'. It\r\n                    may not be 'without difficulty' for someone reading, and they may be discouraged if it is.\r\n            \r\n            \r\n                \"Basically\"\r\n                \r\n                    It may not be 'basic' for your reader.\r\n                \r\n            \r\n            \r\n                \"Easily\"\r\n                It may not be 'easy' for your reader.\r\n            \r\n            \r\n                \"Of course\"\r\n                It might not be self-evident for your reader.Advanced FeaturesMarkdown!!!Want formatting in your annotations? You can use Markdown! It's just like the formatting that Discord and\r\n            Reddit use. For more detail, see this cheat sheetHTML!If you want to embed HTML into your annotations for more control, you can do\r\n            that. However, the list of tags available is severely limited.When using any illegal elements, your annotations will be rejected by the preview system and trimmed when\r\n            published.Globally allowed stylesYou can style elements with CSS.CSS styles may only be applied by putting them in the style property.Style Attribute Format\r\n            background-colorcolor\r\n            colorcolor\r\n            border-radiuspixel units only, 0px-9px\r\n            border-top-colorcolor\r\n            border-top-styleword\r\n            border-top-widthpixel units only, 0px-9px\r\n            border-right-colorcolor\r\n            border-right-styleword\r\n            border-right-widthpixel units only, 0px-9px\r\n            border-bottom-colorcolor\r\n            border-bottom-styleword\r\n            border-bottom-widthpixel units only, 0px-9px\r\n            border-left-colorcolor\r\n            border-left-styleword\r\n            border-left-widthpixel units only, 0px-9pxSome elements have other styles allowed too! See below for all allowed elements.Allowed elementsAllowed Element\r\n                    Allowed Attributes\r\n                    Allowed Styles\r\n                \r\n            \r\n            \r\n                \r\n                    SVG\r\n                    \r\n                    \r\n                \r\n                \r\n                    PATH\r\n                    d\r\n                    fill, stroke\r\n                \r\n                \r\n                    A\r\n                    target, rel, href\r\n                    \r\n                \r\n                \r\n                    P\r\n                    \r\n                    \r\n                \r\n                \r\n                    SPAN\r\n                    class, data-address, data-annotation-connector-id. AUTO-GENERATED IDs ONLY\r\n                    \r\n                    \r\n                \r\n                \r\n                    S\r\n                    \r\n                    \r\n                \r\n                \r\n                    B\r\n                    \r\n                    \r\n                \r\n                \r\n                    STRONG\r\n                    \r\n                    \r\n                \r\n                \r\n                    I\r\n                    \r\n                    \r\n                \r\n                \r\n                    EM\r\n                    \r\n                    \r\n                \r\n                \r\n                    U\r\n                    \r\n                    \r\n                \r\n                \r\n                    CODE\r\n                    \r\n                    \r\n                \r\n                \r\n                    PRE\r\n                    \r\n                    \r\n                \r\n                \r\n                    DIV\r\n                    class -- 'annotation' only\r\n                    \r\n                \r\n                \r\n                    TABLE\r\n                    \r\n                    \r\n                \r\n                \r\n                    TBODY\r\n                    \r\n                    \r\n                \r\n                \r\n                    TH\r\n                    \r\n                    \r\n                \r\n                \r\n                    TR\r\n                    \r\n                    \r\n                \r\n                \r\n                    TD\r\n                    \r\n                    \r\n                \r\n                \r\n                    HR\r\n                    \r\n                    \r\n                \r\n                \r\n                    H1\r\n                    \r\n                    \r\n                \r\n                \r\n                    H2\r\n                    \r\n                    \r\n                \r\n                \r\n                    H3\r\n                    \r\n                    \r\n                \r\n                \r\n                    H4\r\n                    \r\n                    \r\n                \r\n                \r\n                    H5\r\n                    \r\n                    \r\n                \r\n                \r\n                    H6\r\n                    \r\n                    \r\n                \r\n                \r\n                    BR","n":0.039},"2":{"v":"/contribute/guidelines.html","n":1}}},{"i":336,"$":{"0":{"v":"Contributing to Dinner Coding Time","n":0.447},"1":{"v":"New Assignment\r\n                    \r\n                    \r\n                        Folder\r\n                        \r\n                        Should be one word, with\r\n                            no symbols except for dashes\r\n                        The top-level folder, like\r\n                            \"codehs\" or \"classwork\"\r\n\r\n                        Name\r\n                        \r\n                        May only have letters,\r\n                            numbers, dashes, or slashes\r\n                        The unique ID of the\r\n                            assignment; its web address.\r\n\r\n                        Type\r\n                        \r\n                            Exercise\r\n                            Sheet\r\n                        \r\n                        WORK IN PROGRESS! The type of page. Exercises look like code editors, while sheets look more like normal webpages.\r\n                    \r\n                    \r\n                        CreateJSYK\r\n            Before you contribute, please review the Contribution Guidelines. A\r\n                lot of these are optional, but please take a look!Contributing to Dinner Coding TimeAdd New AssignmentAssignments that Need ExplanationLoading Un-Annotated CodeHS Assignments...","n":0.1},"2":{"v":"/contribute/","n":1}}},{"i":337,"$":{"0":{"v":"Publish Recipt","n":0.707},"1":{"v":"Publish ReciptYour page may not be published yet. Please send this page to @coleh on Discord or email it!You can preview your page here.","n":0.204},"2":{"v":"/contribute/status.html","n":1}}},{"i":338,"$":{"0":{"v":"Donations","n":1},"1":{"v":"DonationsI pay $31.84 per month to keep this site up. I'm happy to pay in order to help\r\n            everyone. However, I'd be grateful for charitable donations to help me offset the costs.This site will always remain free. Any donations are just helpful assistance to run it.Please consider donating, even just a small amount. At the moment, you can only donate through Venmo, but I'm working on other methods.Thank you so much! I appreciate your help endlessly <3","n":0.114},"2":{"v":"/donate.html","n":1}}},{"i":339,"$":{"0":{"v":"Error Almananc","n":0.707},"1":{"v":"Error AlmanancSome common errors on CodeHS are hard to pin down and fix. To aid with those, here are some easy solutions.NoSuchElementException","n":0.213},"2":{"v":"/error-almanac/","n":1}}},{"i":340,"$":{"0":{"v":"NoSuchElementException on CodeHS","n":0.577},"1":{"v":"NoSuchElementException on CodeHSNoSuchElementException is an error typically caused by the Scanner class. It shows up consistently on some activities, inconsistently on others-- there's really no way to tell until you see it.public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = scanner.nextLine();\r\n                }\r\n            \r\n            On some assignments, this code snippet can cause a NoSuchElementException.This isn't your fault. As far as I can tell, it happens when the Grader.java doesn't correctly send the test input to your code. However, there are some annoyingly esoteric ways to fix it.Try/Catchtry & catch tell Java to ignore specific errors. It's not good coding practice to use this too much, but for this problem, there's not much else you can do.public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = \"\"; \r\n                    try {\r\n                        inputLine = scanner.nextLine();\r\n                    }\r\n                    catch(Exception e) {\r\n                    /* \r\n                    if you want to include some intelligent error handling, you can do that here.\r\n                        otherwise, just leave this block empty\r\n                    */\r\n                    }\r\n                }\r\n            \r\n            \r\n                Using try/catch will have the runtime ignore the error.\r\n                Note that the inputLine variable is declared outside the try. This makes sure it'll be accessible later in the method.Scanner Checking MethodsThe Scanner class includes some methods for when you can't be sure about the user's input. This is better practice, but doesn't work on CodeHS sometimes.public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = \"\"; \r\n                    if(scanner.hasNextLine()) {\r\n                        inputLine = scanner.nextLine();\r\n                    }\r\n                }\r\n            \r\n            \r\n                Using hasNextLine() to avoid the error.\r\n                Note that the inputLine variable is declared outside the if. This makes sure it'll be accessible later in the method.Combining SolutionsIf you're still having the error or your code isn't working the way it's supposed to, try combining both solutions. This is a bit overkill, but it shows your teacher that you know both the proper solution and the practical one!public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = \"\"; \r\n                    try {\r\n                        if(scanner.hasNextLine()) {\r\n                            inputLine = scanner.nextLine();\r\n                        }\r\n                    }\r\n                    //this time, i just left the `catch` block empty\r\n                    catch(Exception e) {}\r\n                }\r\n            \r\n            \r\n                Combining try/catch with hasNextLine() to avoid the error.","n":0.052},"2":{"v":"/error-almanac/NoSuchElementException.html","n":1}}},{"i":341,"$":{"0":{"v":"Dinner Coding Time","n":0.577},"2":{"v":"/","n":1}}},{"i":342,"$":{"0":{"v":"Fair Use","n":0.707},"1":{"v":"Fair UseThis site is for educational purposes only. All content is curated from other sources with original commentary, explaination, or annotations added.Fair UseCopyright Disclaimer: under section 107 of the Copyright Act of 1976, allowance is made for “fair use” for\r\n            purposes such as criticism, comment, news reporting, teaching, scholarship, education and research.Fair use is a use permitted by copyright statute that might otherwise be infringing.Fair Use DefinitionFair use is a doctrine in United States copyright law that allows limited use of copyrighted material\r\n            without requiring permission from the rights holders, such as commentary, criticism, news reporting,\r\n            research, teaching or scholarship. It provides for the legal, non-licensed citation or incorporation of\r\n            copyrighted material in another author’s work under a four-factor balancing test.","n":0.091},"2":{"v":"/legal/fairuse.html","n":1}}},{"i":343,"$":{"0":{"v":"Open-Source Software Licenses","n":0.577},"1":{"v":"Open-Source Software LicensesDinner Coding Time uses select open-source projects, libraries, tools, etc. in order to make sure everything\r\n            works smoothly. Some projects might require attribution and some may not, but either way it's\r\n            polite to include it. All projects used are linked below!chevrotain-javachevrotain-java lets us parse the Java code, making code intelligence and pretty highlighting possible. You\r\n            can find it here.\r\n            The copy used has minor modifications in order to run a WebWorker for performance.\r\n            chevrotain-java is\r\n            available under a Apache 2.0 license, available hereTwemojiFor emoji on the homepage testemonials, we use Twemoji! Twemoji is an amazing project from Twitter that makes\r\n            standard emojis available on the web! Twemoji is available under a CC-BY 4.0 license, available hereSaramaJSSaramaJS parses Python code, allowing code intelligence to be expanded to Python. The copy of SaramaJS used\r\n            on DCT has minor modifications in\r\n            order to run in a WebWorker environment. It is available under a\r\n            (modified) MIT license, available here.","n":0.08},"2":{"v":"/legal/foss-usage.html","n":1}}},{"i":344,"$":{"0":{"v":"Legal Stuff","n":0.707},"1":{"v":"Legal StuffThere's some stuff that I have to include for legal reasons. That stuff lives here!Fair Use Statement\r\n            OSS Licenses\r\n            DCT's License\r\n            Terms & Conditions\r\n            Privacy Policy","n":0.192},"2":{"v":"/legal/","n":1}}},{"i":345,"$":{"0":{"v":"Creative Commons Attribution 4.0 International License","n":0.408},"1":{"v":"Creative Commons Attribution 4.0 International LicenseCreative Commons Corporation (“Creative Commons”) is not a law firm and\r\n    does not provide legal services or legal advice. Distribution of\r\n    Creative Commons public licenses does not create a lawyer-client or\r\n    other relationship. Creative Commons makes its licenses and related\r\n    information available on an “as-is” basis. Creative Commons gives no\r\n    warranties regarding its licenses, any material licensed under their\r\n    terms and conditions, or any related information. Creative Commons\r\n    disclaims all liability for damages resulting from their use to the\r\n    fullest extent possible.Using Creative Commons Public LicensesCreative Commons public licenses provide a standard set of terms and\r\n    conditions that creators and other rights holders may use to share\r\n    original works of authorship and other material subject to copyright\r\n    and certain other rights specified in the public license below. The\r\n    following considerations are for informational purposes only, are not\r\n    exhaustive, and do not form part of our licenses.Considerations for licensors: Our public licenses are\r\n        intended for use by those authorized to give the public\r\n        permission to use material in ways otherwise restricted by\r\n        copyright and certain other rights. Our licenses are\r\n        irrevocable. Licensors should read and understand the terms\r\n        and conditions of the license they choose before applying it.\r\n        Licensors should also secure all rights necessary before\r\n        applying our licenses so that the public can reuse the\r\n        material as expected. Licensors should clearly mark any\r\n        material not subject to the license. This includes other CC-\r\n        licensed material, or material used under an exception or\r\n        limitation to copyright. More considerations for licensors:\r\n        wiki.creativecommons.org/Considerations_for_licensors\r\n    Considerations for the public: By using one of our public\r\n        licenses, a licensor grants the public permission to use the\r\n        licensed material under specified terms and conditions. If\r\n        the licensor’s permission is not necessary for any reason–for\r\n        example, because of any applicable exception or limitation to\r\n        copyright–then that use is not regulated by the license. Our\r\n        licenses grant only permissions under copyright and certain\r\n        other rights that a licensor has authority to grant. Use of\r\n        the licensed material may still be restricted for other\r\n        reasons, including because others have copyright or other\r\n        rights in the material. A licensor may make special requests,\r\n        such as asking that all changes be marked or described.\r\n        Although not required by our licenses, you are encouraged to\r\n        respect those requests where reasonable. More considerations\r\n        for the public:\r\n        wiki.creativecommons.org/Considerations_for_licenseesCreative Commons Attribution 4.0 International Public LicenseBy exercising the Licensed Rights (defined below), You accept and agree\r\n    to be bound by the terms and conditions of this Creative Commons\r\n    Attribution 4.0 International Public License (“Public License”). To the\r\n    extent this Public License may be interpreted as a contract, You are\r\n    granted the Licensed Rights in consideration of Your acceptance of\r\n    these terms and conditions, and the Licensor grants You such rights in\r\n    consideration of benefits the Licensor receives from making the\r\n    Licensed Material available under these terms and conditions.Section 1 – Definitions.Adapted Material means material subject to Copyright and Similar\r\n            Rights that is derived from or based upon the Licensed Material\r\n            and in which the Licensed Material is translated, altered,\r\n            arranged, transformed, or otherwise modified in a manner requiring\r\n            permission under the Copyright and Similar Rights held by the\r\n            Licensor. For purposes of this Public License, where the Licensed\r\n            Material is a musical work, performance, or sound recording,\r\n            Adapted Material is always produced where the Licensed Material is\r\n            synched in timed relation with a moving image.\r\n    \r\n    \r\n        Adapter’s License means the license You apply to Your Copyright\r\n            and Similar Rights in Your contributions to Adapted Material in\r\n            accordance with the terms and conditions of this Public License.\r\n    \r\n    \r\n        Copyright and Similar Rights means copyright and/or similar rights\r\n            closely related to copyright including, without limitation,\r\n            performance, broadcast, sound recording, and Sui Generis Database\r\n            Rights, without regard to how the rights are labeled or\r\n            categorized. For purposes of this Public License, the rights\r\n            specified in Section 2(b)(1)-(2) are not Copyright and Similar\r\n            Rights.\r\n    \r\n    \r\n        Effective Technological Measures means those measures that, in the\r\n            absence of proper authority, may not be circumvented under laws\r\n            fulfilling obligations under Article 11 of the WIPO Copyright\r\n            Treaty adopted on December 20, 1996, and/or similar international\r\n            agreements.\r\n    \r\n    \r\n        Exceptions and Limitations means fair use, fair dealing, and/or\r\n            any other exception or limitation to Copyright and Similar Rights\r\n            that applies to Your use of the Licensed Material.\r\n    \r\n    \r\n        Licensed Material means the artistic or literary work, database,\r\n            or other material to which the Licensor applied this Public\r\n            License.\r\n    \r\n    \r\n        Licensed Rights means the rights granted to You subject to the\r\n            terms and conditions of this Public License, which are limited to\r\n            all Copyright and Similar Rights that apply to Your use of the\r\n            Licensed Material and that the Licensor has authority to license.\r\n    \r\n    \r\n        Licensor means the individual(s) or entity(ies) granting rights\r\n            under this Public License.\r\n    \r\n    \r\n        Share means to provide material to the public by any means or\r\n            process that requires permission under the Licensed Rights, such\r\n            as reproduction, public display, public performance, distribution,\r\n            dissemination, communication, or importation, and to make material\r\n            available to the public including in ways that members of the\r\n            public may access the material from a place and at a time\r\n            individually chosen by them.j. Sui Generis Database Rights means rights other than copyright\r\n    resulting from Directive 96/9/EC of the European Parliament and of\r\n    the Council of 11 March 1996 on the legal protection of databases,\r\n    as amended and/or succeeded, as well as other essentially\r\n    equivalent rights anywhere in the world.k. You means the individual or entity exercising the Licensed Rights\r\n    under this Public License. Your has a corresponding meaning.Section 2 – Scope.License grant.\r\n        \r\n            \r\n                Subject to the terms and conditions of this Public License,\r\n                    the Licensor hereby grants You a worldwide, royalty-free,\r\n                    non-sublicensable, non-exclusive, irrevocable license to\r\n                    exercise the Licensed Rights in the Licensed Material to:\r\n                a. reproduce and Share the Licensed Material, in whole or\r\n                    in part; and\r\n                b. produce, reproduce, and Share Adapted Material.\r\n            \r\n            \r\n                Exceptions and Limitations. For the avoidance of doubt, where\r\n                    Exceptions and Limitations apply to Your use, this Public\r\n                    License does not apply, and You do not need to comply with\r\n                    its terms and conditions.\r\n            \r\n            \r\n                Term. The term of this Public License is specified in Section\r\n                    6(a).\r\n            \r\n            \r\n                Media and formats; technical modifications allowed. The\r\n                    Licensor authorizes You to exercise the Licensed Rights in\r\n                    all media and formats whether now known or hereafter created,\r\n                    and to make technical modifications necessary to do so. The\r\n                    Licensor waives and/or agrees not to assert any right or\r\n                    authority to forbid You from making technical modifications\r\n                    necessary to exercise the Licensed Rights, including\r\n                    technical modifications necessary to circumvent Effective\r\n                    Technological Measures. For purposes of this Public License,\r\n                    simply making modifications authorized by this Section 2(a)\r\n                    (4) never produces Adapted Material.\r\n            \r\n            \r\n                Downstream recipients.\r\n                a. Offer from the Licensor – Licensed Material. Every\r\n                    recipient of the Licensed Material automatically\r\n                    receives an offer from the Licensor to exercise the\r\n                    Licensed Rights under the terms and conditions of this\r\n                    Public License.\r\n                b. No downstream restrictions. You may not offer or impose\r\n                    any additional or different terms or conditions on, or\r\n                    apply any Effective Technological Measures to, the\r\n                    Licensed Material if doing so restricts exercise of the\r\n                    Licensed Rights by any recipient of the Licensed\r\n                    Material.\r\n            \r\n            \r\n                No endorsement. Nothing in this Public License constitutes or\r\n                    may be construed as permission to assert or imply that You\r\n                    are, or that Your use of the Licensed Material is, connected\r\n                    with, or sponsored, endorsed, or granted official status by,\r\n                    the Licensor or others designated to receive attribution as\r\n                    provided in Section 3(a)(1)(A)(i).\r\n            \r\n        \r\n    \r\n    \r\n        Other rights.\r\n        \r\n            \r\n                Moral rights, such as the right of integrity, are not\r\n                    licensed under this Public License, nor are publicity,\r\n                    privacy, and/or other similar personality rights; however, to\r\n                    the extent possible, the Licensor waives and/or agrees not to\r\n                    assert any such rights held by the Licensor to the limited\r\n                    extent necessary to allow You to exercise the Licensed\r\n                    Rights, but not otherwise.\r\n            \r\n            \r\n                Patent and trademark rights are not licensed under this\r\n                    Public License.\r\n            \r\n            \r\n                To the extent possible, the Licensor waives any right to\r\n                    collect royalties from You for the exercise of the Licensed\r\n                    Rights, whether directly or through a collecting society\r\n                    under any voluntary or waivable statutory or compulsory\r\n                    licensing scheme. In all other cases the Licensor expressly\r\n                    reserves any right to collect such royalties.Section 3 – License Conditions.Your exercise of the Licensed Rights is expressly made subject to the\r\n    following conditions.Attribution.\r\n        \r\n            \r\n                If You Share the Licensed Material (including in modified\r\n                    form), You must:\r\n                \r\n                    \r\n                        retain the following if it is supplied by the Licensor\r\n                            with the Licensed Material:\r\n                        \r\n                            \r\n                                identification of the creator(s) of the Licensed\r\n                                    Material and any others designated to receive\r\n                                    attribution, in any reasonable manner requested by\r\n                                    the Licensor (including by pseudonym if\r\n                                    designated);\r\n                            \r\n                            \r\n                                a copyright notice;\r\n                            \r\n                            \r\n                                a notice that refers to this Public License;\r\n                            \r\n                            \r\n                                a notice that refers to the disclaimer of\r\n                                    warranties;\r\n                            \r\n                            \r\n                                a URI or hyperlink to the Licensed Material to the\r\n                                    extent reasonably practicable;\r\n                            \r\n                        \r\n                    \r\n                    \r\n                        indicate if You modified the Licensed Material and\r\n                            retain an indication of any previous modifications; and\r\n                    \r\n                    \r\n                        indicate the Licensed Material is licensed under this\r\n                            Public License, and include the text of, or the URI or\r\n                            hyperlink to, this Public License.\r\n                    \r\n                \r\n            \r\n            \r\n                You may satisfy the conditions in Section 3(a)(1) in any\r\n                    reasonable manner based on the medium, means, and context in\r\n                    which You Share the Licensed Material. For example, it may be\r\n                    reasonable to satisfy the conditions by providing a URI or\r\n                    hyperlink to a resource that includes the required\r\n                    information.\r\n            \r\n            \r\n                If requested by the Licensor, You must remove any of the\r\n                    information required by Section 3(a)(1)(A) to the extent\r\n                    reasonably practicable.\r\n            \r\n            \r\n                If You Share Adapted Material You produce, the Adapter’s\r\n                    License You apply must not prevent recipients of the Adapted\r\n                    Material from complying with this Public License.Section 4 – Sui Generis Database Rights.Where the Licensed Rights include Sui Generis Database Rights that\r\n    apply to Your use of the Licensed Material:for the avoidance of doubt, Section 2(a)(1) grants You the right\r\n            to extract, reuse, reproduce, and Share all or a substantial\r\n            portion of the contents of the database;\r\n    \r\n    \r\n        if You include all or a substantial portion of the database\r\n            contents in a database in which You have Sui Generis Database\r\n            Rights, then the database in which You have Sui Generis Database\r\n            Rights (but not its individual contents) is Adapted Material; and\r\n    \r\n    \r\n        You must comply with the conditions in Section 3(a) if You Share\r\n            all or a substantial portion of the contents of the database.For the avoidance of doubt, this Section 4 supplements and does not\r\n    replace Your obligations under this Public License where the Licensed\r\n    Rights include other Copyright and Similar Rights.Section 5 – Disclaimer of Warranties and Limitation of Liability.UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\r\n            EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\r\n            AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\r\n            ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\r\n            IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\r\n            WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\r\n            PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\r\n            ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\r\n            KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\r\n            ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\r\n    \r\n    \r\n        TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\r\n            TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\r\n            NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\r\n            INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\r\n            COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\r\n            USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\r\n            ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\r\n            DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\r\n            IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\r\n    \r\n    \r\n        The disclaimer of warranties and limitation of liability provided\r\n            above shall be interpreted in a manner that, to the extent\r\n            possible, most closely approximates an absolute disclaimer and\r\n            waiver of all liability.Section 6 – Term and Termination.This Public License applies for the term of the Copyright and\r\n            Similar Rights licensed here. However, if You fail to comply with\r\n            this Public License, then Your rights under this Public License\r\n            terminate automatically.\r\n    \r\n    \r\n        Where Your right to use the Licensed Material has terminated under\r\n            Section 6(a), it reinstates:\r\n        \r\n            \r\n                automatically as of the date the violation is cured, provided\r\n                    it is cured within 30 days of Your discovery of the\r\n                    violation; or\r\n            \r\n            \r\n                upon express reinstatement by the Licensor.\r\n            \r\n        \r\n        For the avoidance of doubt, this Section 6(b) does not affect any\r\n            right the Licensor may have to seek remedies for Your violations\r\n            of this Public License.\r\n    \r\n    \r\n        For the avoidance of doubt, the Licensor may also offer the\r\n            Licensed Material under separate terms or conditions or stop\r\n            distributing the Licensed Material at any time; however, doing so\r\n            will not terminate this Public License.\r\n    \r\n    \r\n        Sections 1, 5, 6, 7, and 8 survive termination of this Public\r\n            License.Section 7 – Other Terms and Conditions.The Licensor shall not be bound by any additional or different\r\n            terms or conditions communicated by You unless expressly agreed.\r\n    \r\n    \r\n        Any arrangements, understandings, or agreements regarding the\r\n            Licensed Material not stated herein are separate from and\r\n            independent of the terms and conditions of this Public License.Section 8 – Interpretation.For the avoidance of doubt, this Public License does not, and\r\n            shall not be interpreted to, reduce, limit, restrict, or impose\r\n            conditions on any use of the Licensed Material that could lawfully\r\n            be made without permission under this Public License.\r\n    \r\n    \r\n        To the extent possible, if any provision of this Public License is\r\n            deemed unenforceable, it shall be automatically reformed to the\r\n            minimum extent necessary to make it enforceable. If the provision\r\n            cannot be reformed, it shall be severed from this Public License\r\n            without affecting the enforceability of the remaining terms and\r\n            conditions.\r\n    \r\n    \r\n        No term or condition of this Public License will be waived and no\r\n            failure to comply consented to unless expressly agreed to by the\r\n            Licensor.\r\n    \r\n    \r\n        Nothing in this Public License constitutes or may be interpreted\r\n            as a limitation upon, or waiver of, any privileges and immunities\r\n            that apply to the Licensor or You, including from the legal\r\n            processes of any jurisdiction or authority.Creative Commons is not a party to its public licenses.\r\n    Notwithstanding, Creative Commons may elect to apply one of its public\r\n    licenses to material it publishes and in those instances will be\r\n    considered the “Licensor.” The text of the Creative Commons public\r\n    licenses is dedicated to the public domain under the CC0 Public Domain\r\n    Dedication. Except for the limited purpose of indicating that material\r\n    is shared under a Creative Commons public license or as otherwise\r\n    permitted by the Creative Commons policies published at\r\n    creativecommons.org/policies, Creative Commons does not authorize\r\n    the\r\n    use of the trademark “Creative Commons” or any other trademark or logo\r\n    of Creative Commons without its prior written consent including,\r\n    without limitation, in connection with any unauthorized modifications\r\n    to any of its public licenses or any other arrangements,\r\n    understandings, or agreements concerning use of licensed material. For\r\n    the avoidance of doubt, this paragraph does not form part of the public\r\n    licenses.Creative Commons may be contacted at creativecommons.org.","n":0.02},"2":{"v":"/legal/license.html","n":1}}},{"i":346,"$":{"0":{"v":"Privacy Policy","n":0.707},"1":{"v":"Privacy PolicyThank you for choosing to be part of our community at Dinner Coding Time (\"Company\", \"we\", \"us\",\r\n            \"our\"). We are committed to protecting your personal information and your right to privacy. If you have\r\n            any questions or concerns about this privacy notice, or our practices with regards to your personal\r\n            information, please contact us at contact@dinnercodingtime.com.When you visit our website dinnercodingtime.com (the \"Website\"), and more generally, use any of our\r\n            services (the \"Services\", which include the Website), we appreciate that you are trusting us with your\r\n            personal information. We take your privacy very seriously. In this privacy notice, we seek to explain to you\r\n            in the clearest way possible what information we collect, how we use it and what rights you have in relation\r\n            to it. We hope you take some time to read through it carefully, as it is important. If there are any terms\r\n            in this privacy notice that you do not agree with, please discontinue use of our Services immediately.This privacy notice applies to all information collected through our Services (which, as described above,\r\n            includes our Website), as well as, any related services, sales, marketing or events.Information CollectedWe automatically collect certain information when you visit, use or navigate the Website. This information\r\n            does\r\n            not reveal your specific identity (like your name or contact information) but may include device and usage\r\n            information, such as your IP address, browser and device characteristics, operating system, language\r\n            preferences, referring URLs, device name, country, location, information about how and when you use our\r\n            Website\r\n            and other technical information. This information is primarily needed to maintain the security and operation\r\n            of\r\n            our Website, and for our internal analytics and reporting purposes.The information we collect includes:Log and Usage Data\r\n                Log and usage data is service-related, diagnostic, usage and performance information our\r\n                    servers automatically collect when you access or use our Website and which we record in log files.\r\n                    Depending on\r\n                    how you interact with us, this log data may include your device information, browser\r\n                    type, and information about your activity in the Website (such as the date/time stamps associated\r\n                    with your usage, error reports, pages and files viewed, searches, and other actions you take such as\r\n                    which features are used).\r\n                    We do not remember you from visit to visit, and all inter-visit data is completely\r\n                        removed.\r\n                \r\n                \r\n            \r\n            \r\n                Device Data\r\n                We collect device data such as information about your computer, phone, tablet or other device you\r\n                    use to access the Website. Depending on the device used, this device data may include information\r\n                    such as the first 3 bytes of your IP address (or proxy server),\r\n                    your device and browser identification numbers, your approximate location, browser type,\r\n                    hardware model, Internet service provider and/or mobile carrier, and operating system.\r\n                    This data is anonymized in order to ensure that none of the data can be related specifically\r\n                        to you.\r\n                \r\n            \r\n            \r\n                Location Data\r\n                \r\n                    We collect location data such as information about your device's location. This data is\r\n                        imprecise and anonymized.How do we use your information?Monitor usage\r\n                We use analytics to learn which pages are commonly used, what features are useful, and what we should focus on in the future.\r\n            \r\n            \r\n                Site Activity\r\n                We count the number of pageviews on the website in order to keep metrics on site activity.\r\n            \r\n            \r\n                Feedback\r\n                Certain active interactions (for example, clicking the \"Was this page helpful\" box) will record an event in order to give accurate feedback.Do we share your information with anyone?Unless legally or contracturally obligated, we don't. Aggregate information, such as total pageviews, may be made publicly available.Do Not Track (DNT) PolicyWe proudly support DNT and the DNT header setting. Because of the fact that we do not track anyone\r\n            or record any personal information, your privacy is still preserved if you do not have this header\r\n            set.Special Rights by Region or CountryAll users are afforded equal data privacy rights. These rights encompass all applicable laws and regulations (e.g. GDPR).Rights to access and removal of dataWe do not have the technical capability to discern what data originated with which user. For this reason, we do not provide serivces for access or removal of data","n":0.038},"2":{"v":"/legal/privacy.html","n":1}}},{"i":347,"$":{"0":{"v":"Oh No It Got Taken Down","n":0.408},"1":{"v":"Oh No It Got Taken DownI've said that this site was entirely legal, and it is. However, I've also said that I'd take it down if my teacher asked me to, and he did.Apparently, CodeHS had contacted him, which is a weird and bad position for him to be in,\r\n            so I don't begrudge him one bit for asking me to take it down.I'm sorry for the inconvenience to everyone who uses this site for help. If you want to join the Discord, I'd still love to\r\n            help you with any questions you have.Thank you!GitHub\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                        \r\n                    \r\n                    Discord\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                        \r\n                    \r\n                    Email","n":0.095},"2":{"v":"/legal/takedown.html","n":1}}},{"i":348,"$":{"0":{"v":"Terms and Conditions","n":0.577},"1":{"v":"Terms and ConditionsLast updated: January 04, 2021Please read these terms and conditions carefully before using Our Service.Interpretation and DefinitionsInterpretationThe words of which the initial letter is capitalized have meanings defined under the following conditions.\r\n            The following definitions shall have the same meaning regardless of whether they appear in singular or in\r\n            plural.DefinitionsFor the purposes of these Terms and Conditions:Affiliate means an entity that controls, is controlled by or is under common control\r\n                    with a party, where \"control\" means ownership of 50% or more of the shares, equity\r\n                    interest or other securities entitled to vote for election of directors or other managing authority.\r\n                \r\n            \r\n            \r\n                Country refers to: Massachusetts, United States\r\n            \r\n            \r\n                Company (referred to as either \"the Company\", \"We\",\r\n                    \"Us\" or \"Our\" in this Agreement) refers to Dinner Coding Time.\r\n            \r\n            \r\n                Device means any device that can access the Service such as a computer, a cellphone\r\n                    or a digital tablet.\r\n            \r\n            \r\n                Service refers to the Website.\r\n            \r\n            \r\n                Terms and Conditions (also referred as \"Terms\") mean these Terms and\r\n                    Conditions that form the entire agreement between You and the Company regarding the use of the\r\n                    Service. This Terms and Conditions agreement has been created with the help of the Terms and\r\n                        Conditions Generator.\r\n            \r\n            \r\n                Third-party Social Media Service means any services or content (including data,\r\n                    information, products or services) provided by a third-party that may be displayed, included or made\r\n                    available by the Service.\r\n            \r\n            \r\n                Website refers to Dinner Coding Time, accessible from https://dinnercodingtime.com\r\n            \r\n            \r\n                You means the individual accessing or using the Service, or the company, or other\r\n                    legal entity on behalf of which such individual is accessing or using the Service, as applicable.AcknowledgmentThese are the Terms and Conditions governing the use of this Service and the agreement that operates between\r\n            You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding\r\n            the use of the Service.Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms\r\n            and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the\r\n            Service.By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with\r\n            any part of these Terms and Conditions then You may not access the Service.You represent that you are over the age of 18. The Company does not permit those under 18 to use the Service.Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the\r\n            Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection,\r\n            use and disclosure of Your personal information when You use the Application or the Website and tells You\r\n            about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before\r\n            using Our Service.Links to Other WebsitesOur Service may contain links to third-party web sites or services that are not owned or controlled by the\r\n            Company.The Company has no control over, and assumes no responsibility for, the content, privacy policies, or\r\n            practices of any third party web sites or services. You further acknowledge and agree that the Company shall\r\n            not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused\r\n            by or in connection with the use of or reliance on any such content, goods or services available on or\r\n            through any such web sites or services.We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or\r\n            services that You visit.TerminationWe may terminate or suspend Your access immediately, without prior notice or liability, for any reason\r\n            whatsoever, including without limitation if You breach these Terms and Conditions.Upon termination, Your right to use the Service will cease immediately.Limitation of LiabilityNotwithstanding any damages that You might incur, the entire liability of the Company and any of its\r\n            suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be\r\n            limited to the amount actually paid by You through the Service or 100 USD if You haven't purchased anything\r\n            through the Service.To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable\r\n            for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to,\r\n            damages for loss of profits, loss of data or other information, for business interruption, for personal\r\n            injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service,\r\n            third-party software and/or third-party hardware used with the Service, or otherwise in connection with any\r\n            provision of this Terms), even if the Company or any supplier has been advised of the possibility of such\r\n            damages and even if the remedy fails of its essential purpose.Some states do not allow the exclusion of implied warranties or limitation of liability for incidental or\r\n            consequential damages, which means that some of the above limitations may not apply. In these states, each\r\n            party's liability will be limited to the greatest extent permitted by law.\"AS IS\" and \"AS AVAILABLE\" DisclaimerThe Service is provided to You \"AS IS\" and \"AS AVAILABLE\" and with all faults and defects\r\n            without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own\r\n            behalf and on behalf of its Affiliates and its and their respective licensors and service providers,\r\n            expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the\r\n            Service, including all implied warranties of merchantability, fitness for a particular purpose, title and\r\n            non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or\r\n            trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and\r\n            makes no representation of any kind that the Service will meet Your requirements, achieve any intended\r\n            results, be compatible or work with any other software, applications, systems or services, operate without\r\n            interruption, meet any performance or reliability standards or be error free or that any errors or defects\r\n            can or will be corrected.Without limiting the foregoing, neither the Company nor any of the company's provider makes any\r\n            representation or warranty of any kind, express or implied: (i) as to the operation or availability of the\r\n            Service, or the information, content, and materials or products included thereon; (ii) that the Service will\r\n            be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or\r\n            content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent\r\n            from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or\r\n            other harmful components.Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable\r\n            statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You.\r\n            But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest\r\n            extent enforceable under applicable law.Governing LawThe laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the\r\n            Service. Your use of the Application may also be subject to other local, state, national, or international\r\n            laws.Disputes ResolutionIf You have any concern or dispute about the Service, You agree to first try to resolve the dispute\r\n            informally by contacting the Company.For European Union (EU) UsersIf You are a European Union consumer, you will benefit from any mandatory provisions of the law of the\r\n            country in which you are resident in.United States Legal ComplianceYou represent and warrant that (i) You are not located in a country that is subject to the United States\r\n            government embargo, or that has been designated by the United States government as a \"terrorist\r\n            supporting\" country, and (ii) You are not listed on any United States government list of prohibited or\r\n            restricted parties.Severability and WaiverSeverabilityIf any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and\r\n            interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable\r\n            law and the remaining provisions will continue in full force and effect.WaiverExcept as provided herein, the failure to exercise a right or to require performance of an obligation under\r\n            this Terms shall not effect a party's ability to exercise such right or require such performance at any time\r\n            thereafter nor shall be the waiver of a breach constitute a waiver of any subsequent breach.Translation InterpretationThese Terms and Conditions may have been translated if We have made them available to You on our Service.\r\n            You agree that the original English text shall prevail in the case of a dispute.Changes to These Terms and ConditionsWe reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is\r\n            material We will make reasonable efforts to provide at least 30 days' notice prior to any new terms taking\r\n            effect. What constitutes a material change will be determined at Our sole discretion.By continuing to access or use Our Service after those revisions become effective, You agree to be bound by\r\n            the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website\r\n            and the Service.Contact UsIf you have any questions about these Terms and Conditions, You can contact us:By email: contact@dinnercodingtime.com","n":0.025},"2":{"v":"/legal/terms.html","n":1}}},{"i":349,"$":{"0":{"v":"Flights Miles and Points","n":0.5},"1":{"v":"Flights Miles and Pointspublic class Flight {\r\n                private String departureCity;\r\n                private String destinationCity;\r\n                private double miles;\r\n                \r\n                public Flight(String departureCity, String destinationCity, double miles) {\r\n                    this.departureCity = departureCity;\r\n                    this.destinationCity = destinationCity;\r\n                    this.miles = miles;\r\n                }\r\n                \r\n                public double getMiles() {\r\n                    return miles;\r\n                }\r\n                public double creditCardPointsEarned() {\r\n                    double points = 0;\r\n                    \r\n                    if(miles <= 500) {\r\n                        //for the first 500 miles, you just get 1 point per mile.\r\n                        points = miles;\r\n                    }\r\n                    else if(miles <= 1500) {\r\n                        //here's where it starts getting tricky-- you need 500 (from the first 500 miles), plus 2*the remaining miles (so miles - 500)\r\n                        points = 500 + 2 * (miles - 500);\r\n                    }\r\n                    else {\r\n                        //same theory, just with 5 and 1500 instead of 2 and 500. add (500+((1500-500)*2))\r\n                        points = (500+1000*2) + 5 * (miles - 1500);\r\n                    }\r\n                    \r\n                    //maximum of 10000 points per flight; use Math.min method for that.\r\n                    return Math.min(10000, points);\r\n                }\r\n            }public class FlightTester {\r\n                public static void main(String[] args) {\r\n                    //idk geography, idec if these are accurate\r\n                    Flight flight1 = new Flight(\"Boston\", \"Tokyo\", 3000);\r\n                    Flight flight2 = new Flight(\"New York City\", \"Vancouver\", 100);\r\n                    Flight flight3 = new Flight(\"Austin\", \"San Diego\", 700);\r\n                    \r\n                    //compute total flight miles & points\r\n                    double totalMiles = 0;\r\n                    double totalPoints = 0;\r\n                    \r\n                    totalMiles += flight1.getMiles();\r\n                    totalPoints += flight1.creditCardPointsEarned();\r\n                    \r\n                    totalMiles += flight2.getMiles();\r\n                    totalPoints += flight2.creditCardPointsEarned();\r\n                    \r\n                    totalMiles += flight3.getMiles();\r\n                    totalPoints += flight3.creditCardPointsEarned();\r\n                    \r\n                    //print out totals\r\n                    System.out.println(\"Total Miles: \" + totalMiles);\r\n                    System.out.println(\"Total Points: \" + totalPoints);\r\n                }\r\n            }","n":0.064},"2":{"v":"/on-request-from-discord/first-quarter-final-spring-2021/flights.html","n":1}}},{"i":350,"$":{"0":{"v":"1st Quarter Final: Spring 2021","n":0.447},"1":{"v":"1st Quarter Final: Spring 2021Here are the answers for the First Quarter Final: Spring 2021, asked by Nikaido on the Discord.Spring 2021\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Answers\r\n                            \r\n                            \r\n                                \r\n                                    Flights Miles and Points\r\n                                \r\n                                \r\n                                    Word Count","n":0.162},"2":{"v":"/on-request-from-discord/first-quarter-final-spring-2021/","n":1}}},{"i":351,"$":{"0":{"v":"Word Count","n":0.707},"1":{"v":"Word Countimport java.util.Scanner;\r\npublic class WordCount {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        System.out.println(\"Give me a string of text\");\r\n        String text = sc.nextLine();\r\n        \r\n        System.out.println(\"Give me a single character\");\r\n        \r\n        //this is weird but char doesn't have its own method. this is how you'd do it instead\r\n        char letter = sc.next().charAt(0);\r\n        \r\n        System.out.println(\"Word count: \" + wordCount(text));\r\n        System.out.println(\"Percent of words that start with letter: \" + (percentStartWith(text, letter)*100) + \"%\");\r\n        \r\n    }\r\n    public static int wordCount(String text) {\r\n        //it'll always have at least 1 word\r\n        int words = 1;\r\n        \r\n        for(int i = 0; i < text.length(); i++) {\r\n            if(text.charAt(i) == ' ') {\r\n                words++;\r\n            }\r\n        }\r\n        return words;\r\n    }\r\n    public static double percentStartWith(String text, char letter) {\r\n        int totalWordsCount = wordCount(text);\r\n        int wordsThatStartWith = 0;\r\n        \r\n        //the first letter will always start a word, so this starts as `true`\r\n        boolean nextCharacterStartsWord = true;\r\n        \r\n        for(int i = 0; i < text.length(); i++) {\r\n            //if this is the start of the word, process it\r\n            if(nextCharacterStartsWord) {\r\n                if(text.charAt(i) == letter) {\r\n                    wordsThatStartWith++;\r\n                }\r\n            }\r\n            //when this character is a space, remember that the next character will be the start of a word;\r\n            //this will be checked in the next iteration.\r\n            //reset it to false when this character *isn't* a space\r\n            if(text.charAt(i) == ' ') {\r\n                nextCharacterStartsWord = true;\r\n            }\r\n            else {\r\n                nextCharacterStartsWord = false;\r\n            }\r\n        }\r\n        return wordsThatStartWith / ((double)totalWordsCount);\r\n    }\r\n}","n":0.065},"2":{"v":"/on-request-from-discord/first-quarter-final-spring-2021/word-count.html","n":1}}},{"i":352,"$":{"0":{"v":"On Request from Discord","n":0.5},"1":{"v":"On Request from DiscordThis is where I hold random requests from the Discord, for when teachers have implemented their own challenges on CodeHS.For privacy reasons, there's not really a public list of these, but they will be accessible on Google if you know what to look for.If you have a question that Dinner Coding Time can't answer, please ask it on the Discord! I might not be able to answer it right away, but someone should be able to help you ASAP.","n":0.11},"2":{"v":"/on-request-from-discord/","n":1}}},{"i":353,"$":{"0":{"v":"Report a Bug","n":0.577},"1":{"v":"Report a BugYou can report bugs through this Google Form, email at bug-report@dinnercodingtime.com, or through the unofficial AP Discord in the #cs channelI'm an AP student too, so I might take a bit to respond to bug reports.","n":0.162},"2":{"v":"/report-bug.html","n":1}}},{"i":354,"$":{"0":{"v":"Search Results","n":0.707},"1":{"v":"Search Results","n":0.707},"2":{"v":"/search.html","n":1}}},{"i":355,"$":{"0":{"v":"Converting Decimal to Binary","n":0.5},"1":{"v":"Converting Decimal to BinaryThe Easy WayJava gives us a method to convert binary!\n    Of course, teachers usually don't mean\n    for you to use it. They want you to code something yourself. However, methods like this are usually more\n    efficient and bug-tested than anything that a coder could make.You should always feel\n    justified in using a language's features instead of coding your own: that's what they're there for! To\n    use\n    the Integer.toBinaryString() method, pass any integer to it.int foo = 2003040;\nString binaryString = Integer.toBinaryString(foo);\n\n    Using the toBinaryString method to convert an int to\n        binarytoString with radix/baseIf the toBinaryString method doesn't work on your version\nof Java, try using toString with a radix.int foo = 2003040;\nString binaryString = Integer.toString(foo, 2);\n When passed a base of 2, Java converts the int to binary.\n    This also works for other common bases, like octal or hexidecimalThe Boring WaySome teachers don't like this. As in, get-a-zero-if-you-use-those-methods. Here is some\ncode for binary conversion that uses none of those methods!\n\nint foo = 2003040;\nString result = \"\";\nwhile(foo > 0) {\n&nbsp;&nbsp;&nbsp; result = (foo % 2) + result;\n&nbsp;&nbsp;&nbsp; foo /= 2;\n}\n By repeatedly dividing by 2, we can build a binary string\n    digit-by-digit.\n    \n    It's easiest to understand this when you think of how\ndecimal numbers work. Each digit place is 10 times larger (tens; hundreds;\nthousands; et cetera). With binary, each digit place is only two times larger, so dividing by\n    2 \"moves\" the decimal place 1 smaller. Since this code deals with integers, we don't have to worry\nabout numbers past the decimal point.From there, the code uses the modulus operator to add the\nremainder onto the start of the binary string. When it's completed, the result\nvariable will hold a converted binary version!","n":0.06},"2":{"v":"/snippets/decimal-to-binary.html","n":1}}}]};
list = [{"title":"Error: 404 Not Found","text":"Error: 404 Not FoundThis page could not be found in the system. This could be caused by a typo in the address bar.Please make sure that the address is correct. You can try:Going to the previous page to try again\r\n            Refreshing the page\r\n            Looking for typos in the address\r\n            Asking whoever gave you this link for a working one\r\n            Disabling adblocker (RARELY, an adblocker can cause problems for specific pages)","address":"/404.html"},{"title":"About This Site","text":"About This SiteThis is a site with answers for CodeHS, specifically the A.P. Computer Science A lessons.It's originally for my high school's curriculum, but it seems like some other people might like it too.\r\n                nice!FAQIs this legal?? Like, taking stuff from CodeHS?Yep! Check out the Fair Use StatementDo you track users?I've got a custom page analytics script based on Matomo. It only records\r\n                the following information:\r\n            \r\n                Someone viewed a page\r\n                The address of the page that was viewed\r\n                How quickly the page loaded\r\n                What browser/OS you used\r\n                Your general location (i.e. region of the country)\r\n            \r\n            Your IP address is not saved, and no cookies are used. I don't sell your data. No personally identifiable\r\n            information is recorded, ever. I don't want your information. Keep that stuff to yourself, man :/My teacher gave me a challenge that isn't on here-- huh?Some teachers have implemented their own challenges on CodeHS. I don't have those unique challenges,\r\n                sorry; I'd be glad to help you with them, though!If you have a question that Dinner Coding Time can't answer, please ask it on the Discord! I might not be able to answer\r\n                it right away, but someone should be able to help you ASAP.","address":"/about.html"},{"title":"Author","text":"AuthorThis page is a placeholder for authors who want to remain anonymous, or who don't care about detailed attribution.Thank you to everyone who's volunteered their time or code to help others grow!","address":"/author.html"},{"title":"String-1 > comboString","text":"String-1 > comboStringpublic String comboString(String a, String b) {\r\n  if (a.length() > b.length()) {\r\n    return b + a + b;\r\n  } else {\r\n    return a + b + a;\r\n  }\r\n}","address":"/classwork/codingbat/string-1/comboString.html"},{"title":"String-1 > extraEnd","text":"String-1 > extraEndpublic String extraEnd(String str) {\r\n  String temp = str.substring(str.length() - 2);\r\n  return temp + temp + temp;\r\n}","address":"/classwork/codingbat/string-1/extraEnd.html"},{"title":"String-1 > firstHalf","text":"String-1 > firstHalfpublic String firstHalf(String str) {\r\n  return str.substring(0, str.length()/2);\r\n}","address":"/classwork/codingbat/string-1/firstHalf.html"},{"title":"String-1 > firstTwo","text":"String-1 > firstTwopublic String firstTwo(String str) {\r\n  if (str.length() == 0) {\r\n    return \"\";\r\n  } else if (str.length() == 1) {\r\n    return str;\r\n  } else {\r\n    return str.substring(0, 2);\r\n  }\r\n}","address":"/classwork/codingbat/string-1/firstTwo.html"},{"title":"String-1 > helloName","text":"String-1 > helloNamepublic String helloName(String name) {\r\n  return \"Hello \" + name + \"!\";\r\n}","address":"/classwork/codingbat/string-1/helloName.html"},{"title":"String-1 > left2","text":"String-1 > left2public String left2(String str) {\r\n  String start = str.substring(0, 2);\r\n  String end = str.substring(2);\r\n  \r\n  return end + start;\r\n}","address":"/classwork/codingbat/string-1/left2.html"},{"title":"String-1 > makeAbba","text":"String-1 > makeAbbapublic String makeAbba(String a, String b) {\r\n  return a + b + b + a;\r\n}","address":"/classwork/codingbat/string-1/makeAbba.html"},{"title":"String-1 > makeOutWord","text":"String-1 > makeOutWordpublic String makeOutWord(String out, String word) {\r\n  return out.substring(0,2) + word + out.substring(2);\r\n}","address":"/classwork/codingbat/string-1/makeOutWord.html"},{"title":"String-1 > makeTags","text":"String-1 > makeTagspublic String makeTags(String tag, String word) {\r\n  return \"<\" + tag + \">\" + word + \"</\" + tag + \">\";\r\n}","address":"/classwork/codingbat/string-1/makeTags.html"},{"title":"String-1 > nonStart","text":"String-1 > nonStartpublic String nonStart(String a, String b) {\r\n  String concat1 = a.substring(1);\r\n  String concat2 = b.substring(1);\r\n  \r\n  return concat1 + concat2;\r\n}","address":"/classwork/codingbat/string-1/nonStart.html"},{"title":"String-1 > right2","text":"String-1 > right2public String right2(String str) {\r\n  String end = str.substring(str.length() - 2);\r\n  String start = str.substring(0, str.length() - 2);\r\n  \r\n  return end + start;\r\n}","address":"/classwork/codingbat/string-1/right2.html"},{"title":"String-1 > withoutEnd","text":"String-1 > withoutEndpublic String withoutEnd(String str) {\r\n  return str.substring(1, str.length() - 1);\r\n  \r\n}","address":"/classwork/codingbat/string-1/withoutEnd.html"},{"title":"String-3 > countYZ","text":"String-3 > countYZpublic int countYZ(String str) {\r\n                int words = 0;\r\n                \r\n                for(int i = 0; i < str.length(); i++) {\r\n              \r\n                  if(\r\n                      //put end-checker first so that it'll short-circuit if we're at the end and not try to get an undefined character for the space\r\n                      (i + 1 == str.length() || !Character.isLetter(str.charAt(i+1))) && \r\n                      (str.toLowerCase().charAt(i) == 'y' || str.toLowerCase().charAt(i) == 'z')\r\n                    ) {\r\n                      words++;\r\n                    }\r\n                }\r\n                \r\n                return words;\r\n              }","address":"/classwork/codingbat/string-3/countYZ.html"},{"title":"Classwork","text":"ClassworkBelow are all Classwork answers. This includes CodingBat, as well as some select projects.CodingBat\r\n                \r\n                    \r\n                        \r\n                            \r\n                                String-1\r\n                            \r\n                            \r\n                                \r\n                                    helloName\r\n                                \r\n                                \r\n                                    makeAbba\r\n                                \r\n                                \r\n                                    makeTags\r\n                                \r\n                                \r\n                                    makeOutWord\r\n                                \r\n                                \r\n                                    extraEnd\r\n                                \r\n                                \r\n                                    firstTwo\r\n                                \r\n                                \r\n                                    firstHalf\r\n                                \r\n                                \r\n                                    withoutEnd\r\n                                \r\n                                \r\n                                    comboString\r\n                                \r\n                                \r\n                                    nonStart\r\n                                \r\n                                \r\n                                    left2\r\n                                \r\n                                \r\n                                    right2\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                String-3\r\n                            \r\n                            \r\n                                \r\n                                    countYZ","address":"/classwork/"},{"title":"CodeHS Courses","text":"CodeHS CoursesJava\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    Python 3\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    Python 2\r\n                    Coming soon!\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    Javascript\r\n                    Coming soon!\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                    HTML\r\n                    Coming soon!","address":"/codehs/"},{"title":"1.2.6 ASCII Art","text":"1.2.6 ASCII Artpublic class Art \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   System.out.println(\"   /)___\");\r\n                   System.out.println(\"  /     O|___\");\r\n                   System.out.println(\" /           )\");\r\n                   System.out.println(\"/       )___/\");\r\n                }\r\n            \r\n            }","address":"/codehs/java/1/2/ascii-art.html"},{"title":"1.2.7 Fixing a Paragraph","text":"1.2.7 Fixing a Paragraphpublic class TomatoEssay\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Start here!\r\n                    System.out.println(\"Is a tomato a fruit or a vegetable?\");\r\n                    System.out.println(\"While biologically speaking a tomato is a fruit, legally speaking it is a vegetable!\");\r\n                    System.out.println(\"In Supreme Court Case Nix v. Hedden, the Court ruled that tomatoes should be classified as a vegetable under U.S Customs regulations because they are consumed more like a vegetable than a fruit, and should be taxed as such.\");\r\n                    System.out.println(\"When tomatos are shipped into the U.S, they are now taxed as vegetables even though their anatomy suggests otherwise.\");\r\n                }\r\n            }","address":"/codehs/java/1/2/fixing-a-paragraph.html"},{"title":"1.2.8 Making Popcorn","text":"1.2.8 Making Popcornpublic class MakingPopcorn\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"3 Ways to Heat Anything\");\r\n            System.out.println(\"Each of the 3 methods below is an example of the three ways that heat can be transferred.\");\r\n            System.out.println(\"\");\r\n            System.out.println(\"Conduction\");\r\n            System.out.println(\"Conduction is heat transfer through matter. Metals conduct heat well, but air does not. This is a direct contact type of heat transfer.\");\r\n            System.out.println(\"\");\r\n            System.out.println(\"Convection\");\r\n            System.out.println(\"Convection is heat transfer by the movement of mass from one place to another. It can take place only in liquids and gases. Heat gained by conduction or radiation is moved by convection.\");\r\n            System.out.println(\"\");\r\n            System.out.println(\"Radiation\");\r\n            System.out.println(\"Radiation can transfer heat through the relative emptiness of space. All other forms of heat transfer require motion of molecules like air or water to move heat.\");\r\n            \r\n                }\r\n            }","address":"/codehs/java/1/2/making-popcorn.html"},{"title":"1.2.9 Personal Timeline","text":"1.2.9 Personal Timelinepublic class Timeline\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Age  | M/YY Description\");\r\n                    System.out.println(\"7    | \");\r\n                    System.out.println(\"     | 5/08 - lorem ipsum\");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"9    | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"11   | 1/14 - amet sit dolor\");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | 6/14 - consectetur \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"13   | 2/16 - adipiscing elit, \");\r\n                    System.out.println(\"     | 3/16 - sed do eiusmod\");\r\n                    System.out.println(\"     | 9/16 - tempor incididunt ut labore\");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"15   | \");\r\n                    System.out.println(\"     | \");\r\n                    System.out.println(\"     | \");\r\n                }\r\n            }","address":"/codehs/java/1/2/personal-timeline.html"},{"title":"1.2.5 Welcome Program","text":"1.2.5 Welcome Programpublic class Welcome \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Your code will go here\r\n        // These lines are comments\r\n        // Java ignores anything that comes after \r\n        // two forward slashes\r\n        // You can delete the comments or leave them in\r\n        // Java ignores them anyway!\r\n        System.out.println(\"My name is Quin.\");\r\n        System.out.println(\"I like video games.\");\r\n    } \r\n}","address":"/codehs/java/1/2/welcome-program.html"},{"title":"1.3.8 Answering Questions","text":"1.3.8 Answering Questionspublic class Variables \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String myName = \"Karel the Dog\";\r\n                    int luckyNumber = 11;\r\n                    double currentTemperature = 75.3;\r\n                    boolean isStudent = true;\r\n                    \r\n                    System.out.println(myName);\r\n                    System.out.println(luckyNumber);\r\n                    System.out.println(currentTemperature);\r\n                    System.out.println(isStudent);\r\n                }\r\n            }","address":"/codehs/java/1/3/answering-questions.html"},{"title":"1.3.5 Our First Integer","text":"1.3.5 Our First Integerpublic class Variables\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int thisYear = 1970;\r\n                    System.out.println(\"The current year is\" + thisYear);\r\n                }\r\n            }","address":"/codehs/java/1/3/our-first-integer.html"},{"title":"1.3.9 Team Rankings","text":"1.3.9 Team Rankingspublic class TeamRanks\r\n            {\r\n                public static void main(String[] args) {\r\n                    String team1 = \"Alabama\";\r\n                    String team2 = \"Ohio State\";\r\n                    String team3 = \"Florida State\";\r\n                    String team4 = \"USC\";\r\n                    String team5 = \"Clemson\";\r\n                    String team6 = \"Penn State\";\r\n                    String team7 = \"Oklahoma\";\r\n                    String team8 = \"Maryland\";\r\n                    String team9 = \"Wisconsin\";\r\n                    String team10 = \"Michigan\";\r\n            \r\n                    /*\r\n                     * Don't edit above this line.\r\n                     * Enter your code below this comment.\r\n                     */\r\n            \r\n                    String tmp1 = team1;\r\n                    String tmp2 = team2;\r\n                    String tmp3 = team3;\r\n                    String tmp4 = team4;\r\n                    String tmp5 = team5;\r\n                    String tmp6 = team6;\r\n                    String tmp7 = team7;\r\n                    String tmp8 = team8;\r\n                    String tmp9 = team9;\r\n                    String tmp10 = team10;\r\n            \r\n                    team2 = tmp6;\r\n                    team3 = tmp8;\r\n                    team4 = tmp10;\r\n                    team5 = tmp4;\r\n                    team6 = tmp5;\r\n                    team8 = tmp9;\r\n                    team9 = tmp3;\r\n                    team10 = tmp2;\r\n                    \r\n                    /*\r\n                     * Don't edit below this line.\r\n                     * Enter your code above this comment.\r\n                     */\r\n            \r\n                    System.out.print(\"1. \");\r\n                    System.out.println(team1);\r\n                    System.out.print(\"2. \");\r\n                    System.out.println(team2);\r\n                    System.out.print(\"3. \");\r\n                    System.out.println(team3);\r\n                    System.out.print(\"4. \");\r\n                    System.out.println(team4);\r\n                    System.out.print(\"5. \");\r\n                    System.out.println(team5);\r\n                    System.out.print(\"6. \");\r\n                    System.out.println(team6);\r\n                    System.out.print(\"7. \");\r\n                    System.out.println(team7);\r\n                    System.out.print(\"8. \");\r\n                    System.out.println(team8);\r\n                    System.out.print(\"9. \");\r\n                    System.out.println(team9);\r\n                    System.out.print(\"10. \");\r\n                    System.out.println(team10);\r\n                }\r\n            }","address":"/codehs/java/1/3/team-rankings.html"},{"title":"1.4.7 Add Fractions","text":"1.4.7 Add Fractionspublic class AddFractions \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int numerator1 = 1;\r\n                    int denominator1 = 2;\r\n                    \r\n                    int numerator2 = 2;\r\n                    int denominator2 = 5;\r\n                    \r\n                    System.out.println(\"The numerator of the first fraction is \" + numerator1);\r\n                    System.out.println(\"The denominator of the first fraction is \" + denominator1);\r\n                    System.out.println(\"The numerator of the second fraction is \" + numerator2);\r\n                    System.out.println(\"The denominator of the second fraction is \" + denominator2);\r\n                    \r\n                    System.out.println(\"The sum of \" + numerator1 + \"/\" + denominator1 + \" + \" + numerator2 + \"/\" + denominator2 + \" = \" +\r\n                        (numerator1+numerator2) + \"/\" + (denominator1+numerator2));\r\n                }\r\n            }","address":"/codehs/java/1/4/add-fractions.html"},{"title":"1.4.8 Freely Falling Bodies","text":"1.4.8 Freely Falling Bodiespublic class FallingBodies\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    final double g = 9.8;\r\n                    \r\n                    double t = 10;\r\n                    \r\n                    System.out.println(\"The height is \" + (0.5*g*t*t) );\r\n                    System.out.println(\"The velocity is \" + (g*t));\r\n                }\r\n            }","address":"/codehs/java/1/4/freely-falling-bodies.html"},{"title":"1.4.6 Weight of a Pyramid","text":"1.4.6 Weight of a Pyramidpublic class Pyramid \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    double blockWeight = 2.5;\r\n                    int numBlocks = 2500000;\r\n                    \r\n                    System.out.println(\"The pyramid weighs \" + (blockWeight*numBlocks) + \" tons\");\r\n                }\r\n            }","address":"/codehs/java/1/4/weight-of-a-pyramid.html"},{"title":"1.5.6 My Age","text":"1.5.6 My Agepublic class MyAge\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int age = 14;\r\n                    \r\n                    System.out.println(\"My current age is: \" + (age++));\r\n                    System.out.println(\"My age next year will be: \" + (age--));\r\n                    System.out.println(\"My current age is: \" + age);\r\n                }\r\n            }","address":"/codehs/java/1/5/my-age.html"},{"title":"1.5.5 Work Shift","text":"1.5.5 Work Shiftpublic class WorkShift\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int hours = 20;\r\n                    \r\n                    int minutes = 42;\r\n                    \r\n                    int seconds = 16;\r\n            \r\n                    \r\n                    minutes += hours * 60;\r\n                    seconds += minutes * 60;\r\n                    \r\n                    System.out.println(\"The doctor worked \" + seconds + \"seconds.\");\r\n                }\r\n            }","address":"/codehs/java/1/5/work-shift.html"},{"title":"1.6.6 MLA Citation","text":"1.6.6 MLA Citationimport java.util.Scanner;\r\n\r\n            public class Citation\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    \r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Read a string\r\n                    System.out.println(\"Enter the author's name as 'Last name, First name': \");\r\n                    String author = input.nextLine();\r\n                    System.out.println(\"Enter the title of the book: \");\r\n                    String title = input.nextLine();\r\n                    System.out.println(\"Enter the publisher of the book: \");\r\n                    String publisher = input.nextLine();\r\n                    System.out.println(\"Enter the year the book was published: \");\r\n                    int year = input.nextInt();\r\n                    \r\n                    System.out.println(author + \". \" + title + \".\\n\" + publisher + \", \" + year + \".\");\r\n            \r\n                }\r\n            }","address":"/codehs/java/1/6/mla-citation.html"},{"title":"1.6.4 My Age (User Input)","text":"1.6.4 My Age (User Input)import java.util.Scanner;\r\n            //Refer to your code from the previous My Age exercise. \r\n            // Modify it using the Scanner class to take user input instead of hard coding in your age. \r\n            \r\n            public class MyAge\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    // Start here!\r\n                    \r\n                    int age = input.nextInt();\r\n                    \r\n                    System.out.println(\"My current age is: \" + (age++));\r\n                    System.out.println(\"My age next year will be: \" + (age--));\r\n                    System.out.println(\"My current age is: \" + age);\r\n                }\r\n            }","address":"/codehs/java/1/6/my-age-user-input.html"},{"title":"1.6.5 Night Out","text":"1.6.5 Night Outimport java.util.Scanner;\r\n\r\n            public class NightOut\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"How much did dinner cost? \");\r\n                    double dinner = input.nextDouble();\r\n                    System.out.println(\"How much is mini-golf for one person? \");\r\n                    double miniGolf = input.nextDouble();\r\n                    System.out.println(\"How much did dessert cost? \");\r\n                    double dessert = input.nextDouble();\r\n                    System.out.println(\"Dinner: $\" + dinner);\r\n                    System.out.println(\"Mini-Golf: $\" + miniGolf);\r\n                    System.out.println(\"Dessert: $\" + dessert);\r\n                    System.out.println(\"Grand Total: $\" + (dinner + miniGolf*2 + dessert));\r\n            \r\n                }\r\n            }","address":"/codehs/java/1/6/night-out.html"},{"title":"1.7.5 Casting to a Double","text":"1.7.5 Casting to a Doubleimport java.util.Scanner;\r\n\r\n            public class CastingToDouble\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    int myint1 = input.nextInt();\r\n                    int myint2 = input.nextInt();\r\n            \r\n                    double quotient = myint1 / (double)myint2;\r\n                    \r\n                    System.out.println(\"\" + quotient);\r\n                }\r\n            }","address":"/codehs/java/1/7/casting-to-a-double.html"},{"title":"1.7.4 Casting to an Int","text":"1.7.4 Casting to an Intimport java.util.Scanner;\r\n\r\n            public class CastingToInt\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    double myDouble = input.nextDouble();\r\n                    \r\n                    System.out.println(\"\" + (int)myDouble);\r\n                }\r\n            }","address":"/codehs/java/1/7/casting-to-an-int.html"},{"title":"1.7.11 Integer Overflow","text":"1.7.11 Integer Overflowpublic class IntegerOverflow\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(Integer.MIN_VALUE);\r\n                    System.out.println(Integer.MAX_VALUE);\r\n                    System.out.println(Integer.MIN_VALUE - 1);\r\n                    System.out.println(Integer.MAX_VALUE + 1);\r\n                }\r\n            }","address":"/codehs/java/1/7/integer-overflow.html"},{"title":"1.7.8 Movie Ratings","text":"1.7.8 Movie Ratingsimport java.util.Scanner;\r\n\r\n            public class MovieRatings\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    double stars = input.nextDouble();\r\n                    \r\n                    System.out.println(\"\" + (int)Math.round(stars));\r\n                }\r\n            }","address":"/codehs/java/1/7/movie-ratings.html"},{"title":"10.1.9 Bacteria Cultures","text":"10.1.9 Bacteria Culturesimport java.util.Scanner;\r\n\r\n            public class Bacteria\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"How many hours will the bacteria sit? \");\r\n                    int hours = input.nextInt();\r\n                    int bacteria = numBacteriaAlive(hours);\r\n                    System.out.println(\"After \" + hours + \", there will be \" + bacteria);\r\n                }\r\n                \r\n                public static int numBacteriaAlive(int hour)\r\n                {\r\n                    if(hour == 0) return 10;\r\n                    else return numBacteriaAlive(hour - 1) * 3;\r\n                    \r\n                    \r\n                }\r\n            \r\n            }","address":"/codehs/java/10/1/bacteria-cultures.html"},{"title":"10.1.7 Countdown!","text":"10.1.7 Countdown!import java.util.Scanner;\r\n\r\n            public class Countdown\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   Scanner sc = new Scanner(System.in);\r\n                   System.out.println(\"Please enter a number to start: \");\r\n                   int i = sc.nextInt();\r\n                   System.out.println(countdown(i));\r\n                }\r\n                \r\n                public static String countdown(int number)\r\n                {\r\n                   \r\n                   if(number == 0) return \"Blastoff!\";\r\n                   else return number + \" \" + countdown(number - 1);\r\n                }\r\n            }","address":"/codehs/java/10/1/countdown.html"},{"title":"10.1.6 Factorial","text":"10.1.6 Factorialimport java.util.Scanner;\r\n\r\n            public class Factorial\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    System.out.println(\"Please enter a number: \");\r\n                    int number = input.nextInt();\r\n                    \r\n                    System.out.println(calcFactorial(number));\r\n                }\r\n                \r\n                public static int calcFactorial(int x)\r\n                {\r\n                    if(x > 1) return x * calcFactorial(x - 1);\r\n                    else return 1;\r\n                }\r\n            }","address":"/codehs/java/10/1/factorial.html"},{"title":"10.1.8 Recursive Minimum","text":"10.1.8 Recursive Minimumimport java.util.*;\r\n\r\n            public class RecursiveMin\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    ArrayList<Integer> numbers = new ArrayList<Integer>();\r\n                    \r\n                    while (true){\r\n                         System.out.println(\"Please enter numbers. Enter -1 to quit: \");\r\n                         int number = input.nextInt();\r\n                         \r\n                         if (number == -1){\r\n                             break;\r\n                         }\r\n                         else {\r\n                             numbers.add(number);\r\n                         }\r\n                    }\r\n            \r\n                    int minimum = findMinimum(numbers);\r\n                    System.out.println(\"Minimum: \" + minimum);\r\n                }\r\n                \r\n                public static int findMinimum(ArrayList<Integer> numbers)\r\n                {\r\n                    \r\n                    if(numbers.size() == 1) return numbers.get(0);\r\n                    else return Math.min(numbers.remove(numbers.size() - 1), findMinimum(numbers));\r\n                    \r\n                }\r\n            }","address":"/codehs/java/10/1/recursive-minimum.html"},{"title":"10.2.7 Comparing Binary Search and Linear Search","text":"10.2.7 Comparing Binary Search and Linear Searchimport java.util.*;\r\n\r\n            public class CompareSearch \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Table of comparison counts\");\r\n                    System.out.println(\"Length\\t\\tBinary Search\\tLinear Search\");\r\n                    testArrayOfLength(10);\r\n                    testArrayOfLength(20);\r\n                    testArrayOfLength(15);\r\n                    testArrayOfLength(16);\r\n                    testArrayOfLength(32);\r\n                }\r\n                \r\n                // This problem generates an array of length length. Then we select a random\r\n                // index of that array and get the element. Then we print out the table row\r\n                // entry for how many comparisons it takes on binary search and linear search.\r\n                // You'll need to update those methods.\r\n                public static void testArrayOfLength(int length)\r\n                {\r\n                    int[] arr = generateArrayOfLength(length);\r\n                    //System.out.println(Arrays.toString(arr));\r\n                    int index = (int)(Math.random() * length);\r\n                    int elem = arr[index];\r\n                    System.out.println(length + \"\\t\\t\" + binarySearch(arr, elem) + \"\\t\\t\" + linearSearch(arr, elem));\r\n                }\r\n                \r\n                public static int[] generateArrayOfLength(int length)\r\n                {\r\n                    int[] arr = new int[length];\r\n                    for(int i = 0; i < length; i++)\r\n                    {\r\n                        arr[i] = (int)(Math.random() * 100);\r\n                    }\r\n                    \r\n                    Arrays.sort(arr);\r\n                    \r\n                    return arr;\r\n                }\r\n                \r\n                // Do a binary search on array to find number. You'll need to modify this \r\n                // method to return the number of comparisons done.\r\n                public static int binarySearch(int[] array, int number)\r\n                {\r\n                    int low = 0;\r\n                    int high = array.length - 1;\r\n                    \r\n                    int comparisons = 0;\r\n                    \r\n                    // Add a counter to count how many times the while loop is executed\r\n                    while (low <= high)\r\n                    {\r\n                        comparisons++;\r\n                        int mid = (low + high) / 2;\r\n                        if (array[mid] == number)\r\n                        {\r\n                            return comparisons;\r\n                        }\r\n                        else if(array[mid] < number)\r\n                        {\r\n                            low = mid + 1;\r\n                        }\r\n                        else\r\n                        {\r\n                            high = mid - 1;\r\n                        }\r\n                    }\r\n                  \r\n                    return comparisons;\r\n                }\r\n                \r\n                // Do a linear search on array to find the index of number. You'll need to modify\r\n                // this exercise to return the number of *comparisons* done.\r\n                public static int linearSearch(int[] array, int number)\r\n                {\r\n                    // Add a counter to count how many times the for loop is executed\r\n                    for (int i = 0; i < array.length; i++)\r\n                    {\r\n                        if (array[i] == number)\r\n                        {\r\n                            //in linear search, we do a comparison for each index, so \r\n                            //`i` is the same as the `comparisons` variable,\r\n                            //just offset by 1 because indexes start at 0.\r\n                            return i + 1; // the method returns as soon as the number is found\r\n                        }\r\n                    }\r\n                    //if nothing was found, that means we compared every single element\r\n                    return array.length; // the code will get here if the number isn't found\r\n                }\r\n            }","address":"/codehs/java/10/2/comparing-binary-search-and-linear-search.html"},{"title":"10.2.6 Exploring Binary Searches","text":"10.2.6 Exploring Binary Searchespublic class BinaryExplorer {\r\n\r\n                public static void main(String[] args) {\r\n                    int[] testArray = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\r\n            \r\n                    binaryRec(testArray, 8, 0, testArray.length - 1);\r\n            \r\n                }\r\n            \r\n                /**\r\n                 * Add Print statements to the binaryRec method:\r\n                 * \r\n                 * Print Starting, ending, and midpoint values.\r\n                 * \r\n                 * Print when you find a match\r\n                 * \r\n                 * Print if you are too high or too low.\r\n                 * \r\n                 **/\r\n                public static int binaryRec(int[] array, int target, int begin, int end) {\r\n                    \r\n                    System.out.println(\"Starting value: \" + array[begin]);\r\n                    System.out.println(\"Ending value: \" + array[end]);\r\n                    \r\n                    if (begin <= end)\r\n                    {\r\n                        \r\n                        int mid = (begin + end) / 2;\r\n                        int midVal = array[mid];\r\n                        \r\n                        System.out.println(\"Testing midpoint value: \" + midVal);\r\n                    \r\n                        \r\n                        // Base Case\r\n                        if (target == midVal) {\r\n                            System.out.println(\"Match!\");\r\n                            System.out.println(\"\");\r\n                            return mid;\r\n                        }\r\n                \r\n                        if (target < midVal) {\r\n                            System.out.println(\"Too high!\");\r\n                            System.out.println(\"\");\r\n                            return binaryRec(array, target, begin, mid - 1);\r\n                        }\r\n                \r\n                        if (target > midVal) {\r\n                            System.out.println(\"Too low!\");\r\n                            System.out.println(\"\");\r\n                            return binaryRec(array, target, mid + 1, end);\r\n                        }\r\n                    }\r\n                    return -1; //Alternate Base Case - not found\r\n                }\r\n            }","address":"/codehs/java/10/2/exploring-binary-searches.html"},{"title":"10.2.8 Maximum Iterations","text":"10.2.8 Maximum Iterationsimport java.util.*;\r\n\r\n            public class BinarySearchTest {\r\n            \r\n                static int count;\r\n            \r\n                public static void main(String[] args) {\r\n                    \r\n                    // Use the helper code to generate arrays, calculate the max\r\n                    // iterations, and then find the actual iterations for a randomly\r\n                    // selected value.\r\n                    \r\n                    \r\n                    \r\n                    System.out.println(\"Array Size: 100\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(100));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(100), 2, 0, 99));\r\n                    \r\n                    System.out.println(\"Array Size: 1000\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(1000));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(1000), 2, 0, 999));\r\n                    \r\n                    System.out.println(\"Array Size: 10000\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(10000));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(10000), 2, 0, 9999));\r\n                    \r\n                    System.out.println(\"Array Size: 100000\");\r\n                    System.out.println(\"Max iterations: \" + binaryMax(100000));\r\n                    System.out.println(\"Actual iterations: \" + binaryRec(generateArrayOfLength(100000), 2, 0, 99999));\r\n             \r\n                }\r\n            \r\n                public static int binaryRec(int[] array, int target, int begin, int end) {\r\n                    if (begin <= end)\r\n                    {\r\n                        int mid = (begin + end) / 2;\r\n                        int midVal = array[mid];\r\n                        count ++;\r\n                        // Base Case\r\n                        if (target == midVal) {\r\n                                return mid;\r\n                        }\r\n                \r\n                        if (target < midVal) {\r\n                            return binaryRec(array, target, begin, mid - 1);\r\n                        }\r\n                \r\n                        if (target > midVal) {\r\n                            return binaryRec(array, target, mid + 1, end);\r\n                        }\r\n                    }\r\n                    return -1; //Alternate Base Case - not found\r\n                }\r\n            \r\n                public static int[] generateArrayOfLength(int length)\r\n                {\r\n                    int[] arr = new int[length];\r\n                    for(int i = 0; i < length; i++)\r\n                    {\r\n                        arr[i] = (int)(Math.random() * 100);\r\n                    }\r\n            \r\n                    Arrays.sort(arr);\r\n            \r\n                    return arr;\r\n                }\r\n            \r\n                private static int binaryMax(int length) {\r\n                    return (int) (Math.log(length) / Math.log(2)) + 1;\r\n                }\r\n            }","address":"/codehs/java/10/2/maximum-iterations.html"},{"title":"10.3.6 Explore Merge Sort","text":"10.3.6 Explore Merge Sortpublic class MergeSortPrint {\r\n\r\n                public static void main(String[] args) {\r\n                    int[] myArray = {20, 9, 13, 34, 11, 22, 13, 10};\r\n                    System.out.print(\"Unsorted: \");\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : myArray) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                    mergeSort(myArray, myArray.length);\r\n            \r\n                    System.out.print(\"Sorted: \");\r\n                   \r\n                    // Print Sorted Array\r\n                   \r\n                    System.out.println();\r\n                    \r\n                    for(int n : myArray) System.out.print(n + \" \");\r\n                }\r\n            \r\n                public static void mergeSort(int[] current, int length) {\r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    \r\n                    System.out.println(\"Splitting ...\");\r\n                    \r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n            \r\n                    int[] right = new int[length - mid];\r\n                    \r\n                    \r\n                    System.out.print(\"*** Left: \");\r\n                    \r\n                    // Create and print left array\r\n                    \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : left) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                    System.out.println();\r\n                    System.out.print(\"*** Right: \");\r\n                    \r\n                    // Create and print right array\r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n            \r\n                    }\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : right) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                    System.out.println();\r\n                    System.out.println();\r\n                    \r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n                    \r\n                    System.out.print(\"*** Current: \");\r\n                    \r\n                    // Print current array\r\n                    \r\n                    System.out.println(\"\");\r\n                    for(int n : current) System.out.print(n + \" \");\r\n                    System.out.println(\"\");\r\n                    \r\n                }\r\n            \r\n                public static void merge(int[] current, int[] left, int[] right)\r\n                {\r\n                    System.out.println(\"Merging ... \");\r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/10/3/explore-merge-sort.html"},{"title":"10.3.7 Merge Sort Benchmark Testing","text":"10.3.7 Merge Sort Benchmark Testingpublic class Sorter {\r\n\r\n                public static void mergeSort(int[] current, int length) {\r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n                    int[] right = new int[length - mid];\r\n            \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n                    }\r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n                }\r\n            \r\n                private static void merge(\r\n                    int[] current, int[] left, int[] right) {\r\n            \r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            \r\n            \r\n            }import java.util.ArrayList;\r\n\r\n            public class SortTester {\r\n            \r\n                public static void main(String[] args) {\r\n                    int[] testArray;\r\n                    long startTime, endTime;\r\n                    int arraySize = 50000;\r\n            \r\n                    // Random Array\r\n                    \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using Merge Sort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Random Array: \" + (endTime - startTime));\r\n                    \r\n                    \r\n                    // Almost Sorted Array\r\n                    \r\n                    // Make array\r\n                    testArray = makeAlmostSortedArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using Merge Sort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Almost Sorted Array: \" + (endTime - startTime));\r\n                    \r\n                    \r\n                     // Reverse Array\r\n                    \r\n                    // Make array\r\n                    testArray = makeReverseArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using Merge Sort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Reverse Array: \" + (endTime - startTime));\r\n                    \r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in random order\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number.\r\n                 */\r\n            \r\n                public static int[] makeRandomArray(int number){\r\n                    int[] array = new int[number];\r\n                    ArrayList<Integer> sorted = new ArrayList<Integer>(number);\r\n                    // Create the sorted list\r\n                    for (int i = 0; i < number; i++){\r\n                        sorted.add(i);\r\n                    }\r\n            \r\n                    // Now shuffle it.\r\n                    int index = 0;\r\n                    while (sorted.size() > 0){\r\n                        int randomIndex = (int)(Math.random()*sorted.size());\r\n                        array[index] = sorted.remove(randomIndex);\r\n                        index ++;\r\n                    }\r\n            \r\n                    return array;\r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in reverse order starting from the parameter number\r\n                 * and going to the value 0.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number. Index 0 is the value number, and\r\n                 * index array.length - 1 is 0\r\n                 */\r\n                public static int[] makeReverseArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   int counter = number;\r\n                   for(int i = 0; i < number; i++)\r\n                   {\r\n                       array[i] = counter;\r\n                       counter--;\r\n                   }\r\n                   return array;\r\n               }\r\n            \r\n               /**\r\n                * This method returns an array that is almost sorted, but the last index\r\n                * and last index-1 are switched.\r\n                * @param number- the length of the desired almost sorted array\r\n                * @return array - returns an array length number with index array.length - 1\r\n                * and array.length- 2 swapped.\r\n                */\r\n               public static int[] makeAlmostSortedArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   for(int i= 0; i < number; i++)\r\n                   {\r\n                       array[i] = i+1;\r\n                   }\r\n                   int temp = array[array.length - 1];\r\n                   array[array.length - 1] = array[array.length - 2];\r\n                   array[array.length - 2] = temp;\r\n                   return array;\r\n            \r\n               }\r\n            }","address":"/codehs/java/10/3/merge-sort-benchmark-testing.html"},{"title":"10.3.8 Recursive Calls","text":"10.3.8 Recursive Callsimport java.util.ArrayList;\r\n\r\n            public class MergeSortCounter {\r\n            \r\n                private static int count;\r\n            \r\n                public static void main(String[] args) {\r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(100),100);\r\n                    System.out.println(\"Total Recursive calls for 100: \" + count);\r\n                    \r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(1000),1000);\r\n                    System.out.println(\"Total Recursive calls for 1000: \" + count);\r\n                    \r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(10000),10000);\r\n                    System.out.println(\"Total Recursive calls for 10000: \" + count);\r\n                    \r\n                    count = 0;\r\n                    mergeSort(makeRandomArray(100000),100000);\r\n                    System.out.println(\"Total Recursive calls for 100000: \" + count);\r\n                   \r\n                    \r\n                }\r\n            \r\n                public static void mergeSort(int[] current, int length) {\r\n                    count++;\r\n                    \r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n            \r\n                    int[] right = new int[length - mid];\r\n            \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n            \r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n                    }\r\n            \r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n            \r\n                }\r\n            \r\n                public static void merge(int[] current, int[] left, int[] right)\r\n                {\r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            \r\n                public static int[] makeRandomArray(int number){\r\n                    int[] array = new int[number];\r\n                    ArrayList<Integer> sorted = new ArrayList<Integer>(number);\r\n                    // Create the sorted list\r\n                    for (int i = 0; i < number; i++){\r\n                        sorted.add(i);\r\n                    }\r\n            \r\n                    // Now shuffle it.\r\n                    int index = 0;\r\n                    while (sorted.size() > 0){\r\n                        int randomIndex = (int)(Math.random()*sorted.size());\r\n                        array[index] = sorted.remove(randomIndex);\r\n                        index ++;\r\n                    }\r\n            \r\n                    return array;\r\n                }\r\n            }","address":"/codehs/java/10/3/recursive-calls.html"},{"title":"10.3.9 Sort Benchmark Testing","text":"10.3.9 Sort Benchmark Testingpublic class Sorter {\r\n\r\n                public static void selectionSort(int[] arr)\r\n                {\r\n                    int currentMinIndex;\r\n                    for (int i = 0; i < arr.length - 1; i++)\r\n                    {\r\n                        currentMinIndex = i;\r\n                        for (int j = i + 1; j < arr.length; j++)\r\n                        {\r\n                            if(arr[j] < arr[currentMinIndex])\r\n                            {\r\n                                currentMinIndex = j;\r\n                            }\r\n                        }\r\n                        // swap numbers if needed\r\n                        if (i != currentMinIndex)\r\n                        {\r\n                            int temp = arr[currentMinIndex];\r\n                            arr[currentMinIndex] = arr[i];\r\n                            arr[i] = temp;\r\n                        }\r\n                    }\r\n                }\r\n            \r\n                public static void insertionSort(int[] arr)\r\n               {\r\n                   // note: we start with 1 instead of 0\r\n                   for (int i = 1; i < arr.length; i++)\r\n                   {\r\n                       int curNumber = arr[i];\r\n            \r\n                       // Set index to be place to the left\r\n                       int curIndex = i - 1;\r\n            \r\n                       // We are still inbounds and the current number\r\n                       // is less than the current index\r\n                       while ( curIndex >= 0 && arr[curIndex] > curNumber)\r\n                       {\r\n                           // Shift the value at curIndex to the right one place\r\n                           arr[curIndex+1] = arr[curIndex];\r\n                           curIndex--;\r\n                       }\r\n            \r\n                       // Put this number in the proper location\r\n                       arr[curIndex + 1] = curNumber;\r\n                   }\r\n               }\r\n            \r\n                public static void mergeSort(int[] current, int length) {\r\n                    if (length < 2) {\r\n                        return;\r\n                    }\r\n                    int mid = length / 2;\r\n                    int[] left = new int[mid];\r\n                    int[] right = new int[length - mid];\r\n            \r\n                    for (int i = 0; i < mid; i++) {\r\n                        left[i] = current[i];\r\n                    }\r\n                    for (int i = mid; i < length; i++) {\r\n                        right[i - mid] = current[i];\r\n                    }\r\n                    mergeSort(left, mid);\r\n                    mergeSort(right, length - mid);\r\n            \r\n                    merge(current, left, right);\r\n                }\r\n            \r\n                private static void merge(\r\n                    int[] current, int[] left, int[] right) {\r\n            \r\n                    int leftSize = left.length;\r\n                    int rightSize = right.length;\r\n            \r\n                    int i = 0, j = 0, k = 0;\r\n                    while (i < leftSize && j < rightSize) {\r\n                        if (left[i] <= right[j]) {\r\n                            current[k++] = left[i++];\r\n                        }\r\n                        else {\r\n                            current[k++] = right[j++];\r\n                        }\r\n                    }\r\n                    while (i < leftSize) {\r\n                        current[k++] = left[i++];\r\n                    }\r\n                    while (j < rightSize) {\r\n                        current[k++] = right[j++];\r\n                    }\r\n                }\r\n            \r\n            \r\n            }import java.util.ArrayList;\r\n\r\n            public class SortTester {\r\n            \r\n                public static void main(String[] args) {\r\n                    int[] testArray;\r\n                    long startTime, endTime;\r\n                    int arraySize = 20000;\r\n            \r\n                    // selectionSort\r\n                \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using selectionSort static method\r\n                    Sorter.selectionSort(testArray);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Selection Sort: \" + (endTime - startTime));\r\n                    \r\n            \r\n                    // insertionSort\r\n                   \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using insertionSort static method\r\n                    Sorter.insertionSort(testArray);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Insertion Sort: \" + (endTime - startTime));\r\n                    \r\n                    \r\n                    \r\n            \r\n                    //mergeSort\r\n                    \r\n                    // Make array\r\n                    testArray = makeRandomArray(arraySize);\r\n            \r\n                    // Record start time\r\n                    startTime = System.currentTimeMillis();\r\n                    \r\n                    // Sort array using mergeSort static method\r\n                    Sorter.mergeSort(testArray, arraySize);\r\n                    \r\n                    // Record end time\r\n                    endTime = System.currentTimeMillis();\r\n            \r\n                    // Print out results\r\n                    System.out.println(\"Merge Sort: \" + (endTime - startTime));\r\n                    \r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in random order\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number.\r\n                 */\r\n            \r\n                public static int[] makeRandomArray(int number){\r\n                    int[] array = new int[number];\r\n                    ArrayList<Integer> sorted = new ArrayList<Integer>(number);\r\n                    // Create the sorted list\r\n                    for (int i = 0; i < number; i++){\r\n                        sorted.add(i);\r\n                    }\r\n            \r\n                    // Now shuffle it.\r\n                    int index = 0;\r\n                    while (sorted.size() > 0){\r\n                        int randomIndex = (int)(Math.random()*sorted.size());\r\n                        array[index] = sorted.remove(randomIndex);\r\n                        index ++;\r\n                    }\r\n            \r\n                    return array;\r\n                }\r\n            \r\n                /**\r\n                 * This method returns an array in reverse order starting from the parameter number\r\n                 * and going to the value 0.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number. Index 0 is the value number, and\r\n                 * index array.length - 1 is 0\r\n                 */\r\n                public static int[] makeReverseArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   int counter = number;\r\n                   for(int i = 0; i < number; i++)\r\n                   {\r\n                       array[i] = counter;\r\n                       counter--;\r\n                   }\r\n                   return array;\r\n               }\r\n            \r\n               /**\r\n                * This method returns an array that is almost sorted, but the last index\r\n                * and last index-1 are switched.\r\n                * @param number- the length of the desired almost sorted array\r\n                * @return array - returns an array length number with index array.length - 1\r\n                * and array.length- 2 swapped.\r\n                */\r\n               public static int[] makeAlmostSortedArray(int number)\r\n               {\r\n                   int[] array = new int[number];\r\n                   for(int i= 0; i < number; i++)\r\n                   {\r\n                       array[i] = i + 1;\r\n                   }\r\n                   int temp = array[array.length - 1];\r\n                   array[array.length - 1] = array[array.length - 2];\r\n                   array[array.length - 2] = temp;\r\n                   return array;\r\n            \r\n               }\r\n            }","address":"/codehs/java/10/3/sort-benchmark-testing.html"},{"title":"2.1.9 Phone Skeleton","text":"2.1.9 Phone Skeleton/**\r\n            * \r\n            * The phone class represents a cellular phone.\r\n            * \r\n            * Add the instance variables you think a phone would need\r\n            */ \r\n           \r\n           public class Phone\r\n           {\r\n               int countryCode;\r\n               int areaCode;\r\n               int discriminator;\r\n           \r\n           }","address":"/codehs/java/2/1/phone-skeleton.html"},{"title":"2.1.8 Pizza Instance Variables","text":"2.1.8 Pizza Instance Variablespublic class Pizza\r\n            {\r\n                    String flavor; \r\n                    String styleName;\r\n                    double price;\r\n                    double salePercent;\r\n                    boolean inStock;\r\n            }","address":"/codehs/java/2/1/pizza-instance-variables.html"},{"title":"2.10.6 Circle Area","text":"2.10.6 Circle Areapublic class Circle\r\n            {\r\n                private double radius;\r\n                \r\n                public Circle(double theRadius)\r\n                {\r\n                    radius = theRadius;\r\n                }\r\n            \r\n                // Implement getArea using\r\n                // Math.PI and\r\n                // Math.pow\r\n                // Area = pi * r^2\r\n                public double getArea()\r\n                {\r\n                    return Math.PI * radius*radius;\r\n                }\r\n                \r\n                // Implement getCircumference using\r\n                // Math.PI\r\n                // Circumference = 2 * PI * r\r\n                public double getCircumference()\r\n                {\r\n                    return 2*Math.PI*radius;\r\n                }\r\n                \r\n            }public class CircleTester \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Circle cup = new Circle(5);\r\n        System.out.println(\"Area of a circle with radius 5: \" + cup.getArea());   \r\n        System.out.println(\"Circumference of a circle with radius 5: \" + cup.getCircumference());   \r\n\r\n        Circle hat = new Circle(12);\r\n        System.out.println(\"\\nArea of a circle with radius 12: \" + hat.getArea());   \r\n        System.out.println(\"Circumference of a circle with radius 12: \" + hat.getCircumference());   \r\n\r\n    }\r\n}","address":"/codehs/java/2/10/circle-area.html"},{"title":"2.10.8 Racing","text":"2.10.8 Racingpublic class Racecar\r\n            {\r\n                private double accel; // acceleration\r\n                private String name; // name of driver\r\n                \r\n                public Racecar(double acceleration, String driver)\r\n                {\r\n                    accel = acceleration;\r\n                    name = driver;\r\n                }\r\n                \r\n                // Returns the time it takes the racecar\r\n                // to complete the track\r\n                public double computeTime(double distance)\r\n                {\r\n                    return 0.01*Math.round(100*Math.sqrt(2 * distance / accel));\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return \"Racer \" + name;\r\n                }\r\n            }public class RaceMain\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Length of the course in meters\r\n        double distance = 2414; // ~ 1.5 miles\r\n        \r\n        // Generate a random acceleration for each car\r\n        Racecar brett = new Racecar(Math.random()*100+1, \"Dave\");\r\n        Racecar jules = new Racecar(Math.random()*100+1, \"Jules\");\r\n        \r\n        // Create two Racecar objects\r\n        \r\n        // Compute the finishing times for both cars\r\n        double brettTime = brett.computeTime(distance);\r\n        double julesTime = jules.computeTime(distance);\r\n        \r\n        // Print times of each car\r\n        System.out.println(\"First car finished in \" + Math.min(brettTime, julesTime) + \" seconds\");\r\n        System.out.println(\"Second car finished in \" + Math.max(brettTime, julesTime)+ \" seconds\");\r\n                \r\n        \r\n    }\r\n}","address":"/codehs/java/2/10/racing.html"},{"title":"2.10.7 The Unit Circle","text":"2.10.7 The Unit Circlepublic class UnitCircle \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Radians: (cos, sin)\");\r\n                    \r\n                    //multiply by 100, round, and then divide by 100 to get 2 decimal points\r\n                    System.out.println(\"0.0: \" + (Math.round(Math.cos(0.0)*100)/100) + \", \" + (Math.round(Math.sin(0.0)*100)/100));\r\n            System.out.println(\"1.5707963267948966: \" + (Math.round(Math.cos(1.5707963267948966)*100)/100) + \", \" + (Math.round(Math.sin(1.5707963267948966)*100)/100));\r\n            System.out.println(\"3.141592653589793: \" + (Math.round(Math.cos(3.141592653589793)*100)/100) + \", \" + (Math.round(Math.sin(3.141592653589793)*100)/100));\r\n                }\r\n            }","address":"/codehs/java/2/10/the-unit-circle.html"},{"title":"2.2.8 Instance Variables for Your Dog","text":"2.2.8 Instance Variables for Your Dogpublic class Dog \r\n            {\r\n                private String breed;\r\n                private String name;\r\n                \r\n                public Dog(String theBreed, String _name)\r\n                {\r\n                    breed = theBreed;\r\n                    name = _name;\r\n                }\r\n                \r\n                // This method should work after you add the\r\n                // new instance variable and update the constructor.\r\n                // DO NOT modify this method.\r\n                public String toString()\r\n                {\r\n                    return name + \" is a \" + breed;\r\n                }\r\n            }public class DogTester \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Dog golden = new Dog(\"Golden Retriever\", \"Sammy\");\r\n        System.out.println(golden);\r\n    }\r\n}","address":"/codehs/java/2/2/instance-variables-for-your-dog.html"},{"title":"2.2.9 Pizza Time!","text":"2.2.9 Pizza Time!public class Pizza\r\n            {\r\n                private String type;\r\n                private String toppings;\r\n                private int size;\r\n            \r\n                Pizza(String theType, String theToppings, int theSize) {\r\n                    type = theType;\r\n                    toppings = theToppings;\r\n                    size = theSize;\r\n                }\r\n                \r\n                public String toString() {\r\n                    return (size + \"in \" + type + \" pizza with \" + toppings);\r\n                }\r\n            }public class PizzaTester \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        \r\n        System.out.println((new Pizza(\"Veggie\", \"Tomato\", 12)).toString());\r\n        System.out.println((new Pizza(\"Hawaiian\", \"Pineapple\", 10)).toString());\r\n        System.out.println((new Pizza(\"Salad\", \"Lettuce\", 8)).toString());\r\n    }\r\n}","address":"/codehs/java/2/2/pizza-time.html"},{"title":"2.2.7 Student GPA Field","text":"2.2.7 Student GPA Fieldpublic class StudentTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11, 3.5);\r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 12, 3.8);\r\n                    \r\n                    System.out.println(alan);\r\n                    System.out.println(ada);\r\n                }\r\n            }public class Student\r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private double gpa;\r\n    \r\n    /**\r\n     * This is a constructor.  A constructor is a method\r\n     * that creates an object -- it creates an instance\r\n     * of the class. What that means is it takes the input\r\n     * parameters and sets the instance variables (or fields)\r\n     * to the proper values.\r\n     * \r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor and how to add the gpa to the constructor. \r\n     */\r\n    public Student(String fName, String lName, int grade, double _gpa)\r\n    {\r\n        firstName = fName;\r\n        lastName = lName;\r\n        gradeLevel = grade;\r\n        gpa = _gpa;\r\n    }\r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade: \" + gradeLevel + \" and has GPA: \" + gpa;\r\n    }\r\n}","address":"/codehs/java/2/2/student-gpa-field.html"},{"title":"2.2.6 Using the Rectangle Class","text":"2.2.6 Using the Rectangle Classpublic class RectangleTester \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a rectangle with width 5 and height 12\r\n                    Rectangle rect = new Rectangle(5, 12);\r\n                    // Then print it out\r\n                    System.out.println(rect.toString());\r\n                }\r\n            }public class Rectangle\r\n{\r\n    // Attributes\r\n    private int width;\r\n    private int height;\r\n    \r\n    // Constructor\r\n    public Rectangle(int rectWidth, int rectHeight)\r\n    {\r\n        width = rectWidth;\r\n        height = rectHeight;\r\n    }\r\n    \r\n    \r\n    // This method lets us print out the object\r\n    // to see the values of the instance variables\r\n    public String toString()\r\n    {\r\n        return \"Rectangle with width: \" + width + \" and height: \" + height;\r\n    }\r\n}","address":"/codehs/java/2/2/using-the-rectangle-class.html"},{"title":"2.3.8 Custom Pinatas","text":"2.3.8 Custom Pinataspublic class PinataTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Make Pinatas!\r\n                    Pinata ella = new Pinata();\r\n                    Pinata pete = new Pinata(\"chocolate\", \"blue\", \"star\");\r\n                    Pinata sweetie = new Pinata(\"sour straws\");\r\n                    \r\n                    // Print the pinatas\r\n                    System.out.println(ella);\r\n                    System.out.println(pete);\r\n                    System.out.println(sweetie);\r\n                    \r\n                    \r\n                }\r\n            }public class Pinata\r\n{\r\n    // Instance variables\r\n    private String candy;    // what kind of candy is inside\r\n    private String color;    \r\n    private String shape;\r\n    \r\n    // Constructor without parameters\r\n    public Pinata()\r\n    {\r\n        candy = \"hard candy\";\r\n        color = \"rainbow\";\r\n        shape = \"donkey\";\r\n    }\r\n    \r\n    // Add an overloaded constructor that allows the user\r\n    // to customize all of the instance variables\r\n    public Pinata(String _candy, String _color, String _shape) {\r\n        candy = _candy;\r\n        color = _color;\r\n        shape = _shape;\r\n    }\r\n    \r\n    // Add an overloaded constructor that allows the user\r\n    // to customize the color and shape\r\n    public Pinata(String _color, String _shape) {\r\n        candy = \"hard candy\";\r\n        color = _color;\r\n        shape = _shape;\r\n    }\r\n    \r\n    // Add an overloaded constructor that allows the user\r\n    // to customize the candy\r\n    public Pinata(String _candy) {\r\n        candy = _candy;\r\n        color = \"rainbow\";\r\n        shape = \"donkey\";\r\n    }\r\n    \r\n    \r\n    public String toString()\r\n    {\r\n        return color + \" \" + shape + \" pinata filled with \" + candy;\r\n    }\r\n}","address":"/codehs/java/2/3/custom-pinatas.html"},{"title":"2.3.10 Empty References","text":"2.3.10 Empty Referencespublic class Rectangle\r\n            {\r\n                // Attributes\r\n                private int width;\r\n                private int height;\r\n                \r\n                // Constructor\r\n                // Copies the values of rectWidth and rectHeight\r\n                // into width and height, respectively\r\n                public Rectangle(int rectWidth, int rectHeight)\r\n                {\r\n                    width = rectWidth;\r\n                    height = rectHeight;\r\n                }\r\n                \r\n                // Constructor\r\n                // Allows user to construct a square\r\n                // Copies the value of sidelength\r\n                // into both width and height\r\n                public Rectangle(int sidelength)\r\n                {\r\n                    width = sidelength;\r\n                    height = sidelength;\r\n                }\r\n                \r\n                \r\n                // This method lets us print out the object\r\n                // to see the values of the instance variables\r\n                public String toString()\r\n                {\r\n                    return \"Rectangle with width: \" + width + \" and height: \" + height;\r\n                }\r\n            }public class RectangleTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Fix this code so there are no more\r\n        // null pointer exceptions\r\n        Rectangle brick = new Rectangle(1,1);\r\n        Rectangle fencePost = new Rectangle(1, 3);\r\n        \r\n        System.out.println(brick);\r\n        System.out.println(fencePost);\r\n        \r\n        // Change the fencePost dimensions\r\n        fencePost = new Rectangle(1, 5);\r\n        System.out.println(fencePost);\r\n        \r\n    }\r\n}","address":"/codehs/java/2/3/empty-references.html"},{"title":"2.3.7 Plain Coffee","text":"2.3.7 Plain Coffeepublic class CoffeeTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Create Specialized Coffee\r\n        Coffee latte = new Coffee(4, false, \"soy\");\r\n        System.out.println(latte);\r\n        \r\n        // Create a default coffee\r\n        // This should work after you create the default\r\n        // constructor\r\n        Coffee plain = new Coffee();\r\n        System.out.println(plain);\r\n        \r\n    }\r\n}/*\r\n* This class represents a cup of coffee\r\n* \r\n*/\r\npublic class Coffee\r\n{\r\n    // Instance Variables\r\n    private int brewStrength; // on a scale of 1 to 5, 5 being the darkest\r\n    private boolean sugar;    // has sugar (true) or does not (false)\r\n    \r\n    // takes the values \"none\", \"whole\", \"nonfat\", \"soy\", or \"almond\"\r\n    private String milkType; \r\n    \r\n    // Add a default constructor (no parameters)\r\n    // to initialize the instance variables\r\n    // to a default cup of coffee\r\n    \r\n    \r\n    // Specialized constructor\r\n    public Coffee(int howStrong, boolean hasSugar, String milk)\r\n    {\r\n        brewStrength = howStrong;\r\n        sugar = hasSugar;\r\n        milkType = milk;\r\n    }\r\n    \r\n    public Coffee() {\r\n        brewStrength = 3;\r\n        sugar = true;\r\n        milkType = \"whole\";\r\n    }\r\n    \r\n    \r\n    // String representation to print\r\n    // Do not modify this function\r\n    public String toString()\r\n    {\r\n        return \"Coffee brewed to level \" + brewStrength + \" with \" + milkType + \" milk. Sugar? \" + sugar;\r\n    }\r\n    \r\n}","address":"/codehs/java/2/3/plain-coffee.html"},{"title":"2.3.9 Website Class","text":"2.3.9 Website Classpublic class WebsiteTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(new Website());\r\n                    System.out.println(new Website(\"mass\",\"edu\"));\r\n                    System.out.println(new Website(\"code\",\"edu\", 10));\r\n                }\r\n            }public class Website\r\n{\r\n    // Put your code here\r\n    \r\n    String domain;\r\n    String topLevelDomain;\r\n    int numUsers;\r\n    \r\n    \r\n    //Default constructor\r\n    public Website() {\r\n        domain = \"\";\r\n        topLevelDomain = \"com\";\r\n        numUsers = 0;\r\n    }\r\n    \r\n    // Specify website URL\r\n    // Register a new website\r\n    public Website(String domainName, String topDomain) {\r\n        domain = domainName;\r\n        topLevelDomain = topDomain;\r\n        numUsers = 0;\r\n    }\r\n    \r\n    // Specify website URL\r\n    // Register an old website\r\n    public Website(String domainName, String topDomain, int numPeople) {\r\n        domain = domainName;\r\n        topLevelDomain = topDomain;\r\n        numUsers = numPeople;\r\n    }\r\n    \r\n    \r\n    \r\n    // String representation for printing\r\n    // Do not modify this method\r\n    public String toString()\r\n    {\r\n        String res =  \"https://www.\" + domain + \".\" + topLevelDomain;\r\n        res += \" has \" + numUsers + \" users\";\r\n        \r\n        return res;\r\n    }\r\n}","address":"/codehs/java/2/3/website-class.html"},{"title":"2.4.7 Chat Bot","text":"2.4.7 Chat Botpublic class Bot {\r\n\r\n                private String name;\r\n            \r\n                public Bot (String yourName){\r\n                    name = yourName;\r\n                }\r\n            \r\n                public void greeting(){\r\n                    System.out.print(\"Hello \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"! My name is Hal!\");\r\n                    System.out.println(\"How are you today!\");\r\n                }\r\n            \r\n                public void help(){\r\n                    System.out.println(\"You can ask me about the weather,\");\r\n                    System.out.println(\"or how many feet are in a mile.\");\r\n                    System.out.println(\"I can even convert feet to meters!\");\r\n                }\r\n            \r\n                public void weather(){\r\n                    System.out.println(\"Its always warm and dry inside your computer!\");\r\n                }\r\n            \r\n                public void feetInMile() {\r\n                    System.out.println(\"There are 5280 feet in a mile.\");\r\n                }\r\n            \r\n                public void goodbye(){\r\n                    System.out.println(\"It was nice talking with you!\");\r\n                    System.out.println(\"Have a great day!\");\r\n                }\r\n            \r\n                public void favoriteNumber(int yourNumber){\r\n                    System.out.println(\"My favorite number is 8.\");\r\n                    System.out.print(\"That is \");\r\n                    System.out.print(yourNumber - 8);\r\n                    System.out.println(\" away from your number\");\r\n                }\r\n            \r\n                public double feetToMeters(double feet){\r\n                    double meters = feet * 0.3048;\r\n                    return meters;\r\n                }\r\n            \r\n            }import java.util.Scanner;\r\n\r\npublic class BotTester\r\n{\r\n    public static void main(String[] args) {\r\n\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        System.out.println(\"Hello. What is your name? What's the weather like?\\nHow many feet in a mile?\");\r\n        \r\n        String name = input.nextLine();\r\n        \r\n        Bot bot = new Bot(name);\r\n        \r\n        bot.greeting();\r\n        bot.help();\r\n        bot.weather();\r\n        bot.feetInMile();\r\n        bot.goodbye();\r\n        \r\n    }\r\n}","address":"/codehs/java/2/4/chat-bot.html"},{"title":"2.4.8 Greetings and Salutations","text":"2.4.8 Greetings and SalutationsJSYK\r\n            You don't have to fill in SalutationsTester at all; the auto-grader doesn't care about it. You'll be approved either way!public class SalutationsTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Test your class here\r\n    }\r\n}public class Salutations\r\n            {\r\n                String name;\r\n                public Salutations(String _name) {\r\n                    name = _name;\r\n                }\r\n                public void addressLetter() {\r\n                    System.out.println(\"Dear \" + name);\r\n                }\r\n                public void signLetter() {\r\n                    System.out.println(\"Sincerely,\\n\" + name);\r\n                }\r\n                public void addressMemo()  {\r\n                    System.out.println(\"To whom it may concern\");\r\n                }\r\n                public void signMemo() {\r\n                    System.out.println(\"Best,\\n\" + name);\r\n                }\r\n            }","address":"/codehs/java/2/4/greetings-and-salutations.html"},{"title":"2.4.5 Hello!","text":"2.4.5 Hello!import java.util.Scanner;\r\n\r\n            public class HelloTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Scanner object\r\n                    Scanner input = new Scanner(System.in);\r\n                    String name = input.nextLine();\r\n                    Hello hello = new Hello(name);\r\n            \r\n                    hello.spanish();\r\n                    hello.english();\r\n                    hello.french();\r\n                }\r\n            }public class Hello {\r\n\r\n                private String name;\r\n            \r\n                public Hello (String yourName){\r\n                    name = yourName;\r\n                }\r\n            \r\n                public void english(){\r\n                    System.out.print(\"Hello \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void spanish(){\r\n                    System.out.print(\"Hola \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void french(){\r\n                    System.out.print(\"Bonjour \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void german(){\r\n                    System.out.print(\"Hallo \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void russian(){\r\n                    System.out.print(\"Privet \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            \r\n                public void chinese(){\r\n                    System.out.print(\"Ni hao \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"!\");\r\n                }\r\n            }","address":"/codehs/java/2/4/hello.html"},{"title":"2.4.6 Loose Change","text":"2.4.6 Loose Changepublic class Coins {\r\n\r\n                private int quarters;\r\n                private int dimes;\r\n                private int nickels;\r\n                private int pennies;\r\n            \r\n                public Coins(int numQuarters, int numDimes, int numNickels, int numPennies){\r\n                    quarters = numQuarters;\r\n                    dimes = numDimes;\r\n                    nickels = numNickels;\r\n                    pennies = numPennies;\r\n                }\r\n            \r\n                public void addQuarter(){\r\n                    quarters ++;\r\n                }\r\n            \r\n                public void addDime(){\r\n                    dimes ++;\r\n                }\r\n            \r\n                public void addNickel(){\r\n                    nickels ++;\r\n                }\r\n            \r\n                public void addPenny(){\r\n                    pennies ++;\r\n                }\r\n                \r\n                public void dimesCount(){\r\n                    System.out.println(dimes);\r\n                }\r\n            \r\n                public void bankValue(){\r\n                    System.out.println(quarters * 0.25 + dimes * 0.10\r\n                            + nickels * 0.05 + pennies * 0.01);\r\n                }\r\n            \r\n                public void bankCount(){\r\n                    System.out.println(quarters + dimes + nickels + pennies);\r\n                }\r\n            }public class CoinTester\r\n{\r\n    public static void main(String[] args) {\r\n        Coins bank = new Coins(4,3,2,1);\r\n        \r\n        bank.addQuarter();\r\n        bank.addQuarter();\r\n        bank.addDime();\r\n        bank.addDime();\r\n        bank.addPenny();\r\n        \r\n        bank.bankCount();\r\n        bank.bankValue();\r\n    }\r\n}","address":"/codehs/java/2/4/loose-change.html"},{"title":"2.5.7 Basketball Players","text":"2.5.7 Basketball Playerspublic class BasketballPlayer {\r\n\r\n                /* This class is complete. Take a look around\r\n                 * to make sure you understand how to use it,\r\n                 * but you do not need to make changes.\r\n                 */\r\n                private String name;\r\n                private String team;\r\n                private int totalPoints;\r\n                private int totalAssists;\r\n                private int gamesPlayed;\r\n            \r\n                public BasketballPlayer(String playerName, String currentTeam) {\r\n                    name = playerName;\r\n                    team = currentTeam;\r\n                    totalPoints = 0;\r\n                    gamesPlayed = 0;\r\n                }\r\n            \r\n                public BasketballPlayer(String playerName) {\r\n                    // this() is a shortcut to calling the other constructor\r\n                    // in this class. We will see more of 'this' in a later\r\n                    // unit, but it is shown here as a best practice.\r\n                    this(playerName, \"no team\");\r\n                }\r\n            \r\n                public void addGame(int points, int assists) {\r\n                    totalPoints += points;\r\n                    totalAssists += assists;\r\n                    gamesPlayed ++;\r\n                }\r\n            \r\n                public void printPPG() {\r\n                    System.out.print(\"Points per game: \");\r\n                    System.out.println((double) totalPoints / gamesPlayed);\r\n                }\r\n            \r\n                public void printAPG() {\r\n                    System.out.print(\"Assists per game: \");\r\n                    System.out.println((double) totalAssists / gamesPlayed);\r\n                }\r\n            \r\n                public String toString() {\r\n                    return name + \" averages \" + ((double) totalPoints / gamesPlayed) + \" points per game.\";\r\n                }\r\n            }public class PlayerTester\r\n{\r\n    public static void main(String[] args) {\r\n       \r\n      BasketballPlayer lebron = new BasketballPlayer(\"Lebron James\", \"Boston Team\");\r\n      System.out.println(\"Lebron James Stats:\");\r\n        lebron.addGame(12, 10);\r\n        lebron.addGame(0, 10);\r\n        lebron.addGame(15, 10);\r\n        lebron.addGame(12, 10);\r\n        \r\n        lebron.printPPG();\r\n        lebron.printAPG();\r\n        System.out.println(lebron.toString());\r\n        System.out.println();\r\n        \r\n        BasketballPlayer michael = new BasketballPlayer(\"Michael Jordan\");\r\n        System.out.println(\"Michael Jordan Stats:\");\r\n        michael.addGame(12, 10);\r\n        michael.addGame(0, 10);\r\n        michael.addGame(15, 10);\r\n        michael.addGame(12, 10);\r\n        \r\n        michael.printPPG();\r\n        michael.printAPG();\r\n        System.out.println(michael.toString());\r\n\r\n\r\n    }\r\n}","address":"/codehs/java/2/5/basketball-players.html"},{"title":"2.5.9 Chat Bot 2.0","text":"2.5.9 Chat Bot 2.0import java.util.Scanner;\r\n\r\n            public class Bot2Tester\r\n            {\r\n                public static void main(String[] args) {\r\n            \r\n                   Scanner input = new Scanner(System.in);\r\n                   System.out.print(\"Hello. What is your name?\");\r\n                   Bot2 hal = new Bot2(input.nextLine());\r\n                   hal.greeting();\r\n                   System.out.println(\"What is your favorite animal?\");\r\n                   String animal = input.nextLine();\r\n                   System.out.println(\"\\n\");\r\n                   hal.favoriteAnimal(animal);\r\n                   \r\n                   hal.home(input.nextLine());\r\n                   hal.favoriteNumber(input.nextInt());\r\n                   hal.goodbye();\r\n                }\r\n            }public class Bot2 {\r\n\r\n                private String name;\r\n            \r\n                public Bot2 (String yourName){\r\n                    name = yourName;\r\n                }\r\n            \r\n                public void greeting(){\r\n                    System.out.print(\"Hello \");\r\n                    System.out.print(name);\r\n                    System.out.println(\"! My name is Hal!\");\r\n                    System.out.println(\"How are you today!\");\r\n                }\r\n            \r\n                public void help(){\r\n                    System.out.println(\"You can ask me about the weather,\");\r\n                    System.out.println(\"or how many feet are in a mile.\");\r\n                    System.out.println(\"I can even convert feet to meters!\");\r\n                }\r\n            \r\n                public void weather(){\r\n                    System.out.println(\"It's always warm and dry inside your computer!\");\r\n                }\r\n            \r\n                public void feetInMile() {\r\n                    System.out.println(\"There are 5280 feet in a mile.\");\r\n                }\r\n            \r\n                public void goodbye(){\r\n                    System.out.println(\"It was nice talking with you!\");\r\n                    System.out.println(\"Have a great day!\");\r\n                }\r\n            \r\n                public void favoriteNumber(int yourNumber){\r\n                    System.out.println(\"My favorite number is 8.\");\r\n                    System.out.print(\"That is \");\r\n                    System.out.print(yourNumber - 8);\r\n                    System.out.println(\" away from your number.\");\r\n                }\r\n            \r\n                public void favoriteAnimal(String yourAnimal){\r\n                    System.out.print(\"Cool. I also like \");\r\n                    System.out.print(yourAnimal);\r\n                    System.out.println(\"s.\");\r\n                    System.out.println(\"My favorite animals are dogs. Have you met Karel?\");\r\n                }\r\n            \r\n                public void home(String location){\r\n                    System.out.print(\"I heard it is really nice in \");\r\n                    System.out.print(location);\r\n                    System.out.println(\".\");\r\n                    System.out.println(\"I live in a cloud, which is actually pretty cool!\");\r\n                }\r\n            \r\n                public double feetToMeters(double feet){\r\n                    double meters = feet * 0.3048;\r\n                    return meters;\r\n                }\r\n            \r\n            }","address":"/codehs/java/2/5/chat-bot-2-0.html"},{"title":"2.5.8 More Operations","text":"2.5.8 More Operationsimport java.util.Scanner;\r\n\r\n            public class CalculatorTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter 2 doubles\");\r\n                    \r\n                    double x = in.nextDouble();\r\n                    double y = in.nextDouble();\r\n                    \r\n                    Calculator calc = new Calculator();\r\n                    calc.sum(x, y);\r\n                    calc.subtract(x, y);\r\n                    calc.multiply(x, y);\r\n                    calc.divide(x, y);\r\n                }\r\n            }public class Calculator\r\n{\r\n    // This class does not need instance variables!\r\n    \r\n    // Prints the sum of x and y\r\n    public void sum(double x, double y)\r\n    {\r\n        double result = x + y;\r\n        System.out.print(x);\r\n        System.out.print(\" + \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n    \r\n    // Prints the product of x and y\r\n    public void multiply(double x, double y)\r\n    {\r\n        double result = x * y;\r\n        System.out.print(x);\r\n        System.out.print(\" * \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n    \r\n    // Prints the product of x and y\r\n    public void divide(double x, double y)\r\n    {\r\n        double result = x / y;\r\n        System.out.print(x);\r\n        System.out.print(\" / \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n    \r\n    // Prints the product of x and y\r\n    public void subtract(double x, double y)\r\n    {\r\n        double result = x - y;\r\n        System.out.print(x);\r\n        System.out.print(\" - \");\r\n        System.out.print(y);\r\n        System.out.print(\" = \");\r\n        System.out.println(result);\r\n        \r\n    }\r\n}","address":"/codehs/java/2/5/more-operations.html"},{"title":"2.5.5 Using the Point Class","text":"2.5.5 Using the Point Classpublic class Point\r\n            {\r\n                private int x;\r\n                private int y;\r\n                \r\n                public Point(int xCoord, int yCoord)\r\n                {\r\n                    x = xCoord;\r\n                    y = yCoord;\r\n                }\r\n                \r\n                public void move(int dx, int dy)\r\n                {\r\n                    x += dx;\r\n                    y += dy;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return x + \", \" + y;\r\n                }\r\n            }public class PointTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Point p = new Point(10, 5);\r\n        System.out.println(p);\r\n        p.move(3, 4);\r\n        \r\n        System.out.println(p);\r\n        \r\n        Point p2 = new Point(2, 4);\r\n        System.out.println(p2);\r\n        p2.move(5, 2);\r\n        \r\n        System.out.println(p2);\r\n\r\n    }\r\n}","address":"/codehs/java/2/5/using-the-point-class.html"},{"title":"2.6.7 Construction Costs","text":"2.6.7 Construction Costspublic class Construction\r\n            {\r\n                \r\n                private double lumber;  // price per board \r\n                private double windows; // price per square inch of window\r\n                private double taxRate; \r\n               \r\n                \r\n                public Construction(double lumberCost, double windowCost, double taxes)\r\n                {\r\n                    lumber = lumberCost;\r\n                    windows = windowCost;\r\n                    taxRate = taxes;\r\n                }\r\n                \r\n                // Computes and returns the cost\r\n                // of the lumber\r\n                public double lumberCost(int numBoards)\r\n                {\r\n                    return lumber * numBoards;   \r\n                }\r\n                \r\n                // Computes and returns the cost of the windows\r\n                public double windowCost(int numWindows)\r\n                {\r\n                    return windows * numWindows;   \r\n                }\r\n                \r\n                // Computes the grand total by adding\r\n                // the tax amount to the total\r\n                public double grandTotal(double total)\r\n                {\r\n                    return total * (1 + taxRate);\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class ConstructionTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.println(\"Enter the sales tax rate:\");\r\n        double taxRate = input.nextDouble();\r\n        System.out.println(\"How many boards do you need? \");\r\n        int boards = input.nextInt();\r\n        System.out.println(\"How many windows do you need? \");\r\n        int windows = input.nextInt();\r\n        \r\n        Construction buildPlan = new Construction(8, 11, taxRate);\r\n        System.out.println(\"Total: \" + (buildPlan.windowCost(windows) + buildPlan.lumberCost(boards)));\r\n        System.out.println(\"Grand Total: \" + buildPlan.grandTotal(buildPlan.windowCost(windows) + buildPlan.lumberCost(boards)));\r\n    }\r\n}","address":"/codehs/java/2/6/construction-costs.html"},{"title":"2.6.8 How Far Away is ...?","text":"2.6.8 How Far Away is ...?/*\r\n            * This class stores information about a location on Earth.  Locations are\r\n            * specified using latitude and longitude.  The class includes a method for\r\n            * computing the distance between two locations.\r\n            *\r\n            * This implementation is based off of the example from Stuart Reges at \r\n            * the University of Washington.\r\n            */\r\n           \r\n           public class GeoLocation \r\n           {\r\n               // Earth radius in miles\r\n               public static final double RADIUS = 3963.1676;  \r\n           \r\n               private double latitude;\r\n               private double longitude;\r\n           \r\n               /**\r\n                * Constructs a geo location object with given latitude and longitude\r\n                */\r\n               public GeoLocation(double theLatitude, double theLongitude) \r\n               {\r\n                   latitude = theLatitude;\r\n                   longitude = theLongitude;\r\n               }\r\n           \r\n               /**\r\n                * Returns the latitude of this geo location\r\n                */\r\n               public double getLatitude() \r\n               {\r\n                   return latitude;\r\n               }\r\n           \r\n               /**\r\n                * returns the longitude of this geo location\r\n                */\r\n               public double getLongitude() \r\n               {\r\n                   return longitude;\r\n               }\r\n           \r\n               // returns a string representation of this geo location\r\n               public String toString() \r\n               {\r\n                   return \"latitude: \" + latitude + \", longitude: \" + longitude;\r\n               }\r\n           \r\n               // returns the distance in miles between this geo location and the given\r\n               // other geo location\r\n               public double distanceFrom(GeoLocation other) \r\n               {\r\n                   double lat1 = Math.toRadians(latitude);\r\n                   double long1 = Math.toRadians(longitude);\r\n                   double lat2 = Math.toRadians(other.latitude);\r\n                   double long2 = Math.toRadians(other.longitude);\r\n                   // apply the spherical law of cosines with a triangle composed of the\r\n                   // two locations and the north pole\r\n                   double theCos = Math.sin(lat1) * Math.sin(lat2) +\r\n                       Math.cos(lat1) * Math.cos(lat2) * Math.cos(long1 - long2);\r\n                   double arcLength = Math.acos(theCos);\r\n                   return arcLength * RADIUS;\r\n               }\r\n           }import java.util.Scanner;\r\n\r\npublic class HowFarAway \r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.print(\"Enter the latitude of the starting location: \");\r\n        double startLat = input.nextDouble();\r\n        \r\n        System.out.print(\"\\nEnter the longitude of the starting location: \");\r\n        double startLong = input.nextDouble();\r\n        \r\n        System.out.print(\"\\nEnter the latitude of the ending location: \");\r\n        double endLat = input.nextDouble();\r\n        \r\n        System.out.print(\"\\nEnter the longitude of the ending location: \");\r\n        double endLong = input.nextDouble();\r\n        \r\n        System.out.println(\"The distance is \" + (new GeoLocation(startLat, startLong)).distanceFrom(new GeoLocation(endLat, endLong)) + \" miles.\");\r\n\r\n\r\n    }\r\n}","address":"/codehs/java/2/6/how-far-away-is.html"},{"title":"2.6.6 Number Games","text":"2.6.6 Number Gamespublic class NumberGames\r\n            {\r\n                \r\n                // Keep track of the number\r\n                private double num;\r\n                \r\n                // Constructor\r\n                public NumberGames(double startingNumber)\r\n                {\r\n                    num = startingNumber;\r\n                }\r\n                \r\n                // Returns the number\r\n                public double getNumber()\r\n                {\r\n                    return num;\r\n                }\r\n                \r\n                // Doubles the number\r\n                // Returns the doubled number\r\n                public double doubleNumber()\r\n                {\r\n                    num *= 2;\r\n                    return num;\r\n                }\r\n                \r\n                // Squares the number\r\n                // Returns the squared number\r\n                public double squareNumber()\r\n                {\r\n                    num *= num;\r\n                    return num;\r\n                }\r\n                \r\n                \r\n            }public class GamesTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        NumberGames game = new NumberGames(3);\r\n        \r\n        // Double the number\r\n        // Print it out\r\n        System.out.println(game.doubleNumber());\r\n        \r\n        // Square the number\r\n        // Print it out\r\n        System.out.println(game.squareNumber());\r\n        // Double the number again\r\n        // Print it out\r\n        System.out.println(game.doubleNumber());\r\n        \r\n        // Get the number and store the value\r\n        // Print it out to see that getNumber does\r\n        // not modify the number\r\n        System.out.println(game.getNumber());\r\n    }\r\n}","address":"/codehs/java/2/6/number-games.html"},{"title":"2.7.8 Full Name","text":"2.7.8 Full Namepublic class FormFillTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    FormFill filler = new FormFill(\"Karel\", \"Dog\");\r\n                    filler.setAddress(123, \"Cherry Lane\", \"4B\");\r\n                    \r\n                    System.out.println(filler.fullName());\r\n                    System.out.println(filler.streetAddress());\r\n                    \r\n                    System.out.println(filler.creditCardInfo(123456789, 10, 2025));\r\n                    \r\n                }\r\n            }public class FormFill\r\n{\r\n    \r\n    private String fName;\r\n    private String lName;\r\n    private int streetNumber;\r\n    private String streetName;\r\n    private String aptNumber;\r\n    \r\n    // Constructor that sets the first and last name\r\n    // streetNumber defaults to 0\r\n    // the others default to an empty String\r\n    public FormFill(String firstName, String lastName)\r\n    {\r\n        fName = firstName;\r\n        lName = lastName;\r\n    }\r\n    \r\n    // Sets streetNumber, streetName, and aptNumber to the given\r\n    // values\r\n    public void setAddress(int number, String street, String apt)\r\n    {\r\n        streetNumber = number;\r\n        streetName = street;\r\n        aptNumber = apt;\r\n    }\r\n    \r\n    // Returns a string with the name formatted like\r\n    // a doctor would write the name on a file\r\n    // \r\n    // Return string should be formatted \r\n    // with the last name, then a comma and space, then the first name.\r\n    // For example: LastName, FirstName\r\n    public String fullName()\r\n    {\r\n        return lName + \", \" + fName;\r\n    }\r\n    \r\n    // Returns the formatted address\r\n    // Formatted like this\r\n    // \r\n    // StreetNumber StreetName\r\n    // Apt AptNumber\r\n    //\r\n    // You will need to use the escape character \\n\r\n    // To create a new line in the String\r\n    public String streetAddress()\r\n    {\r\n        return streetNumber + \" \" + streetName + \"\\nApt \" + aptNumber;\r\n    }\r\n    \r\n    // Returns a string with the credit card information\r\n    // Formatted like this:\r\n    // \r\n    // Card Number: Card#\r\n    // Expires: expMonth/expYear\r\n    // \r\n    // Take information as parameters so we don't store sensitive information!\r\n    // You will need to use the escape character \\n\r\n    public String creditCardInfo(int creditCardNumber, int expMonth, int expYear)\r\n    {\r\n        return \"Card Number: \" + creditCardNumber  + \"\\nExpires: \" + expMonth + \"/\" + expYear;\r\n    }\r\n    \r\n}","address":"/codehs/java/2/7/full-name.html"},{"title":"2.7.7 Pretty Printing Operations","text":"2.7.7 Pretty Printing Operationspublic class Calculator\r\n            {\r\n                // This class does not need instance variables!\r\n                // Since there are no instance variables,\r\n                // this class also does not need a constructor.\r\n                \r\n                // Java will create an empty constructor for you.\r\n                \r\n                // Returns the sum of x and y\r\n                public double sum(double x, double y)\r\n                {\r\n                    return x + y;\r\n                    \r\n                }\r\n                \r\n                // Returns the product of x and y\r\n                public double multiply(double x, double y)\r\n                {\r\n                    return x * y;\r\n                    \r\n                }\r\n                \r\n                // Returns the quotient x / y\r\n                public double divide(double x, double y)\r\n                {\r\n                   return x / y;\r\n                }\r\n                \r\n                // Returns the difference of x - y\r\n                public double subtract(double x, double y)\r\n                {\r\n                    return x - y;\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class CalculatorTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        System.out.println(\"Enter two doubles\");\r\n        double a = input.nextDouble();\r\n        double b = input.nextDouble();\r\n        \r\n        Calculator calc = new Calculator();\r\n        \r\n        System.out.println(a + \" + \" + b + \" = \" + calc.sum(a, b));\r\n        System.out.println(a + \" - \" + b + \" = \" + calc.subtract(a, b));\r\n        System.out.println(a + \" * \" + b + \" = \" + calc.multiply(a, b));\r\n        System.out.println(a + \" / \" + b + \" = \" + calc.divide(a, b));\r\n\r\n    }\r\n}","address":"/codehs/java/2/7/pretty-printing-operations.html"},{"title":"2.7.9 QuoteMachine","text":"2.7.9 QuoteMachineimport java.util.Scanner;\r\n\r\n            public class QuoteMachine\r\n            {\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Ask for a quote\r\n                    System.out.println(\"Enter a quote: \");\r\n                    String quote = input.nextLine();\r\n                    // Ask for the author\r\n                    System.out.println(\"Enter the author of the quote: \");\r\n                    String author = input.nextLine();\r\n                    \r\n                    // Create a new String that has the quote in quotation marks\r\n                    // Don't forget to escape the quotation marks\r\n                    String quoted = \"\\\"\" + quote + \"\\\"\";\r\n                    // Print the quote, then the author on the next line \r\n                    // But you can only use ONE print statement!\r\n                    System.out.println(quoted + \"\\n\" + author);\r\n                }\r\n            }","address":"/codehs/java/2/7/quotemachine.html"},{"title":"2.8.9 Concatenating Fractions","text":"2.8.9 Concatenating Fractionspublic class Fraction\r\n            {\r\n                private int numerator;\r\n                private int denominator;\r\n                \r\n                public Fraction(int numer, int denom)\r\n                {\r\n                    numerator = numer;\r\n                    denominator = denom;\r\n                }\r\n                \r\n                // Returns the numerator\r\n                public int getNumerator()\r\n                {\r\n                    return numerator;\r\n                }\r\n                \r\n                // Returns the denominator\r\n                public int getDenominator()\r\n                {\r\n                    return denominator;\r\n                }\r\n                \r\n                \r\n                // Returns a string representing a fraction\r\n                // in the form\r\n                // numerator/denominator\r\n                public String toString()\r\n                {\r\n                    return numerator + \"/\" + denominator;\r\n                }\r\n                \r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class FractionTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Create objects\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        // Ask for input\r\n        System.out.println(\"Enter the numerator:\");\r\n        int numer = input.nextInt();\r\n        \r\n        System.out.println(\"Enter the denominator:\");\r\n        int denom = input.nextInt();\r\n        // Create a new Fraction with the user's input\r\n        Fraction fr = new Fraction(numer, denom);\r\n        Fraction half = new Fraction(1, 2);\r\n        // Add the fractions\r\n        // Make use of the getDenominator and getNumerator methods\r\n        Fraction result = new Fraction((1*denom + 2*numer),\r\n                                        2 * denom);\r\n        \r\n        // Print out the fractions as an equation\r\n        // Remember you don't have to call toString yourself!\r\n        System.out.println(half + \" + \" + fr + \" = \" + result);\r\n        \r\n    }\r\n}","address":"/codehs/java/2/8/concatenating-fractions.html"},{"title":"2.8.8 Organizing Files","text":"2.8.8 Organizing Filespublic class Filer\r\n            {\r\n                private String word;\r\n                \r\n                public Filer(String theWord)\r\n                {\r\n                    word = theWord;\r\n                }\r\n                \r\n                // Returns the word\r\n                public String getWord()\r\n                {\r\n                    return word;\r\n                }\r\n                \r\n                // Returns true if word comes\r\n                // before otherWord.\r\n                // Returns false otherwise.\r\n                public boolean comesBefore(String otherWord)\r\n                {\r\n                    return word.compareTo(otherWord) < 0;\r\n                }\r\n                \r\n                \r\n                // Returns true if word comes\r\n                // after otherWord.\r\n                // Returns false otherwise.\r\n                public boolean comesAfter(String otherWord)\r\n                {\r\n                    return word.compareTo(otherWord) > 0;\r\n                }\r\n                \r\n                \r\n                // Returns true if word is equal to otherWord.\r\n                // Returns false otherwise.\r\n                public boolean isEqual(String otherWord)\r\n                {\r\n                    return word.equals(otherWord);\r\n                }\r\n                \r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class FilerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Filer files = new Filer(\"hippo\");\r\n        \r\n        String word = \"zebra\";\r\n        \r\n        System.out.println(files.getWord() + \" comes before \" + word + \"?\");\r\n        System.out.println(files.comesBefore(word));\r\n        System.out.println(files.getWord() + \" comes after \" + word + \"?\");\r\n        System.out.println(files.comesAfter(word));\r\n        System.out.println(files.getWord() + \" is equal to  \" + word + \"?\");\r\n        System.out.println(files.isEqual(word));\r\n        \r\n        \r\n        // Notice that the capitalization matters\r\n        word = \"Hippo\";\r\n        System.out.println(\"\\n\\n\");\r\n        System.out.println(files.getWord() + \" comes before \" + word + \"?\");\r\n        System.out.println(files.comesBefore(word));\r\n        System.out.println(files.getWord() + \" comes after \" + word + \"?\");\r\n        System.out.println(files.comesAfter(word));\r\n        System.out.println(files.getWord() + \" is equal to  \" + word + \"?\");\r\n        System.out.println(files.isEqual(word));\r\n        \r\n        \r\n        \r\n        System.out.println(\"\\n\\n\");\r\n        System.out.print(\"Enter a word: \");\r\n        Scanner input = new Scanner(System.in);\r\n        word = input.nextLine();\r\n        System.out.println(files.getWord() + \" comes before \" + word + \"?\");\r\n        System.out.println(files.comesBefore(word));\r\n        System.out.println(files.getWord() + \" comes after \" + word + \"?\");\r\n        System.out.println(files.comesAfter(word));\r\n        System.out.println(files.getWord() + \" is equal to  \" + word + \"?\");\r\n        System.out.println(files.isEqual(word));\r\n\r\n    }\r\n}","address":"/codehs/java/2/8/organizing-files.html"},{"title":"2.8.6 Speaking","text":"2.8.6 Speakingimport java.util.Scanner;\r\n\r\n            public class TalkerTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter some text: \");\r\n                    String words = input.nextLine();\r\n                    \r\n                    \r\n                    Talker talky = new Talker(words); \r\n                    String yelling = talky.yell();\r\n                    String whispers = talky.whisper();\r\n                    \r\n                    System.out.println(talky);\r\n                    System.out.println(\"Yelling: \" + yelling);\r\n                    System.out.println(\"Whispering: \" + whispers);\r\n                    \r\n                }\r\n            }public class Talker\r\n{\r\n    private String text;\r\n    \r\n    // Constructor\r\n    public Talker(String startingText)\r\n    {\r\n        this.text = startingText;\r\n    }\r\n    \r\n    // Returns the text in all uppercase letters\r\n    // Find a method in the JavaDocs that\r\n    // will allow you to do this with just\r\n    // one method call\r\n    public String yell()\r\n    {\r\n        return text.toUpperCase();\r\n    }\r\n    \r\n    // Returns the text in all lowercase letters\r\n    // Find a method in the JavaDocs that\r\n    // will allow you to do this with just\r\n    // one method call\r\n    public String whisper()\r\n    {\r\n        return text.toLowerCase();\r\n    }\r\n    \r\n    // Reset the instance variable to the new text\r\n    public void setText(String newText)\r\n    {\r\n        this.text = newText;\r\n    }\r\n    \r\n    // Returns a String representatin of this object\r\n    // The returned String should look like\r\n    // \r\n    // I say, \"text\"\r\n    // \r\n    // The quotes should appear in the String\r\n    // text should be the value of the instance variable\r\n    public String toString()\r\n    {\r\n        return \"I say, \\\"\" + text + \"\\\"\"; \r\n    }\r\n}","address":"/codehs/java/2/8/speaking.html"},{"title":"2.8.7 toString for Flowers","text":"2.8.7 toString for Flowerspublic class Flower\r\n            {\r\n            \r\n                private String name;\r\n                private String color;\r\n                private String genus;\r\n                private String species;\r\n            \r\n                public Flower(String theName, String theColor, String theGenus, String theSpecies)\r\n                {\r\n                    name = theName;\r\n                    color = theColor;\r\n                    genus = theGenus;\r\n                    species = theSpecies;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return color + \" \" + name + \" (\"  + genus + \" \" + species + \")\";\r\n                }\r\n            }public class FlowerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n       Flower foxglove = new Flower(\"Foxglove\", \"Red\", \"Digitalis\", \"obscura\");\r\n        System.out.println(foxglove);\r\n    }\r\n}","address":"/codehs/java/2/8/tostring-for-flowers.html"},{"title":"2.8.10 Word Games","text":"2.8.10 Word Gamespublic class WordGames\r\n            {\r\n                private String word;\r\n                \r\n                public WordGames(String text)\r\n                {\r\n                    word = text;\r\n                }\r\n                \r\n                public String scramble()\r\n                {\r\n                    return word.substring(word.length() / 2) + word.substring(0, word.length() / 2);\r\n                  \r\n                }\r\n                \r\n                \r\n                public String bananaSplit(int insertIdx, String insertText)\r\n                {\r\n                   return word.substring(0, insertIdx) + insertText + word.substring(insertIdx);\r\n                }\r\n                \r\n                \r\n                public String bananaSplit(String insertChar, String insertText)\r\n                {\r\n                    // Insert insertText after the first\r\n                    // occurence of the insertChar\r\n                    return word.substring(0, word.indexOf(insertChar)) + insertText + word.substring(word.indexOf(insertChar));\r\n                }\r\n                \r\n                \r\n                public String toString()\r\n                {\r\n                    return \"[\" + word + \"]\";\r\n                    \r\n                }\r\n                \r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class WordGameTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        // Ask for a word\r\n        \r\n        // Scramble it\r\n        // Print out scrambled word\r\n        \r\n        // Ask for an index\r\n        // Ask for random word\r\n        System.out.println(\"Enter an integer: \");\r\n        int idx = input.nextInt();\r\n        input.nextLine();  // skip over the newline-- bug with the codehs input system\r\n        System.out.println(\"Enter another word: \");\r\n        String word = input.nextLine();\r\n        \r\n        // Add random word at index\r\n        // Print out the word\r\n        \r\n        \r\n        // Ask for a character (store as a String)\r\n        // Ask for random word\r\n        // Add random word at character\r\n        // Print out the word\r\n        \r\n        \r\n        \r\n    }\r\n}","address":"/codehs/java/2/8/word-games.html"},{"title":"2.9.7 Currency","text":"2.9.7 Currencypublic class Currency\r\n            {\r\n                private Double value;\r\n                \r\n                // Constructor\r\n                public Currency(Double startValue)\r\n                {\r\n                    value = startValue;\r\n                }\r\n                \r\n                // Sets value to newValue\r\n                public void setValue(Double newValue)\r\n                {\r\n                    value = newValue;\r\n                }\r\n                \r\n                // Returns the dollar portion of value\r\n                // if value is 12.34, returns 12\r\n                public Integer getDollars()\r\n                {\r\n                    return (int)value.doubleValue();\r\n                }\r\n                \r\n                // Returns the cents portion of value\r\n                // as an Integer\r\n                // if value is 12.34, returns 34\r\n                public Integer getCents()\r\n                {\r\n                    return (int)(value * 100) % 100;\r\n                }\r\n                \r\n                // Returns a String representation\r\n                // in the format\r\n                // $12.34\r\n                public String toString()\r\n                {\r\n                    return \"$\" + getDollars() + \".\" + getCents();\r\n                }\r\n            }public class CurrencyTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Currency bankRoll = new Currency(12.45);\r\n        \r\n        System.out.println(\"Value of bankroll: \" + bankRoll);\r\n        System.out.println(\"Dollars: \" + bankRoll.getDollars());\r\n        System.out.println(\"Cents: \" + bankRoll.getCents());\r\n        \r\n        \r\n        bankRoll.setValue(20.56);\r\n        System.out.println(\"Value of bankroll: \" + bankRoll);\r\n        System.out.println(\"Dollars: \" + bankRoll.getDollars());\r\n        System.out.println(\"Cents: \" + bankRoll.getCents());\r\n        \r\n        bankRoll.setValue(67.78);\r\n        System.out.println(\"Value of bankroll: \" + bankRoll);\r\n        System.out.println(\"Dollars: \" + bankRoll.getDollars());\r\n        System.out.println(\"Cents: \" + bankRoll.getCents());\r\n        \r\n        \r\n    }\r\n}","address":"/codehs/java/2/9/currency.html"},{"title":"2.9.8 Guess the number!","text":"2.9.8 Guess the number!public class Extremes\r\n            {\r\n                Integer min;\r\n                Integer max;\r\n                \r\n                // Constructor\r\n                public Extremes()\r\n                {\r\n                    min = Integer.MIN_VALUE;\r\n                    max = Integer.MAX_VALUE;\r\n                }\r\n                \r\n                // Returns the difference\r\n                // max - number\r\n                public Integer maxDiff(Integer number)\r\n                {\r\n                    return max - number;\r\n                }\r\n            \r\n                // Returns the difference\r\n                // min - number\r\n                public Integer minDiff(Integer number)\r\n                {\r\n                    return min - number;\r\n                }\r\n                \r\n                // Returns a String representation\r\n                // in the form\r\n                // [min, max]\r\n                public String toString()\r\n                {\r\n                    return \"[\" + min + \", \" + max + \"]\";   \r\n                }\r\n            }import java.util.Scanner;\r\nimport java.lang.*;\r\n\r\npublic class ExtremeMain\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Create a Scanner object\r\n        Scanner input = new Scanner(System.in);\r\n        \r\n        // Create an Extremes object\r\n        Extremes extremes = new Extremes();\r\n        \r\n        // Ask the user to guess the maximum value of an Integer\r\n        System.out.println(\"Guess the maximum Integer value: \");\r\n        Integer guessMax = new Integer(input.nextInt());\r\n        System.out.println(\"You were off by \" + extremes.maxDiff(guessMax));\r\n        System.out.println(\"Guess the minimum Integer value: \");\r\n        Integer guessMin = new Integer(input.nextInt());\r\n        System.out.println(\"You were off by \" + extremes.minDiff(guessMin));\r\n        \r\n        // Compute and display the difference\r\n        // between the max and the guess\r\n        \r\n        \r\n        // Ask the user to guess the minimum value of an Integer\r\n        \r\n        \r\n        // Compute and display the difference \r\n        // between the min and the guess\r\n        \r\n        \r\n    }\r\n}","address":"/codehs/java/2/9/guess-the-number.html"},{"title":"2.9.6 Order Up!","text":"2.9.6 Order Up!import java.util.Scanner;\r\n\r\n            public class PickupWindow\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create scanner object\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Display menu\r\n                    String menu = \"1. Hamburger\\n2. Cheeseburger\\n3. Veggie Burger\\n4. Nachos\\n5. Hot Dog\\n\";\r\n                    \r\n                    System.out.println(menu);\r\n                    \r\n                    // Get customer order\r\n                    System.out.println(\"Enter label: \");\r\n                    String customerOrder = input.nextLine();\r\n                    \r\n                    // Use substring to get the first character (the number)\r\n                    String combo = customerOrder.substring(0,1);\r\n                    \r\n                    // Create an Integer object by using the static\r\n                    // method Integer.valueOf(someString)\r\n                    // to turn the string into an Integer\r\n                    \r\n                    Integer comboNumber =  Integer.valueOf(combo);\r\n                    \r\n                    // Print out what the customer ordered\r\n                    System.out.println(\"Customer ordered number \" + comboNumber);\r\n                    \r\n                    \r\n                }\r\n            }","address":"/codehs/java/2/9/order-up.html"},{"title":"3.1.6 Number Order","text":"3.1.6 Number Orderimport java.util.Scanner;\r\n\r\n            public class RelativeNumbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"Enter two numbers:\");\r\n                    Scanner input = new Scanner(System.in);\r\n                    int in1 = input.nextInt();\r\n                    int in2 = input.nextInt();\r\n                    \r\n                            \r\n                    \r\n                    // Compare the numbers as instructed\r\n                    System.out.println(in1 + \" < \" + in2 + \": \" + (in1 < in2));\r\n                    System.out.println(in1 + \" == \" + in2 + \": \" + (in1 == in2));\r\n                    System.out.println(in1 + \" > \" + in2 + \": \" + (in1 > in2));\r\n                    // Display the results\r\n                }\r\n            }","address":"/codehs/java/3/1/number-order.html"},{"title":"3.1.7 Sugar Tax","text":"3.1.7 Sugar Taximport java.util.Scanner;\r\n\r\n            public class AddedSugar\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Scanner object\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n            \r\n                    \r\n                    // Ask the user for the grams of sugar\r\n                    System.out.println(\"How many grams of sugar have you eaten today? \");\r\n                    int sugar = in.nextInt();\r\n                    // Use a boolean expression to print if they can eat more sugar\r\n                    System.out.println(\"You can eat more sugar: \" + (sugar < 30));\r\n                }\r\n            }","address":"/codehs/java/3/1/sugar-tax.html"},{"title":"3.1.8 Triple Double","text":"3.1.8 Triple Doubleimport java.util.Scanner;\r\n            public class TripleDouble \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"How many points did you score? \");\r\n                    int points = input.nextInt();\r\n                    System.out.println(\"How many rebounds did you get? \");\r\n                    int rebounds = input.nextInt();\r\n                    System.out.println(\"How many assists did you have? \");\r\n                    int assists = input.nextInt();\r\n                    System.out.println(\"You got 10 or more points: \" + (points >= 10));\r\n                    System.out.println(\"You got 10 or more rebounds: \" + (rebounds >= 10));\r\n                    System.out.println(\"You got 10 or more assists: \" + (assists >= 10));\r\n            \r\n                    \r\n                    \r\n                }\r\n            }","address":"/codehs/java/3/1/triple-double.html"},{"title":"3.2.8 Cooking","text":"3.2.8 Cookingpublic class MicrowaveCooking\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   int secs = (int)(Math.random()*60+1);\r\n                   \r\n                   System.out.println(\"Microwaving for \" + secs + \" seconds\");\r\n                   \r\n                   if(secs < 20) {\r\n                       System.out.println(\"Perfect cooking time!\");\r\n                   } else {\r\n                       System.out.println(\"Your roll will catch fire!\");\r\n                   }\r\n                }\r\n            }","address":"/codehs/java/3/2/cooking.html"},{"title":"3.2.6 Discounts","text":"3.2.6 Discountsimport java.util.Scanner;\r\n\r\n            public class Discounts\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a scanner object\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n                    // Ask how many hours were you parked\r\n                    int hoursParked = in.nextInt();\r\n                    // Compute cost - $3.50 per hour\r\n                    double cost = 3.5 * hoursParked;\r\n                    // If cost is over $20, set cost to $20\r\n                    if(cost > 20) cost = 20.0;\r\n                    // Display the final cost\r\n                    System.out.println(\"You owe $\" + cost);\r\n                    \r\n                }\r\n            }","address":"/codehs/java/3/2/discounts.html"},{"title":"3.2.9 Rating","text":"3.2.9 Ratingpublic class Rater\r\n            {\r\n                private String name; // name of company\r\n                private double rating; // number rating (1 - 5)\r\n                \r\n                \r\n                public Rater(String company, double initialRating)\r\n                {\r\n                    name = company;\r\n                    rating = initialRating;\r\n                }\r\n                \r\n                // Set rating to newRating\r\n                // As long as it's no more than 5\r\n                public void setRating(double newRating)\r\n                {\r\n                    rating = Math.min(newRating,5.0);\r\n                }\r\n                \r\n                // Returns the rating of the company\r\n                public double getRating()\r\n                {\r\n                    return rating;\r\n                }\r\n                \r\n                // Returns a string representation of the company\r\n                // based on their ratings\r\n                public String toString()\r\n                {\r\n                    if(rating < 2) return \"Not Recommended Company \" + name;\r\n                    else if(rating <= 3.5) return \"Well Rated Company \" + name;\r\n                    else return \"Gold Star Company \" + name;\r\n                }\r\n            }public class RaterTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rater jrs = new Rater(\"Jr Cookery\", 2);\r\n        \r\n        \r\n        // Test Case: In the middle\r\n        System.out.println(\"Current Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n        \r\n        // Test Case: High rating\r\n        jrs.setRating(4.5);\r\n        System.out.println(\"\\nCurrent Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n        // Test Case: Setting rating too high\r\n        jrs.setRating(100);\r\n        System.out.println(\"\\nCurrent Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n        \r\n        // Test Case: Low rating\r\n        jrs.setRating(1);\r\n        System.out.println(\"\\nCurrent Rating: \" + jrs.getRating());\r\n        System.out.println(jrs);\r\n        \r\n    }\r\n}","address":"/codehs/java/3/2/rating.html"},{"title":"3.2.7 Sweet or Unsweet?","text":"3.2.7 Sweet or Unsweet?import java.util.Scanner;\r\n\r\n            public class DrinkOrder\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    String drinkName = input.nextLine();\r\n                    System.out.println();\r\n                    int sugar = input.nextInt();\r\n                    \r\n                    System.out.println(drinkName + (sugar>0?\" with sugar\":\"\"));\r\n                }\r\n            }","address":"/codehs/java/3/2/sweet-or-unsweet.html"},{"title":"3.3.6 Battleships Move","text":"3.3.6 Battleships Movepublic class BattleshipTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create objects\r\n                    Battleship submarine = new Battleship(\"Submarine\", 4);\r\n                    Battleship carrier = new Battleship(\"Carrier\", 10);\r\n                    \r\n                    // Check initial positions\r\n                    System.out.println(submarine);\r\n                    System.out.println(carrier);\r\n                    \r\n                    \r\n                    // Test: Safely move submarine\r\n                    System.out.println(\"Submarine cleared to proceed\");\r\n                    submarine.move(true);\r\n                    System.out.println(submarine);\r\n                    \r\n                    \r\n                    // Test unsafe to move carrier\r\n                    System.out.println(\"Carrier NOT cleared to proceed\");\r\n                    carrier.move(false);\r\n                    System.out.println(carrier);\r\n                    \r\n                    \r\n                }\r\n            }public class Battleship\r\n{\r\n    private String shipType;\r\n    private int position;\r\n    \r\n    public Battleship(String type, int shipPosition)\r\n    {\r\n        shipType = type;\r\n        position = shipPosition;\r\n    }\r\n    \r\n    // Moves the ship\r\n    // If safeToMove is true, add 5 to position\r\n    // else subtract 5 from position\r\n    public void move (boolean safeToMove)\r\n    {\r\n       if(safeToMove) position += 5;\r\n       else position -= 5;\r\n\r\n    }\r\n    \r\n    // Returns the position of the ship\r\n    public int getPosition()\r\n    {\r\n        return position;\r\n    }\r\n    \r\n    // String representation of the object\r\n    public String toString()\r\n    {\r\n        return shipType + \" at \" + position;\r\n    }\r\n}","address":"/codehs/java/3/3/battleships-move.html"},{"title":"3.3.8 Player Score","text":"3.3.8 Player Scoreimport java.util.Scanner;\r\n\r\n            public class Basketball\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter player one's name: \");\r\n                    String p1name = input.nextLine();\r\n                    System.out.println(\"Enter player two's name: \");\r\n                    String p2name = input.nextLine();\r\n                    System.out.println(\"Enter Tracy's score\");\r\n                    int p1score = input.nextInt();\r\n                    System.out.println(\"Enter Karel's score\");\r\n                    int p2score = input.nextInt();\r\n                    if(p1name.compareTo(p2name) < 0) {\r\n                        System.out.println(p1name + \" scored \" + p1score + \" points\");\r\n                        System.out.println(p2name + \" scored \"+ p2score + \" points\");\r\n                    } else {\r\n                        System.out.println(p2name + \" scored \"+ p2score + \" points\");\r\n                        System.out.println(p1name + \" scored \" + p1score + \" points\");\r\n                        \r\n                    }\r\n                    \r\n                    if(p1score > p2score) System.out.println(p1name + \" wins!\");\r\n                    else System.out.println(p2name + \" wins!\");\r\n            \r\n                    \r\n                    \r\n                }\r\n            }","address":"/codehs/java/3/3/player-score.html"},{"title":"3.3.5 Positive or Negative","text":"3.3.5 Positive or Negativeimport java.util.Scanner;\r\n\r\n            public class Numbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    int input = in.nextInt();\r\n                    \r\n                    if(input >= 0) System.out.println(\"The number is positive!\");\r\n                    else System.out.println(\"The number is negative!\");\r\n                }\r\n            }","address":"/codehs/java/3/3/positive-or-negative.html"},{"title":"3.3.7 Ratings","text":"3.3.7 Ratingspublic class Rater\r\n            {\r\n                private String name; // name of company\r\n                private double rating; // number rating (1 - 5)\r\n                private String review; // review shown with company name \r\n                \r\n                \r\n                public Rater(String company, double initialRating)\r\n                {\r\n                    name = company;\r\n                    rating = initialRating;\r\n                    review = \"\";\r\n                    \r\n                }\r\n                \r\n                // Set rating to newRating\r\n                // As long as it's no more than 5\r\n                public void setRating(double newRating)\r\n                {\r\n                    rating = Math.min(newRating, 5);\r\n                }\r\n                \r\n                // Updates review line based on rating\r\n                public void updateReview()\r\n                {\r\n                    if(rating >= 3) review = \"Proudly recommended\";\r\n                    else review = \"Needs more ratings\";\r\n                }\r\n                \r\n                \r\n                // Returns the rating of the company\r\n                public double getRating()\r\n                {\r\n                    return rating;\r\n                }\r\n                \r\n                // Returns a string representation of the company\r\n                // Uses the form\r\n                // name : review\r\n                public String toString()\r\n                {\r\n                    return name + \" : \" + review;\r\n                }\r\n            }public class RaterTesting\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rater company1 = new Rater(\"a\", 0.0);\r\n        company1.updateReview();\r\n        System.out.println(company1);\r\n        \r\n        Rater company2 = new Rater(\"b\", 5.0);\r\n        company2.updateReview();\r\n        System.out.println(company2);\r\n    }\r\n}","address":"/codehs/java/3/3/ratings.html"},{"title":"3.4.9 Battleships","text":"3.4.9 Battleshipspublic class ShipTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Battleship sub = new Battleship(\"submarine\", 6);\r\n                    Battleship raft = new Battleship(\"raft\", 2);\r\n                    Battleship destroyer = new Battleship(\"destroyer\", 9);\r\n                 \r\n                    System.out.println(sub);\r\n                    System.out.println(\"Sub has power \" + sub.getPower());\r\n                    \r\n                    System.out.println(raft);\r\n                    System.out.println(\"Raft has power \" + raft.getPower());\r\n                    \r\n                    System.out.println(destroyer);\r\n                    System.out.println(\"Destroyer has power \" + destroyer.getPower());\r\n                    \r\n                    System.out.println(\"\\nRaft attacks Sub\");\r\n                    sub.isAttacked(raft.getPower());\r\n                    System.out.println(sub);\r\n                    \r\n                    System.out.println(\"\\nDestroyer attacks Raft\");\r\n                    raft.isAttacked(destroyer.getPower());\r\n                    System.out.println(raft);\r\n                    \r\n                    System.out.println(\"\\nSub attacks Destroyer\");\r\n                    destroyer.isAttacked(sub.getPower());\r\n                    System.out.println(destroyer);\r\n            \r\n            \r\n                }\r\n            }public class Battleship\r\n{\r\n    private String name;  // type of ship\r\n    private int power;   // power of attack in range [1 - 10]\r\n    private int health; // health of the ship\r\n    \r\n    // Constructor\r\n    public Battleship(String shipType, int attackPower)\r\n    {\r\n        name = shipType;\r\n        power = attackPower;\r\n        health = 100;\r\n    }\r\n    \r\n    // Modifies the health of the battleship\r\n    public void isAttacked(int attackPower)\r\n    {\r\n        if(attackPower < 4) health -= 3;\r\n        else if(attackPower < 8) health -= 5;\r\n        else health -= 7;\r\n    }\r\n    \r\n    // Returns true if the health of\r\n    // the ship is greater than 0\r\n    public boolean stillFloating()\r\n    {\r\n        return health > 0;\r\n    }\r\n    \r\n    // Returns the power of the ship\r\n    public int getPower()\r\n    {\r\n        return power;\r\n    }\r\n    \r\n    // Returns string representation in the form\r\n    // Battleship name\r\n    public String toString()\r\n    {\r\n        return name + \"(\" + health + \")\";    \r\n    }\r\n    \r\n}","address":"/codehs/java/3/4/battleships.html"},{"title":"3.4.8 Berries","text":"3.4.8 Berriesimport java.util.Scanner;\r\n\r\n            public class Berries\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Ask for a berry initial\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    String berries = input.nextLine();\r\n                    char berry = berries.charAt(0);\r\n                    \r\n                    // To get the input as a character, use the String method\r\n                    // charAt().  Use str.charAt(0) since you want the\r\n                    // first character\r\n                    if(berry == 'r') System.out.println(\"You ordered raspberry\");\r\n                    else if(berry == 'h') System.out.println(\"You ordered huckleberry\");\r\n                    else if(berry == 'g') System.out.println(\"You ordered goji berry\");\r\n                    else System.out.println(\"Berry not recognized\");\r\n                }\r\n            }","address":"/codehs/java/3/4/berries.html"},{"title":"3.4.6 Positive, Negative, or Zero","text":"3.4.6 Positive, Negative, or Zeroimport java.util.Scanner;\r\n\r\n            public class Numbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    \r\n                    int userInput = in.nextInt();\r\n                    \r\n                    if(userInput < 0) System.out.println(\"The number is negative!\");\r\n                    else if(userInput == 0) System.out.println(\"The number is neither positive nor negative!\");\r\n                    else System.out.println(\"The number is positive!\");\r\n                }\r\n            }","address":"/codehs/java/3/4/positive-negative-or-zero.html"},{"title":"3.4.7 Salmon Spawn","text":"3.4.7 Salmon Spawnimport java.util.Scanner;\r\n\r\n            public class Salmon\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    // Ask user for month of year as an integer\r\n                    int month = input.nextInt();\r\n                    \r\n                    if(month > 2 && month < 7) System.out.println(\"Spring spawning season\");\r\n                    else if(month > 8 && month < 12) System.out.println(\"Fall spawning season\");\r\n                    else System.out.println(\"Not spawning season\");\r\n                    \r\n                }\r\n            }","address":"/codehs/java/3/4/salmon-spawn.html"},{"title":"3.5.7 Compound Roller Coaster","text":"3.5.7 Compound Roller Coasterimport java.util.Scanner;\r\n\r\n            public class RollerCoaster \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    System.out.println(\"Enter Height (inches):\");\r\n                    int height = input.nextInt();\r\n                    System.out.println(\"Enter Age (years):\");\r\n                    int age = input.nextInt();\r\n                    \r\n                    if(age > 8 && height > 41) System.out.println(\"Welcome aboard!\");\r\n                    else System.out.println(\"Sorry, you are not eligible to ride\");\r\n                }\r\n            }","address":"/codehs/java/3/5/compound-roller-coaster.html"},{"title":"3.5.8 Divisibility","text":"3.5.8 Divisibilityimport java.util.Scanner;\r\n\r\n            public class Divisibility \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    System.out.println(\"Enter the dividend: \\nEnter the divisor: \");\r\n                    int dividend = input.nextInt();\r\n                    int divisor = input.nextInt();\r\n                    if(divisor == 0 || dividend % divisor > 0) System.out.println(dividend + \" is not divisible by \" + divisor + \"!\");\r\n                    else System.out.println(dividend + \" is divisible by \" + divisor + \"!\");\r\n                }\r\n            }","address":"/codehs/java/3/5/divisibility.html"},{"title":"3.5.9 Find the  Minimum","text":"3.5.9 Find the  Minimumimport java.util.Scanner;\r\n\r\n            public class FindMinimum \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    \r\n                    System.out.println(\"Enter the first integer: \");\r\n                    int i1 = input.nextInt();\r\n                    System.out.println(\"Enter the second integer: \");\r\n                    int i2 = input.nextInt();\r\n                    System.out.println(\"Enter the third integer: \");\r\n                    int i3 = input.nextInt();\r\n                    System.out.println(\"The minimum is 23\");\r\n            \r\n                    System.out.println(\"The minimum is \" + Math.min(Math.min(i1, i2), i3));\r\n                }\r\n            }","address":"/codehs/java/3/5/find-the-minimum.html"},{"title":"3.5.6 Roller Coaster","text":"3.5.6 Roller Coasterimport java.util.Scanner;\r\n\r\n            public class RollerCoaster \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    int height = input.nextInt();\r\n                    int age = input.nextInt();\r\n                    \r\n                    if(age > 8 && height > 41) System.out.println(\"Welcome aboard!\");\r\n                    else System.out.println(\"Sorry, you are not eligible to ride\");\r\n                }\r\n            }","address":"/codehs/java/3/5/roller-coaster.html"},{"title":"3.6.5 Amusement Park","text":"3.6.5 Amusement Parkimport java.util.Scanner;\r\n\r\n            public class AmusementPark\r\n            {\r\n                \r\n                static int AGE_LIMIT = 12;\r\n                static int HEIGHT_LIMIT = 48;\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Enter your age: \"); \r\n                    int age = input.nextInt();\r\n                    \r\n                    System.out.println(\"Enter your height in inches: \");\r\n                    int height = input.nextInt();\r\n                    \r\n                    boolean oldEnough = age >= AGE_LIMIT;\r\n                    boolean tallEnough = height >= HEIGHT_LIMIT;\r\n                    \r\n                    // CHANGE THIS LINE\r\n                    // Convert this boolean expression into its De Morgan equivalent\r\n                    boolean cannotRide = !oldEnough || !tallEnough;\r\n                    \r\n                    if(cannotRide)\r\n                    {\r\n                        System.out.println(\"You may not ride the rollercoasters.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"You may ride the rollercoasters!\");\r\n                    }\r\n                    \r\n                    System.out.println(\"Can you swim? Enter true or false.\");\r\n                    boolean canSwim = input.nextBoolean();\r\n                    \r\n                    System.out.println(\"Do you have a life jacket? Enter true or false.\");\r\n                    boolean hasLifeJacket = input.nextBoolean();\r\n                    \r\n                    // CHANGE THIS LINE\r\n                    // Convert this boolean expression into its De Morgan equivalent\r\n                    boolean cannotSwim = !canSwim && !hasLifeJacket;\r\n                    \r\n                    if(cannotSwim)\r\n                    {\r\n                        System.out.println(\"You may not swim in the pool.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"You may swim in the pool!\");\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/3/6/amusement-park.html"},{"title":"3.6.7 Odd and Even","text":"3.6.7 Odd and Evenpublic class OddEven\r\n            {\r\n                // Determines if num1 and num2 are both ODD\r\n                public static boolean bothOdd(int n1, int n2)\r\n                {\r\n                    return n1 % 2 != 0 && n2 % 2 != 0;\r\n                }\r\n                \r\n                // Determines if num1 and num2 are both EVEN \r\n                public static boolean bothEven(int n1, int n2)\r\n                {\r\n                    return (n1 % 2 == 0) && (n2 % 2 == 0);\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class OddEvenTester\r\n{\r\n        public static void main(String[] args)\r\n        {\r\n            //Ask user to input 2 positive integers\r\n            Scanner input  = new Scanner(System.in);\r\n            System.out.println(\"Enter 2 positive integers\");\r\n            int num1 = input.nextInt();\r\n            int num2 = input.nextInt();\r\n            \r\n            //Call bothOdd method in OddEven class to determine if both \r\n            //numbers are odd\r\n            if(OddEven.bothOdd(num1, num2))\r\n            {\r\n                System.out.println(\"Both numbers are ODD.\");\r\n            }\r\n            \r\n            //Call bothEven in the OddEven class to determine if both\r\n            //numbers are even\r\n            else if(OddEven.bothEven(num1, num2))\r\n            {\r\n                System.out.println(\"Both numbers are EVEN.\");\r\n            }\r\n            \r\n            //Print out that one must be odd and one must be even since\r\n            //they are not both odd or both even\r\n            else\r\n            {\r\n                System.out.println(\"One number is ODD and one number is EVEN.\");\r\n            }\r\n            \r\n        }\r\n}","address":"/codehs/java/3/6/odd-and-even.html"},{"title":"3.6.6 Odd Numbers","text":"3.6.6 Odd Numbersimport java.util.Scanner;\r\n\r\n            public class OddNumbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //Ask user to enter 2 positive integers\r\n                    Scanner input  = new Scanner(System.in);\r\n                    System.out.println(\"Enter 2 positive integers\");\r\n                    int num1 = input.nextInt();\r\n                    int num2 = input.nextInt();\r\n                    \r\n                    //Determine if both numbers are odd with bothOdd boolean\r\n                    // Do NOT remove this line!\r\n                    boolean bothOdd = num1 % 2 != 0 && num2 % 2 != 0;\r\n                    \r\n                    //ADD THE NEW LINE HERE\r\n                    boolean bothOddDeMorgan = !(num1 % 2 == 0 || num2 % 2 == 0);\r\n                    \r\n                    //Print out if both numbers are odd or not both odd\r\n                    if (bothOdd)\r\n                    {\r\n                       System.out.println(\"Both numbers are odd\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"Both numbers are NOT odd.\");\r\n                    }\r\n                    \r\n                    //Print out if both numbers are odd or not both odd\r\n                    if (bothOddDeMorgan)\r\n                    {\r\n                       System.out.println(\"Both numbers are odd with De Morgan's Laws.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"Both numbers are NOT odd with DeMorgan's Laws.\");\r\n                    }\r\n                    \r\n                    //Check that both Boolean values evaluate to the same value\r\n                    if(bothOdd == bothOddDeMorgan)\r\n                    {\r\n                        System.out.println(\"DeMorgan was right, again!\");\r\n                    }\r\n               }\r\n            }","address":"/codehs/java/3/6/odd-numbers.html"},{"title":"3.7.10 Comparing Circles","text":"3.7.10 Comparing CirclesBTW\r\n                Because of some obscure features of the Java compiler, this assignment will work with ==\r\n                    or .equals(). You don't need to change anything for this one!\r\n                    Even so, you should still use the code below. This trick will fail on more complex assignments,\r\n                    where it isn't as easy for the compiler to optimize.public class CircleTester \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Circle one = new Circle(10, \"blue\", 50, 35);\r\n                    Circle two = new Circle(10, \"blue\", 50, 35);\r\n                    Circle three = new Circle(20, \"red\", 0, 0);\r\n                    Circle four = three;\r\n                    \r\n                    // Modify this program to correctly compare objects\r\n                    // We should not be comparing objects using ==\r\n                    \r\n                    if(one.equals(two))\r\n                    {\r\n                        System.out.println(\"Circles one and two are equal!\");\r\n                        System.out.println(one);\r\n                        System.out.println(two);\r\n                    }\r\n                    \r\n                    if(three.equals(four))\r\n                    {\r\n                        System.out.println(\"Circles three and four are equal!\");\r\n                        System.out.println(three);\r\n                        System.out.println(four);\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/3/7/comparing-circles.html"},{"title":"3.7.7 String Variable Trace","text":"3.7.7 String Variable TraceJSYK\r\n            The reason you comment out the 3rd and 5th if statements is because as they evaluate to false, they don't contribute to the outputpublic class StringTrace\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String str1 = null;\r\n                    String str2 = new String(\"Karel\");\r\n                    String str3 = \"Karel\";\r\n                    \r\n                    if (str1 == null)\r\n                    {\r\n                        str1 = str2;\r\n                    }\r\n                    \r\n                    if (str1 == str2)\r\n                    {\r\n                        System.out.println(\"str1 and str2 refer to the same object\");\r\n                    }\r\n                    \r\n                    /*if (str2 == str3)\r\n                    {\r\n                        System.out.println(\"str2 and str3 refer to the same object\");\r\n                    }*/\r\n                    \r\n                    if (str1.equals(str2) && str2.equals(str3))\r\n                    {\r\n                        System.out.println(\"str1, str2, and str3 are equal\");\r\n                    }\r\n                    \r\n                    /*if ((str1 == str2) && (str2 == str3))\r\n                    {\r\n                        System.out.println(\"str1, str2, and str3 are the same objects\");\r\n                        \r\n                    }*/\r\n                    \r\n                }\r\n            }","address":"/codehs/java/3/7/string-variable-trace.html"},{"title":"3.7.9 Three Strings","text":"3.7.9 Three Stringsimport java.util.Scanner;\r\n            public class ThreeStrings\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner in = new Scanner(System.in);\r\n                    String str1 = in.nextLine();\r\n                    String str2 = in.nextLine();\r\n                    String str3 = in.nextLine();\r\n                    if((str1 + str2).equals(str3)) {\r\n                        System.out.println(str1 + \" + \" + str2 + \" is equal to \" + str3 + \"!\");\r\n                    } else {\r\n                        System.out.println(str1 + \" + \" + str2 + \" is not equal to \" + str3 + \"!\");\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/3/7/three-strings.html"},{"title":"4.1.8 Divisibility","text":"4.1.8 Divisibilitypublic class ExtractDigits\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    extractDigits(2938724);\r\n                    \r\n                }\r\n                \r\n                public static void extractDigits(int num)\r\n                {\r\n                    while(num > 0) {\r\n                        System.out.println(num % 10);\r\n                        num /= 10;\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/1/divisibility.html"},{"title":"4.1.7 Guess the Number","text":"4.1.7 Guess the Numberimport java.util.Scanner;\r\n            public class GuessTheNumber\r\n            { \r\n                // This is the secret number that will pass the autograder!\r\n                static int secretNumber = 6;\r\n                public static void main(String[] args)\r\n                {\r\n                    \r\n                    // Allow the user to keep guessing numbers between\r\n                    // 1 and 10 until they guess the correct number\r\n                    \r\n                    System.out.println(\"I'm thinking of a number between 1 and 10.\");\r\n                    System.out.println(\"See if you can guess the number!\");\r\n                    \r\n                    // This calls the static method GuessMyNumber. Notice that the method is outside \r\n                    // of the main method. \r\n                    guessMyNumber();\r\n                    \r\n                }\r\n                \r\n                public static void guessMyNumber() \r\n                {  \r\n                    Scanner sc = new Scanner(System.in);\r\n                    int number = secretNumber;\r\n                    int guess = -1;\r\n                    while(guess != number) {\r\n                        System.out.println(\"Enter your guess\");\r\n                        guess = sc.nextInt();\r\n                        if(guess != number) System.out.println(\"Try again!\");\r\n                        else System.out.println(\"Correct!\");\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/1/guess-the-number.html"},{"title":"4.1.6 Making Taffy","text":"4.1.6 Making Taffyimport java.util.Scanner;\r\n            public class TaffyTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   \r\n                   int temperature = 0;\r\n                   Scanner sc = new Scanner(System.in);\r\n                   \r\n                   System.out.println(\"Starting Taffy Timer\");\r\n                   \r\n                   while(temperature < 270) {\r\n                       System.out.print(\"Enter the temperature: \");\r\n                       temperature = sc.nextInt();\r\n                       if(temperature < 270) System.out.println(\"The mixture isn't ready yet.\");\r\n                       \r\n                   }\r\n                   \r\n                   System.out.println(\"Your taffy is ready for the next step!\");\r\n                }\r\n            }","address":"/codehs/java/4/1/making-taffy.html"},{"title":"4.1.9 Max and Min Values","text":"4.1.9 Max and Min Valuesimport java.util.Scanner;\r\n\r\n            public class MaxMin\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int smallest = Integer.MAX_VALUE;\r\n                    int largest = Integer.MIN_VALUE;\r\n                    \r\n                    Scanner sc = new Scanner(System.in);\r\n                    \r\n                    int input = 0;\r\n                    while(true) {\r\n                        System.out.println(\"Enter a number (-1 to quit): \");\r\n                        input = sc.nextInt();\r\n                        if(input != -1) {\r\n                            System.out.println(\"Smallest # so far: \" + (smallest = Math.min(smallest, input)));\r\n                            System.out.println(\"Largest # so far: \" + (largest = Math.max(largest, input)));\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/1/max-and-min-values.html"},{"title":"4.2.10 Multiplication Table","text":"4.2.10 Multiplication Tablepublic class MultiplicationTable\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    for(int i = 1; i <= 10; i++) {\r\n                        System.out.println(\"4 * \" + i + \" = \" + (4*i));\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/2/multiplication-table.html"},{"title":"4.2.6 Print the Odds","text":"4.2.6 Print the Oddspublic class Odds\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    for(int i = 1; i < 100; i+=2) System.out.println(i);\r\n                }\r\n            }","address":"/codehs/java/4/2/print-the-odds.html"},{"title":"4.2.7 Repeat 100 Times","text":"4.2.7 Repeat 100 Timespublic class Repeat100\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    for(int i = 0; i < 100; i++) System.out.println(\"Hello Karel\");\r\n                }\r\n            }","address":"/codehs/java/4/2/repeat-100-times.html"},{"title":"4.2.9 Replace FOR Loop with WHILE Loop","text":"4.2.9 Replace FOR Loop with WHILE Looppublic class Odds\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Run this code first to see what is does. \r\n                    // Then replace the for loop with an equivalent while loop.\r\n                    int x = 1;\r\n                    while(x <= 10) {\r\n                        System.out.println(x);\r\n                        x = x+2;\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/2/replace-for-loop-with-while-loop.html"},{"title":"4.2.8 Replace WHILE with FOR Loop","text":"4.2.8 Replace WHILE with FOR Looppublic class Countdown\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Run this code first to see what is does. \r\n                    // Replace the while loop with an equivalent for loop.\r\n                    for(int x = 10; x > 0; x--) {\r\n                        System.out.println(x);\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/2/replace-while-with-for-loop.html"},{"title":"4.3.8 Finding Palindromes","text":"4.3.8 Finding Palindromesimport java.util.Scanner;\r\n            public class Palindromes\r\n            {\r\n                /**\r\n                 * This program lets the user input some text and\r\n                 * prints out whether or not that text is a palindrome.\r\n                 */\r\n                public static void main(String[] args)\r\n                {\r\n                   Scanner sc = new Scanner(System.in);\r\n                   String word = sc.nextLine();\r\n                   System.out.println(\"Your word is \" + (isPalindrome(word)?\"\":\"not \") + \"a palindrome!\");\r\n                }\r\n                \r\n                /**\r\n                 * This method determines if a String is a palindrome,\r\n                 * which means it is the same forwards and backwards.\r\n                 * \r\n                 * @param text The text we want to determine if it is a palindrome.\r\n                 * @return A boolean of whether or not it was a palindrome.\r\n                 */\r\n                public static boolean isPalindrome(String text)\r\n                {\r\n                   return text.equals(reverse(text));\r\n                }\r\n                \r\n                /**\r\n                 * This method reverses a String.\r\n                 * \r\n                 * @param text The string to reverse.\r\n                 * @return The new reversed String.\r\n                 */\r\n                public static String reverse(String text)\r\n                {\r\n                    String r = \"\";\r\n                    for(int i = text.length() - 1; i>=0;i--) r+= text.charAt(i);\r\n                    return r;\r\n                }\r\n            \r\n            }","address":"/codehs/java/4/3/finding-palindromes.html"},{"title":"4.3.9 Fixing Grammar","text":"4.3.9 Fixing Grammarimport java.util.Scanner;\r\n            public class Grammar\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner sc = new Scanner(System.in);\r\n                    String f = sc.nextLine();\r\n                }\r\n                \r\n                public static String useProperGrammar(String theText)\r\n                {\r\n                    String replaced = \"\";\r\n                    int correctCount = 0;\r\n                    for(int i = 0; i < theText.length(); i++) {\r\n                        if(theText.charAt(i) == '2') {\r\n                            replaced += \"to\";\r\n                            correctCount++;\r\n                        } else {\r\n                            replaced += \"\" + theText.charAt(i);\r\n                        }\r\n                    }\r\n                    \r\n                    System.out.println(\"Fixed \" + correctCount + \" grammatical errors:\");\r\n                    \r\n                    return replaced;\r\n                }\r\n            }","address":"/codehs/java/4/3/fixing-grammar.html"},{"title":"4.3.7 Password Checker","text":"4.3.7 Password Checkerimport java.util.Scanner;\r\n\r\n            public class Password\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner sc = new Scanner(System.in);\r\n                    String pw = sc.nextLine();\r\n                    System.out.println(passwordCheck(pw));\r\n                }\r\n                \r\n                public static boolean passwordCheck(String password)\r\n                {\r\n                    return password.length() > 7 && password.matches(\"^[0-9A-z]+$\");\r\n                }\r\n            }","address":"/codehs/java/4/3/password-checker.html"},{"title":"4.3.6 Replace Letter","text":"4.3.6 Replace Letterimport java.util.Scanner;\r\n            public class Letter\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Ask the user for 3 things: their word, letter they want to replace,\r\n                    // and replacing letter.\r\n                    \r\n                    // Call the method replaceLetter and pass all 3 of these items to it for \r\n                    // string processing.\r\n                    Scanner s = new Scanner(System.in);\r\n                    \r\n                    String word = s.nextLine(),\r\n                        letter = s.nextLine(),\r\n                        replacing = s.nextLine();\r\n                        \r\n                        System.out.println(replaceLetter(word, letter, replacing));\r\n                }\r\n                \r\n                // Modify this method so that it will take a third parameter from a user that is the String they want to\r\n                //to replace letterToReplace with. This method should return the modified String.\r\n                public static String replaceLetter(String word, String letterToReplace, String letterToInsert)\r\n                {\r\n                    String replaced = \"\";\r\n                    for(int i = 0; i < word.length(); i++)\r\n                    {\r\n                        String letter = word.substring(i, i+1);\r\n                        if(letter.equals(letterToReplace))\r\n                        {\r\n                            replaced += letterToInsert;\r\n                        } else {\r\n                            replaced += letter;\r\n                        }\r\n                    }\r\n                    return replaced;\r\n                }\r\n            }","address":"/codehs/java/4/3/replace-letter.html"},{"title":"4.3.10 Teen Talk","text":"4.3.10 Teen Talkimport java.util.Scanner;\r\n            public class TeenTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner sc = new Scanner(System.in);\r\n                    // Create a new Teen object and print it out; see the Teen class file\r\n                    // to see how the constructor and toString method work.\r\n                    Teen myFriend = new Teen(\"Sonequa\", \"Martin-Green\", 10, true);\r\n                    System.out.println(myFriend.toString());\r\n                    \r\n                    // Ask the user to input a text message\r\n                    System.out.println(\"Enter the text message being sent: \");\r\n                    //Call teenTalk method to translate the message to teen talk\r\n                    System.out.println(myFriend.teenTalk(sc.nextLine()));\r\n                }\r\n            }public class Teen \r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int grade;\r\n    private Boolean textMessages;\r\n\r\n    // Constructor to make a teen with a first and last name, grade in school, \r\n    // and whether they text message others and need to write texts to others. \r\n    \r\n    // This defines the state of the teen.\r\n    public Teen(String theFirstName, String theLastName, int theGrade, Boolean theTextMessages)\r\n    {\r\n        firstName = theFirstName;\r\n        lastName = theLastName;\r\n        grade = theGrade;\r\n        textMessages = theTextMessages;\r\n    }\r\n    \r\n    // toString method to print out the state of teen object\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade \" + grade + \" and wants to send this text:\";\r\n    }\r\n    \r\n    // Create this method so that it changes the text message \r\n    // and places the word \"like\" in place of each space \r\n    // in the message.\r\n    public String teenTalk(String text)\r\n    {\r\n        String re = \"\";\r\n        for(int i = 0; i < text.length(); i++) {\r\n            if(text.charAt(i) == ' ') re += \" like \";\r\n            else re += text.charAt(i);\r\n        }\r\n        \r\n        return re;\r\n    }\r\n    \r\n}","address":"/codehs/java/4/3/teen-talk.html"},{"title":"4.4.7 Make a Tree","text":"4.4.7 Make a Treepublic class TreeOfStars\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   // Call makeATree \r\n                   makeATree();\r\n                }\r\n                public static void makeATree()\r\n                {\r\n                   int levels = 9;\r\n                   int widthMost = levels * 2 + 1;\r\n                   for(int i = 0; i < levels; i++) {\r\n                       int padding = widthMost/2 - i;\r\n                       for(int j = 0; j < padding; j++) System.out.print(\" \");\r\n                       for(int k = 0; k <= i; k++) System.out.print(\" *\");\r\n                       System.out.print(\" \");\r\n                       System.out.println();\r\n                   }\r\n                }\r\n            }","address":"/codehs/java/4/4/make-a-tree.html"},{"title":"4.4.8 Multiplication Table","text":"4.4.8 Multiplication Tablepublic class MultiplicationTable\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Call makeMultiplicationTable \r\n                   makeMultiplicationTable();\r\n                }\r\n                \r\n                // Makes a multiplcation table\r\n                public static void makeMultiplicationTable()\r\n                {\r\n                    for(int i = 1; i <= 10; i++) {\r\n                        for(int j = 1; j <= 10; j++) System.out.print(i*j + \"\\t\");\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/4/multiplication-table.html"},{"title":"4.4.6 Upright Number Triangle","text":"4.4.6 Upright Number Trianglepublic class NumberTriangle\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                   // Call makeNumberTriangle \r\n                   makeNumberTriangle();\r\n                }\r\n                \r\n                // Makes an upright triangle with the numbers 1-5\r\n                public static void makeNumberTriangle()\r\n                {\r\n                    for(int i = 1; i <= 5; i++) {\r\n                        for(int j = 1; j <= i; j++) System.out.print(j + \" \");\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/4/4/upright-number-triangle.html"},{"title":"4.5.7 Improving isChar Speed","text":"4.5.7 Improving isChar Speedpublic class findCharTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Start here!\r\n                    String word = \"This is a sentence\";\r\n                    String key = \"a\";\r\n                    System.out.println(\"The character \"+ key+ \" is in the String \"+ word + \": \" + findChar(word, key));\r\n                }\r\n                \r\n                public static boolean findChar(String string, String key)\r\n                {\r\n                    //faster because it only calls 1 method, as opposed to looping through the whole string\r\n                    return string.indexOf(key) != -1;\r\n                }\r\n            }","address":"/codehs/java/4/5/improving-ischar-speed.html"},{"title":"5.1.4 Access for DNA Class","text":"5.1.4 Access for DNA Classpublic class DNA\r\n            {\r\n                private String rsid;\r\n                private String genotype;\r\n                \r\n                public DNA(String r, String g) {\r\n                    this.rsid = r;\r\n                    this.genotype = g;\r\n                }\r\n            }","address":"/codehs/java/5/1/access-for-dna-class.html"},{"title":"5.1.5 Access for Employee Class","text":"5.1.5 Access for Employee Classpublic class Employee\r\n            {\r\n                private String name;\r\n                private int id;\r\n                private double salary;\r\n                \r\n                \r\n                public Employee(String _name, int _id, double _salary) {\r\n                    this.name = _name;\r\n                    this.id = (short)_id;\r\n                    this.salary = _salary;\r\n                }\r\n            }","address":"/codehs/java/5/1/access-for-employee-class.html"},{"title":"5.1.6 Fixing Circle","text":"5.1.6 Fixing Circlepublic class CircleTester {\r\n\r\n                public static void main(String[] args) {\r\n            \r\n                    Circle circ = new Circle(10);\r\n            \r\n                    circ.setRadius(5);\r\n                    \r\n                    System.out.println(circ);\r\n            \r\n                    System.out.println(\"The diameter is \" + circ.getDiameter());\r\n                    System.out.println(\"The perimeter is \" + circ.getPerimeter());\r\n            \r\n                }\r\n            \r\n            }public class Circle {\r\n\r\n                private double radius;\r\n            \r\n                public Circle(double myRadius) {\r\n                    radius = myRadius;\r\n                }\r\n            \r\n                public void setRadius(int myRadius){\r\n                    radius = myRadius;\r\n                }\r\n            \r\n                public double getDiameter() {\r\n                    return radius*2;\r\n                }\r\n            \r\n                public double getRadius() {\r\n                    return radius;\r\n                }\r\n            \r\n                public double getPerimeter() {\r\n                    return Math.PI*getDiameter();\r\n                }\r\n            \r\n                public String toString() {\r\n                    return \"Circle with a radius of \" + radius;\r\n                }\r\n            }","address":"/codehs/java/5/1/fixing-circle.html"},{"title":"5.2.5 Batting Average","text":"5.2.5 Batting Averagepublic class BaseballTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    BaseballPlayer babeRuth = new BaseballPlayer(\"Babe Ruth\", 2873, 8399);\r\n                    System.out.println(babeRuth);\r\n                    \r\n                    // Call the function printBattingAverage here\r\n                    babeRuth.printBattingAverage();\r\n                    \r\n                }\r\n            }public class BaseballPlayer\r\n{\r\n    private int hits;\r\n    private int atBats;\r\n    private String name;\r\n    \r\n    //Add constructor here\r\n    public BaseballPlayer(String n, int h, int aB) {\r\n        this.name = n;\r\n        this.hits = h;\r\n        this.atBats = aB;\r\n    }\r\n    \r\n    public void printBattingAverage()\r\n    {\r\n        double battingAverage = hits / (double) atBats;\r\n        System.out.println(battingAverage);\r\n    }\r\n    \r\n    public String toString()\r\n    {\r\n        return name + \": \" + hits + \"/\" + atBats;\r\n    }\r\n    \r\n    \r\n}","address":"/codehs/java/5/2/batting-average.html"},{"title":"5.2.6 Dog Class","text":"5.2.6 Dog Classpublic class Dog\r\n{\r\n    private String name;\r\n    private int age;\r\n    private double weight;\r\n\r\n    // Add your constructors here\r\n    public Dog(String name, int age, double weight) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.weight = weight;\r\n    }\r\n    \r\n    public Dog(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.weight = 0.0;\r\n    }\r\n\r\n    public String toString(){\r\n        return \"Name: \" + name + \"\\nWeight: \" + weight +  \"\\nAge: \" + age;\r\n    }\r\n}public class DogTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Start here!\r\n                    System.out.println(new Dog(\"Dog\", 3, 2.0));\r\n                    System.out.println(new Dog(\"Dog\", 3));\r\n                }\r\n            }","address":"/codehs/java/5/2/dog-class.html"},{"title":"5.2.8 SchoolClub Class","text":"5.2.8 SchoolClub Classpublic class Student\r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private String school;\r\n\r\n    /**\r\n     * Constructors go here.\r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor. Make sure your code matches the call in the\r\n     * tester.\r\n     */\r\n     \r\n     public Student(String fN, String lN, int grd, String schl) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = schl;\r\n     }\r\n     \r\n     public Student(String fN, String lN, int grd) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = grd >= 9 ? \"high school\" : grd >= 6 ? \"middle school\" : \"elementary school\";\r\n     }\r\n   \r\n   \r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     * \r\n     * Modify the to string to add 'and goes to _____' at the end\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade \" + gradeLevel + \" and goes to \" + school;\r\n    }\r\n    \r\n    public String getFirstName(){\r\n        return firstName;\r\n    }\r\n}public class StudentTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11, \"Liberty High School\");\r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 5);\r\n                    \r\n                    System.out.println(alan);\r\n                    System.out.println(ada);\r\n                    \r\n                    System.out.println(new SchoolClub(alan, \"dnd club\"));\r\n                    \r\n                }\r\n            }public class SchoolClub\r\n            {\r\n            \r\n                private Student leader;\r\n                private String name;\r\n                private int numMembers;\r\n            \r\n                /* Add your constructor here\r\n                 * Constructor should take a leader and club name, then set\r\n                 * numMembers to 0.\r\n                 */\r\n                 \r\n                public SchoolClub(Student ldr, String n) {\r\n                    this.leader = ldr;\r\n                    this.name = n;\r\n                    this.numMembers = 0;\r\n                }\r\n            \r\n                public void addMember() {\r\n                    numMembers ++;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return leader.getFirstName() + \" is the leader of the \" + name + \" club.\";\r\n                }\r\n            }","address":"/codehs/java/5/2/schoolclub-class.html"},{"title":"5.2.7 Student Overload","text":"5.2.7 Student Overloadpublic class StudentTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11, \"Liberty High School\");\r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 5);\r\n                    \r\n                    System.out.println(alan);\r\n                    System.out.println(ada);\r\n                    \r\n                }\r\n            }public class Student\r\n{\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private String school;\r\n\r\n    /**\r\n     * Constructors go here.\r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor. Make sure your code matches the call in the\r\n     * tester.\r\n     */\r\n     \r\n     public Student(String fN, String lN, int grd, String schl) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = schl;\r\n     }\r\n     \r\n     public Student(String fN, String lN, int grd) {\r\n         this.firstName = fN;\r\n         this.lastName = lN;\r\n         this.gradeLevel = grd;\r\n         this.school = grd >= 9 ? \"high school\" : grd >= 6 ? \"middle school\" : \"elementary school\";\r\n     }\r\n   \r\n   \r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     * \r\n     * Modify the to string to add 'and goes to _____' at the end\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade \" + gradeLevel + \" and goes to \" + school;\r\n    }\r\n    \r\n    public String getFirstName(){\r\n        return firstName;\r\n    }\r\n}","address":"/codehs/java/5/2/student-overload.html"},{"title":"5.3.8 C.Y.O.A. Finishing the story","text":"5.3.8 C.Y.O.A. Finishing the storyimport java.util.Scanner;\r\n\r\n            public class CYOA\r\n            {\r\n                private static Scanner input;\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    input = new Scanner(System.in);\r\n                    \r\n                    System.out.println(\"Intro\");\r\n                    \r\n                    System.out.println(\"Question 1. Option [A] or [B]?\");\r\n                    if(input.nextLine().equals(\"A\")) {\r\n                        //option A\r\n                            System.out.println(\"Question 2. Option [X] or [Y]?\");\r\n                            if(input.nextLine().equals(\"X\")) {\r\n                                //Option X\r\n                            } else {\r\n                                //Option Y\r\n                            }\r\n                    } else {\r\n                        //option B\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/5/3/c-y-o-a-finishing-the-story.html"},{"title":"5.3.7 C.Y.O.A. Layout","text":"5.3.7 C.Y.O.A. LayoutJSYK\r\n                This one, despite being marked as Java code, is not Java-- it's just comments. I don't have answers for you, sorry. The code part is 5.3.8; there are answers on that one./**/","address":"/codehs/java/5/3/c-y-o-a-layout.html"},{"title":"5.3.6 Commenting Activity Log","text":"5.3.6 Commenting Activity Logpublic class ActivityTracker\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ActivityLog mylog = new ActivityLog();\r\n                    \r\n                    mylog.addMiles(5);\r\n                    mylog.addHours(1);\r\n                    \r\n                    System.out.print(\"Total Miles: \");\r\n                    System.out.println(mylog.getMiles());\r\n                    \r\n                    double hoursToday = mylog.getHours();\r\n                    \r\n                    mylog.addHours(1.5);\r\n                    mylog.addHours(3);\r\n                    \r\n                    double increase = mylog.getHours() - hoursToday;\r\n                    \r\n                    System.out.print(\"There are \");\r\n                    System.out.print(increase);\r\n                    System.out.println(\" more hours today than two days ago\");\r\n                }\r\n            }public class ActivityLog\r\n            {\r\n                private double numHours;\r\n                private double numMiles;\r\n                \r\n                public ActivityLog()\r\n                {\r\n                    numHours = 0;\r\n                    numMiles = 0;\r\n                }\r\n                \r\n                /**\r\n                 * Increase hours in log by given amount\r\n                 * @param hours the amount of hours to add\r\n                */ \r\n                public void addHours(double hours)\r\n                {\r\n                    numHours += hours;\r\n                }\r\n                \r\n                /**\r\n                 * Increase miles in log by given amount\r\n                 * @param miles the amount of miles to add\r\n                */ \r\n                public void addMiles(double miles)\r\n                {\r\n                    numMiles += miles;\r\n                }\r\n                \r\n                /**\r\n                 * Get amount of miles accumulated \r\n                 * @return Accumulated miles\r\n                */ \r\n                public double getMiles()\r\n                {\r\n                    return numMiles;\r\n                }\r\n                \r\n                /**\r\n                 * Get amount of hours accumulated \r\n                 * @return Accumulated hours\r\n                */ \r\n                public double getHours() \r\n                {\r\n                    return numHours;\r\n                }\r\n                \r\n            }","address":"/codehs/java/5/3/commenting-activity-log.html"},{"title":"5.3.5 Commenting Activity Tracker","text":"5.3.5 Commenting Activity Trackerpublic class ActivityLog\r\n            {\r\n                private double numHours;\r\n                private double numMiles;\r\n                \r\n                public ActivityLog()\r\n                {\r\n                    numHours = 0;\r\n                    numMiles = 0;\r\n                }\r\n                \r\n                public void addHours(double hours)\r\n                {\r\n                    numHours += hours;\r\n                }\r\n                \r\n                public void addMiles(double miles)\r\n                {\r\n                    numMiles += miles;\r\n                }\r\n                \r\n                public double getMiles()\r\n                {\r\n                    return numMiles;\r\n                }\r\n                \r\n                public double getHours() \r\n                {\r\n                    return numHours;\r\n                }\r\n                \r\n            }public class ActivityTracker\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ActivityLog mylog = new ActivityLog();\r\n        \r\n        //log miles\r\n        mylog.addMiles(5);\r\n        mylog.addHours(1);\r\n        \r\n        //print user's mile count\r\n        System.out.print(\"Total Miles: \");\r\n        //print on a separate line\r\n        System.out.println(mylog.getMiles());\r\n        \r\n        //get initial hours from log\r\n        double hoursToday = mylog.getHours();\r\n        \r\n        //log some hours\r\n        mylog.addHours(1.5);\r\n        mylog.addHours(3);\r\n        \r\n        //get change-- `final - initial`\r\n        double increase = mylog.getHours() - hoursToday;\r\n        \r\n        //print increase; use `.print()` instead of string concatanation\r\n        System.out.print(\"There are \");\r\n        System.out.print(increase);\r\n        System.out.println(\" more hours today than two days ago\");\r\n    }\r\n}","address":"/codehs/java/5/3/commenting-activity-tracker.html"},{"title":"5.4.7 A Different Dragon Class","text":"5.4.7 A Different Dragon ClassTip You don't have to fill DragonTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class DragonTester\r\n    {\r\n        public static void main(String[] args)\r\n        {\r\n            // Start here!\r\n        }\r\n    }public class Dragon \r\n    {\r\n        private String name;\r\n        private int level;\r\n        private boolean canBreatheFire;\r\n        \r\n        public Dragon(String _name, int _level) {\r\n            this.level = _level;\r\n            this.name = _name;\r\n            this.canBreatheFire = level >= 70;\r\n        }\r\n        \r\n        public String getName() {\r\n            return this.name;\r\n        }\r\n        \r\n        public int getLevel() {\r\n            return this.level;\r\n        }\r\n        \r\n        public boolean isFireBreather() {\r\n            return this.canBreatheFire;\r\n        }\r\n        \r\n        public void attack() {\r\n            System.out.println(canBreatheFire ? \">>>>>>>>>>\\n>>>>>>>>>>>>>>\\n>>>>>>>>>>>>>>\\n>>>>>>>>>>\" : \"~ ~ ~\");\r\n        }\r\n        \r\n        public void gainExperience() {\r\n            this.canBreatheFire = (level+=10) >= 70;\r\n        }\r\n        \r\n    \r\n        // String representation of the object\r\n        public String toString()\r\n        {\r\n            return \"Dragon is at level \" + level + \" and is named \" + name;\r\n        }\r\n    }","address":"/codehs/java/5/4/a-different-dragon-class.html"},{"title":"5.4.6 Full Dragon Class","text":"5.4.6 Full Dragon ClassTip You don't have to fill DragonTester.java; the autograder doesn't care about it.\r\n            You'll get a Completed mark either way.public class DragonTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Dragon here to test out the Dragon class!\r\n                }\r\n            }public class Dragon \r\n{\r\n    private String attack;\r\n    private int level;\r\n    \r\n    public Dragon(int _level, String _attack) {\r\n        this.level = _level;\r\n        this.attack = _attack;\r\n    }\r\n    \r\n    public String getAttack() {\r\n        return this.attack;\r\n    }\r\n    \r\n    public int getLevel() {\r\n        return this.level;\r\n    }\r\n    \r\n    public String fight() {\r\n        String r = \"\";\r\n        for(int i = 0; i < level; i++) {\r\n            r += attack;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n\r\n    // String representation of the object\r\n    public String toString()\r\n    {\r\n        return \"Dragon is at level \" + level + \" and attacks with \" + attack;\r\n    }\r\n}","address":"/codehs/java/5/4/full-dragon-class.html"},{"title":"5.4.5 Text Messages Getter Methods","text":"5.4.5 Text Messages Getter MethodsTip You don't have to fill Messages.java; the autograder doesn't care about it.\r\n            You'll get a Completed mark either way.public class Messages\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Your code here.\r\n        // Create two TextMessage objects and print them out.\r\n    }\r\n}public class TextMessage\r\n            {\r\n                private String message;\r\n                private String sender;\r\n                private String receiver;\r\n                \r\n                public TextMessage(String from, String to, String theMessage)\r\n                {\r\n                    sender = from;\r\n                    receiver = to;\r\n                    message = theMessage;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return sender + \" texted \" + receiver + \": \" + message;\r\n                }\r\n            \r\n                public String getMessage() {\r\n                    return this.message;\r\n                }\r\n            \r\n                public String getSender() {\r\n                    return this.sender;\r\n                }\r\n            \r\n                public String getReceiver() {\r\n                    return this.receiver;\r\n                }\r\n            }","address":"/codehs/java/5/4/text-messages-getter-methods.html"},{"title":"5.5.6 Full Fraction Class","text":"5.5.6 Full Fraction ClassTip You don't have to fill FractionTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class FractionTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Implement the Fraction class in Fraction.java\r\n        \r\n        // Then add code here to test out your Fraction class!\r\n    }\r\n}public class Fraction\r\n            {\r\n                public int numerator;\r\n                public int denominator;\r\n                \r\n                public Fraction(int n, int d) {\r\n                    this.numerator = n;\r\n                    this.denominator = d;\r\n                }\r\n                \r\n                \r\n                public int getNumerator() {\r\n                    return this.numerator;\r\n                }\r\n                \r\n                public int getDenominator() {\r\n                    return this.denominator;\r\n                }\r\n                \r\n                public void setNumerator(int x) {\r\n                    this.numerator = x;\r\n                }\r\n                \r\n                \r\n                public void setDenominator(int x) {\r\n                    this.denominator = x;\r\n                }\r\n                \r\n                public void add(Fraction other) {\r\n                    this.numerator = this.numerator * other.getDenominator() + other.getNumerator() * this.denominator;\r\n                    this.denominator *= other.getDenominator();\r\n                }\r\n                \r\n                public void subtract(Fraction other) {\r\n                    this.numerator = this.numerator * other.getDenominator() - other.getNumerator() * this.denominator;\r\n                    this.denominator *= other.getDenominator();\r\n                }\r\n                \r\n                public void multiply(Fraction other) {\r\n                    this.numerator *= other.getNumerator();\r\n                    this.denominator *= other.getDenominator();\r\n                }\r\n                \r\n                public String toString() {\r\n                    return this.numerator + \" / \" + this.denominator;\r\n                }\r\n            }","address":"/codehs/java/5/5/full-fraction-class.html"},{"title":"5.5.5 Rectangle class","text":"5.5.5 Rectangle classTip You don't have to fill RectangleTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class RectangleTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        // Make some objects and print out their\r\n        // areas and perimeters\r\n    }\r\n}public class Rectangle\r\n            {\r\n                private int width;\r\n                private int height;\r\n                \r\n                /**\r\n                 * This is the constructor to create a Rectangle.\r\n                 * To create a Rectangle we need to know its width\r\n                 * and height.\r\n                 */\r\n                public Rectangle(int rectWidth, int rectHeight)\r\n                {\r\n                    width = rectWidth;\r\n                    height = rectHeight;\r\n                }\r\n                \r\n            \r\n                public int getHeight() { return this.height; }\r\n                public int getWidth() { return this.width; }\r\n                public int getArea() { return this.height * this.width; }\r\n                public int getPerimeter() { return this.height * 2 + this.width * 2; }\r\n                \r\n                public void setWidth(int w) { this.width = w; }\r\n                public void setHeight(int h) { this.height = h; }\r\n            \r\n            \r\n                /**\r\n                 * This method computes and prints the\r\n                 * area of the Rectangle.\r\n                 * Note it will print the area of the\r\n                 * Rectangle object that called it using\r\n                 * the dot operator!\r\n                 */ \r\n                public void printArea()\r\n                {\r\n                    int area = width * height;\r\n                    System.out.println(area);\r\n                }\r\n                \r\n                /**\r\n                 * This method computes and prints the\r\n                 * perimeter of the Rectangle.\r\n                 */ \r\n                public void printPerimeter()\r\n                {\r\n                    int perimeter = 2 * width + 2 * height;\r\n                    System.out.println(perimeter);\r\n                }\r\n                \r\n                /**\r\n                 * This is the toString method. It returns a String\r\n                 * representation of the object. \r\n                 */\r\n                public String toString()\r\n                {\r\n                    return \"Rectangle width: \" + width + \", Rectangle height: \" + height;\r\n                }\r\n            }","address":"/codehs/java/5/5/rectangle-class.html"},{"title":"5.5.7 Weekly Routine","text":"5.5.7 Weekly RoutineTip You don't have to fill RoutineTester.java; the autograder doesn't care about it.\r\n    You'll get a Completed mark either way.public class RoutineTester\r\n{\r\n    public static void main(String[] args) \r\n    {\r\n        Routine myWeek = new Routine();\r\n        \r\n        myWeek.setSchool(8);\r\n        myWeek.setSports(3);\r\n        myWeek.setSleep(8);\r\n        myWeek.setFun(2);\r\n        \r\n        // Prints the totals for the WHOLE WEEK\r\n        myWeek.printTotal();\r\n    }\r\n}public class Routine\r\n            {\r\n                private double sleep;\r\n                private double fun;\r\n                private double school;\r\n                private double sports;\r\n                \r\n                public Routine() {\r\n                    this.sleep = 0.0;\r\n                    this.fun = 0.0;\r\n                    this.school = 0.0;\r\n                    this.sports = 0.0;\r\n                }\r\n                \r\n                public void setSleep(double s) {\r\n                    this.sleep = s;\r\n                }\r\n                public void setFun(double s) {\r\n                    this.fun = s;\r\n                }\r\n                public void setSchool(double s) {\r\n                    this.school = s;\r\n                }\r\n                public void setSports(double s) {\r\n                    this.sports = s;\r\n                }\r\n                \r\n                public void printTotal() {\r\n                    System.out.println(\"Weekly Totals\");\r\n                    System.out.println(\"Sleep: \" + sleep*7);\r\n                    System.out.println(\"School: \" + school*7);\r\n                    System.out.println(\"Sports: \" + sports*7);\r\n                    System.out.println(\"Fun: \" + fun*7);\r\n                    System.out.println(\"Grand Total: \" + (sleep*7 + school*7 + sports*7 + fun*7 ));\r\n                    System.out.println(\"Hours left over: \" + (24*7-(sleep*7 + school*7 + sports*7 + fun*7 )) );\r\n            \r\n                }\r\n            }","address":"/codehs/java/5/5/weekly-routine.html"},{"title":"5.6.7 Car Class","text":"5.6.7 Car Classpublic class CarTester {\r\n\r\n                public static void main(String[] args) {\r\n                    //Create a car that gets 20 mpg and has a 15 gallon tank\r\n                    Car minivan = new Car(20.0, 15.0);\r\n                    //Fill up the gas tank\r\n                    minivan.addGas();\r\n                    //Check the miles available\r\n                    System.out.println(\"Miles available: \" + minivan.milesAvailable());\r\n                    //Drive 100 miles\r\n                    minivan.drive(100.0);\r\n                    //Check the miles available\r\n                    System.out.println(\"Miles available: \" + minivan.milesAvailable());\r\n                    //Add 2 gallons to the gas tank\r\n                    minivan.addGas(2.0);\r\n                    //Check the miles available\r\n                    System.out.println(\"Miles available: \" + minivan.milesAvailable());\r\n                    //Try driving more miles than available by driving 1000 miles\r\n                    minivan.drive(1000.0);\r\n                    //Drive 200 miles\r\n                    minivan.drive(200.0);\r\n                    //Check how much gas you have left\r\n                    System.out.println(\"Gas remaining: \" + minivan.getGas());\r\n                    //Print total miles driven\r\n                    System.out.println(\"Total Miles Driven: \" + minivan.getTotalMilesDriven());\r\n                }\r\n            }public class Car {\r\n                private double efficiency; // this is miles per gallon\r\n                private double gas;\r\n                private double tankCapacity;\r\n                private double totalMilesDriven;\r\n                \r\n                public Car(double carEfficiency, double carTankCapacity) {\r\n                    this.efficiency = carEfficiency;\r\n                    this.tankCapacity = carTankCapacity;\r\n                    \r\n                    this.gas = 0;\r\n                    this.totalMilesDriven = 0;\r\n                }\r\n                \r\n                public void addGas() {\r\n                    System.out.println(\"Filling up ...\");\r\n                    this.gas = tankCapacity;\r\n                }\r\n                public void addGas(double amount) {\r\n                    System.out.println(\"Adding gas ...\");\r\n                    \r\n                    //you could also use `this.gas = Math.min(gas + amount, tankCapacity)`\r\n                    this.gas += amount;\r\n                    if(this.gas > this.tankCapacity) this.gas = this.tankCapacity;\r\n                }\r\n                \r\n                public double getTotalMilesDriven() {\r\n                    return this.totalMilesDriven;\r\n                }\r\n                public void drive(double distance) {\r\n                    if(canDrive(distance)) {\r\n                        System.out.println(\"Driving \" + distance);\r\n                        totalMilesDriven += distance;\r\n                        gas -= distance / efficiency;\r\n                    } else {\r\n                        System.out.println(\"Can't drive \" + distance + \". That's too far!\");\r\n                    }\r\n                }\r\n                public boolean canDrive(double distance) {\r\n                    return gas >= distance / efficiency;\r\n                }\r\n                public double milesAvailable() {\r\n                    return efficiency * gas;\r\n                }\r\n                public double getGas() {\r\n                    return gas;\r\n                }\r\n            }","address":"/codehs/java/5/6/car-class.html"},{"title":"5.6.5 Distance Conversions","text":"5.6.5 Distance Conversionspublic class DistanceTester\r\n            {\r\n                public static void main(String[] args)   \r\n                {\r\n                    Distance milesFromSchool = new Distance(5.0);\r\n                    Distance milesFromPark = new Distance(10.0);\r\n                    Distance milesFromFriend = new Distance(12.0);\r\n                    \r\n                    System.out.println(milesFromSchool.toYards());\r\n                    System.out.println(milesFromPark.toKilometers());\r\n                    System.out.println(milesFromFriend.toFeet());\r\n                }\r\n            }public class Distance\r\n{\r\n    private double miles;\r\n    \r\n    public Distance(double startMiles) {\r\n        this.miles = startMiles;\r\n    }\r\n    \r\n    public double toKilometers() {\r\n        return miles / 0.62137;\r\n    }\r\n    \r\n    public double toYards() {\r\n        return miles * 1760;\r\n    }\r\n    \r\n    public double toFeet() {\r\n        return miles * 5280;\r\n    }\r\n    \r\n    public double getMiles() {\r\n        return miles;\r\n    }\r\n}","address":"/codehs/java/5/6/distance-conversions.html"},{"title":"5.6.6 Food App Demo","text":"5.6.6 Food App Demoimport java.util.Scanner;\r\n\r\n            public class FoodRunner\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    Food burger = new Food(\"Hamburgers\", 600);\r\n                    Food fries = new Food(\"Fries\", 350);\r\n                    Food coke = new Food(\"Coke\", 200);\r\n                    \r\n                    System.out.println(burger);\r\n                    System.out.println(\"How many would you like?\");\r\n                    int burgerCount = input.nextInt();\r\n                    \r\n                    System.out.println(fries);\r\n                    System.out.println(\"How many would you like?\");\r\n                    int friesCount = input.nextInt();\r\n                    \r\n                    System.out.println(coke);\r\n                    System.out.println(\"How many would you like?\");\r\n                    int cokeCount = input.nextInt();\r\n                    \r\n                    System.out.println(\"Your meal will have a total of \"   + ( \r\n                            burger.getCalories() * burgerCount +\r\n                            fries .getCalories() * friesCount  +\r\n                            coke  .getCalories() * cokeCount\r\n                        )\r\n                        + \" calories\");\r\n                }\r\n            }public class Food\r\n{\r\n        private String name;\r\n        private int calories;\r\n        \r\n        \r\n        public Food(String name, int calories) {\r\n            this.name = name;\r\n            this.calories = calories;\r\n        }\r\n        \r\n        \r\n        public int getCalories() {\r\n            return this.calories;\r\n        }\r\n        \r\n        public void setCalories(int calories) {\r\n            this.calories = calories;\r\n        }\r\n        \r\n        \r\n        \r\n        public String getName() {\r\n            return this.name;\r\n        }\r\n        \r\n        public void setName(String name) {\r\n            this.name = name;\r\n        }\r\n        \r\n        \r\n        public String toString() {\r\n            return name + \" have \" + calories + \" calories.\";\r\n        }\r\n    \r\n}","address":"/codehs/java/5/6/food-app-demo.html"},{"title":"5.6.8 Open Response: Combination Lock FRQ","text":"5.6.8 Open Response: Combination Lock FRQpublic class CombinationLock {\r\n                private String password;\r\n                \r\n                public CombinationLock(String password) {\r\n                    this.password = password;\r\n                }\r\n                \r\n                public String getClue(String guess) {\r\n                    //this clue will be built in the `for` loop later\r\n                    String clue = \"\";\r\n                    //passwords & guesses are always 4 letters\r\n                    for(int i = 0; i < 4; i++) {\r\n                        //iterate through; for each letter, determine the clue character & build on the clue\r\n                        char guessLetter = guess.charAt(i);\r\n                        //if the guess was correct for this char, it's the character itself\r\n                        if(guessLetter == password.charAt(i)) clue += guessLetter;\r\n                        //if the guess is correct, but in the wrong spot, it's '+'\r\n                        else if(password.indexOf(guessLetter) > -1) clue += \"+\";\r\n                        //if it's just totally incorrect and you should be ashamed, add \"*\"\r\n                        else clue += \"*\";\r\n                    }\r\n                    return clue;\r\n                }\r\n            }","address":"/codehs/java/5/6/open-response-combination-lock-frq.html"},{"title":"5.7.7 How Many Players in the Game?","text":"5.7.7 How Many Players in the Game?JSYK\r\n            You don't have to fill in PlayerTester at all; the auto-grader doesn't care about it. You'll be approved either way!public class PlayerTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Test out the Player class here!\r\n                }\r\n            }public class Player \r\n            {\r\n                // Static Variables\r\n                // ...\r\n                public static int totalPlayers = 0;\r\n                public static int maxPlayers = 10;\r\n                \r\n                // Public Methods\r\n                public Player() \r\n                {\r\n                    totalPlayers++;\r\n                }\r\n                \r\n                public static boolean gameFull() {\r\n                    return totalPlayers >= maxPlayers;\r\n                }\r\n            }","address":"/codehs/java/5/7/how-many-players-in-the-game.html"},{"title":"5.7.5 Randomizer Class","text":"5.7.5 Randomizer Classpublic class RandomizerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n    \r\n        System.out.println(\"Results of Randomizer.nextInt()\");\r\n        for(int i = 0; i < 10; i++)\r\n        {\r\n            System.out.println(Randomizer.nextInt());\r\n        }\r\n       \r\n        //Initialize min and max for Randomizer.nextInt(min,max)\r\n        int min = 5;\r\n        int max = 10;\r\n        System.out.println(\"\\nResults of Randomizer.nextInt(5,10)\");\r\n        for(int i = 0; i < 10; i++)\r\n        {\r\n            System.out.println(Randomizer.nextInt(min ,max));\r\n        }\r\n        \r\n    }\r\n}public class Randomizer\r\n            {\r\n                public static int nextInt()\r\n                {\r\n                    //Implement this method to return a random number from 1-10\r\n                    return (int) (Math.random() * 10) + 1;\r\n                }\r\n                \r\n                public static int nextInt(int min, int max)\r\n                {\r\n                    return (int) (Math.random() * (max - min + 1)) + min;\r\n                }\r\n            }","address":"/codehs/java/5/7/randomizer-class.html"},{"title":"5.7.6 Rock, Paper, Scissors!","text":"5.7.6 Rock, Paper, Scissors!JSYK The autograder for this assignment appears to be written incorrectly, causing NoSuchElementExceptions to occur. You may see some code below that you don't recognize. That's okay! This is a solution that accounts for those grader errors.public class Randomizer\r\n{\r\n    public static int nextInt()\r\n    {\r\n        //Implement this method to return a random number from 1-10\r\n        return (int) (Math.random() * 10) + 1;\r\n    }\r\n    \r\n    public static int nextInt(int min, int max)\r\n    {\r\n        return (int) (Math.random() * (max - min + 1)) + min;\r\n    }\r\n}import java.util.Scanner;\r\n\r\n            public class RockPaperScissors\r\n            {\r\n                private static final String USER_PLAYER = \"User wins!\";\r\n                private static final String COMPUTER_PLAYER = \"Computer wins!\";\r\n                private static final String TIE = \"Tie\";\r\n                    \r\n                public static String getWinner(String user, String computer)\r\n                {\r\n                    if(user.equals(computer)) return TIE;\r\n                    else if(user.equals(\"rock\") && computer.equals(\"paper\")) return COMPUTER_PLAYER;\r\n                    else if(user.equals(\"paper\") && computer.equals(\"rock\")) return USER_PLAYER;\r\n                    \r\n                    else if(user.equals(\"scissors\") && computer.equals(\"rock\")) return COMPUTER_PLAYER;\r\n                    else if(user.equals(\"rock\") && computer.equals(\"scissors\")) return USER_PLAYER;\r\n                    \r\n                    else if(user.equals(\"paper\") && computer.equals(\"scissors\")) return COMPUTER_PLAYER;\r\n                    else if(user.equals(\"scissors\") && computer.equals(\"paper\")) return USER_PLAYER;\r\n                    \r\n                    //java doesn't like it if there isn't a return statement at the end\r\n                    return TIE;\r\n                }\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    Scanner input = new Scanner(System.in);\r\n                    \r\n                    while(true) {\r\n                        int computerChoice = Randomizer.nextInt(1, 3);\r\n                        String computer = \"\";\r\n\r\n                        if(computerChoice == 1) computer = \"paper\";\r\n                        else if(computerChoice == 2) computer = \"rock\";\r\n                        else computer = \"scissors\";\r\n                        \r\n                        System.out.println(\"Enter your choice (rock, paper, or scissors): \");\r\n                        String user = \"\";\r\n\r\n                        try {\r\n                            if(input.hasNextLine()) user = input.nextLine();\r\n                        } catch(Exception e) {}\r\n                        \r\n                        //exit condition when user enters nothing\r\n                        if(user.equals(\"\")) break;\r\n                        \r\n                        System.out.println(\"User: \" + user);\r\n                        System.out.println(\"Computer: (either rock, paper, or scissors)\");\r\n                        \r\n                        System.out.println(getWinner(user, computer));\r\n                    }\r\n                    System.out.println(\"Thanks for playing!\");\r\n                }\r\n            }","address":"/codehs/java/5/7/rock-paper-scissors.html"},{"title":"5.8.9 Broken Calculator","text":"5.8.9 Broken Calculatorpublic class CalculatorTester\r\n            {\r\n                public static void main(String[] args) {\r\n            \r\n                    System.out.println(\"Starting at 5\");\r\n                    Calculator myTi = new Calculator(5);\r\n            \r\n                    System.out.println(\"Adding 10 ...\");\r\n                    System.out.print(\"Should print 15: \");\r\n                    System.out.println(myTi.add(10));\r\n            \r\n                    System.out.println(\"Multiplying by 2 ...\");\r\n                    System.out.print(\"Should print 30: \");\r\n                    System.out.println(myTi.multiple(2));\r\n            \r\n                    System.out.println(\"Changing value to 20 ...\");\r\n                    myTi.setValue(20);\r\n                    System.out.print(\"Adding. Should print 50: \");\r\n                    System.out.println(myTi.add());\r\n            \r\n                }\r\n            }public class Calculator {\r\n\r\n                private int total;\r\n                private int value;\r\n            \r\n                public Calculator(int startingValue){\r\n                    total = startingValue;\r\n                    value = 0;\r\n                }\r\n            \r\n                public int add(int value){\r\n                    total += value;\r\n                    return total;\r\n                }\r\n            \r\n                /**\r\n                * Adds the instance variable value to the total\r\n                */\r\n                public int add(){\r\n                    total += value;\r\n                    return total;\r\n                }\r\n            \r\n                public int multiple(int value){\r\n                    total *= value;\r\n                    return total;\r\n                }\r\n            \r\n                public void setValue(int value){\r\n                    this.value = value;\r\n                }\r\n            \r\n                public int getValue(){\r\n                    return value;\r\n                }\r\n            \r\n            }","address":"/codehs/java/5/8/broken-calculator.html"},{"title":"5.8.7 Scope","text":"5.8.7 Scopepublic class ScopeTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Scope s = new Scope();\r\n                    s.printScope();\r\n                }\r\n            }public class Scope\r\n{\r\n    private int a;\r\n    private int b;\r\n    private int c;\r\n\r\n    public Scope(){\r\n        a = 5;\r\n        b = 10;\r\n        c = 15;\r\n    }\r\n\r\n    public void printScope(){\r\n        System.out.println(\"a = \" + getA());\r\n        System.out.println(\"b = \" + getB());\r\n        System.out.println(\"c = \" + getC());\r\n        System.out.println(\"d = \" + getD());\r\n        System.out.println(\"e = \" + getE());\r\n\r\n    }\r\n\r\n\tpublic int getA() {\r\n\t\treturn a;\r\n\t}\r\n\r\n\tpublic int getB() {\r\n\t\treturn b;\r\n\t}\r\n\r\n\tpublic int getC() {\r\n\t\treturn c;\r\n\t}\r\n\r\n    public int getD(){\r\n        int d = a + c;\r\n        return d;\r\n    }\r\n\r\n\tpublic int getE() {\r\n        int e = b + c;\r\n\t\treturn e;\r\n\t}\r\n}","address":"/codehs/java/5/8/scope.html"},{"title":"5.8.8 Which Variables Exist?","text":"5.8.8 Which Variables Exist?public class MathOperations\r\n            {\r\n                private static double PI = 3.14159;\r\n                \r\n                public static void main(String[] args)\r\n                {\r\n                    int sumResult = sum(5, 10);\r\n                    int differenceResult = difference(20, 2);\r\n                    double productResult = product(3.5, 2);\r\n                    double circumferenceResult = circleCircumference(10);\r\n                    double areaResult = circleArea(12);\r\n                }\r\n                \r\n                public static int sum(int one, int two)\r\n                {\r\n                    // Printing Variables Example\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"one: \" + one);\r\n                    System.out.println(\"two: \" + two);\r\n                    \r\n                    return one + two;\r\n                }\r\n                \r\n                public static int difference(int one, int two)\r\n                {\r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"one: \" + one);\r\n                    System.out.println(\"two: \" + two);\r\n                    \r\n                    return one - two;\r\n                }\r\n                \r\n                public static double product(double a, double b)\r\n                {\r\n                    double result = a * b;\r\n                    \r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"a: \" + a);\r\n                    System.out.println(\"b: \" + b);\r\n                    System.out.println(\"result: \" + result);\r\n                    \r\n                    return result;\r\n                }\r\n                \r\n                public static double circleCircumference(int radius)\r\n                {\r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"radius: \" + radius);\r\n                    \r\n                    return 2 * radius * PI;\r\n                }\r\n                \r\n                public static double circleArea(int radius)\r\n                {\r\n                    double area = PI * radius * radius;\r\n                    \r\n                    // PRINT OUT VARIABLES HERE\r\n                    System.out.println(\"PI: \" + PI);\r\n                    System.out.println(\"radius: \" + radius);\r\n                    System.out.println(\"area: \" + area);\r\n                    \r\n                    return area;\r\n                }\r\n            }","address":"/codehs/java/5/8/which-variables-exist.html"},{"title":"5.9.7 Fraction Math","text":"5.9.7 Fraction Mathpublic class FractionTester\r\n{\r\n    public static void main(String[] args) {\r\n        Fraction first = new Fraction(3, 4);\r\n\r\n        Fraction half = new Fraction(1, 2);\r\n\r\n        System.out.println(first);\r\n        System.out.print(\"Multiplying: \");\r\n        System.out.println(half);\r\n\r\n        first.multiplyFraction(half);\r\n\r\n        System.out.println(\"Answer: \" + first);\r\n\r\n        System.out.println();\r\n        System.out.print(\"Adding: \");\r\n        System.out.println(half);\r\n\r\n        first.addFraction(half);\r\n\r\n        System.out.println(\"Answer: \" + first);\r\n    }\r\n\r\n}public class FractionMath {\r\n    \r\n                /*\r\n                * This is a static class that the Fraction class will use.\r\n                * No updates are needed.\r\n                */\r\n                \r\n                public static Fraction add(Fraction frac1, Fraction frac2){\r\n                    int numerator = frac1.getNumerator() * frac2.getDenominator() +\r\n                                    frac2.getNumerator() * frac1.getDenominator();\r\n            \r\n                    int denominator = frac1.getDenominator() * frac2.getDenominator();\r\n            \r\n                    Fraction solution = new Fraction(numerator, denominator);\r\n                    return solution;\r\n                }\r\n            \r\n                public static Fraction multiply(Fraction frac1, Fraction frac2){\r\n                    int numerator = frac1.getNumerator() * frac2.getNumerator();\r\n                    int denominator = frac1.getDenominator() * frac2.getDenominator();\r\n                    Fraction solution = new Fraction(numerator, denominator);\r\n                    return solution;\r\n                }\r\n            }public class Fraction\r\n            {\r\n                private int numerator;\r\n                private int denominator;\r\n            \r\n                public Fraction(int numerator, int denominator){\r\n                  this.numerator = numerator;\r\n                  this.denominator = denominator;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of numerator\r\n                * @return numerator\r\n                */\r\n                public int getNumerator() {\r\n                    return this.numerator;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of numerator\r\n                * @param numerator new numerator value\r\n                */\r\n                public void setNumerator(int numerator) {\r\n                    this.numerator = numerator;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of denominator\r\n                * @return denominator\r\n                */\r\n                public int getDenominator() {\r\n                    return this.denominator;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of denominator\r\n                * @param denominator new denominator\r\n                */\r\n                public void setDenominator(int denominator) {\r\n                    this.denominator = denominator;\r\n                }\r\n            \r\n                /**\r\n                * Updates this fraction by adding another fraction\r\n                * @param other Fraction to add to existing fraction\r\n                */\r\n            \r\n                //Calculate by using the FractionMath class, then update\r\n                //the numerator and denominator from the returned Fraction\r\n                public void addFraction(Fraction other){\r\n                   Fraction res = FractionMath.add(this, other);\r\n                   this.setNumerator(res.getNumerator());\r\n                   this.setDenominator(res.getDenominator());\r\n                }\r\n            \r\n                /**\r\n                * Updates this fraction by multiplying another fraction\r\n                * @param other Fraction to multiple to existing fraction\r\n                */\r\n            \r\n                //Calculate by using the FractionMath class, then update\r\n                //the numerator and denominator from the returned Fraction\r\n                public void multiplyFraction(Fraction other){\r\n                   Fraction res = FractionMath.multiply(this, other);\r\n                   this.setNumerator(res.getNumerator());\r\n                   this.setDenominator(res.getDenominator());\r\n                }\r\n            \r\n                /**\r\n                * Prints fraction as numerator / denominator\r\n                * Example: 1 / 2\r\n                */\r\n            \r\n                public String toString(){\r\n                    return numerator + \" / \" + denominator;\r\n                }\r\n            }","address":"/codehs/java/5/9/fraction-math.html"},{"title":"5.9.6 Song Class","text":"5.9.6 Song Classpublic class SongTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Song s = new Song(\"C416\", \"Sweden\", 3, 32);\r\n        System.out.println(s.toString());\r\n        \r\n        s.setSeconds(35);\r\n        System.out.println(s.toString());\r\n        \r\n        s.setArtist(\"C418\");\r\n        System.out.println(s.toString());\r\n    }\r\n}public class Song\r\n            {\r\n                private String artist;\r\n                private String title;\r\n                private int minutes;\r\n                private int seconds;\r\n            \r\n                public Song(String artist, String title, int minutes, int seconds){\r\n                  this.artist = artist;\r\n                  this.title = title;\r\n                  this.minutes = minutes;\r\n                  this.seconds = seconds;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of artist\r\n                * @return artist\r\n                */\r\n                public String getArtist() {\r\n                    return this.artist;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of artist\r\n                * @param artist Updated artist\r\n                */\r\n                public void setArtist(String artist) {\r\n                    this.artist = artist;\r\n                }\r\n            \r\n                /**\r\n                * Returns value of title\r\n                * @return title\r\n                */\r\n                public String getTitle() {\r\n                    return this.title;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Sets new value of title\r\n                * @param title Updated title\r\n                */\r\n                public void setTitle(String title) {\r\n                      this.title = title;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Returns value of minutes\r\n                * @return minutes\r\n                */\r\n                public int getMinutes() {\r\n                return this.minutes;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of minutes\r\n                * @param minutes Updated minutes\r\n                */\r\n                public void setMinutes(int minutes) {\r\n                      this.minutes = minutes;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Returns value of seconds\r\n                * @return seconds\r\n                */\r\n                public int getSeconds() {\r\n                return this.seconds;\r\n                }\r\n            \r\n                /**\r\n                * Sets new value of seconds\r\n                * @param seconds Updated seconds\r\n                */\r\n                public void setSeconds(int seconds) {\r\n                          this.seconds = seconds;\r\n            \r\n                }\r\n            \r\n                /**\r\n                * Create string representation of Song for printing\r\n                * @return String of the song\r\n                */\r\n                @Override\r\n                public String toString() {\r\n                    return \"artist= \" + artist + \"\\ntitle= \" + title + \"\\nTime= \" + minutes + \":\" + seconds;\r\n                }\r\n            }","address":"/codehs/java/5/9/song-class.html"},{"title":"5.9.5 Write Your Own CodeHS","text":"5.9.5 Write Your Own CodeHSpublic class ExerciseTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Exercise exercise1 = new Exercise();\r\n        Exercise exercise2 = new Exercise(\"Who needs this anyways?\", \"Java\", 9001);\r\n        \r\n        System.out.println(exercise1.getTitle());\r\n        System.out.println(exercise2.getTitle());\r\n    }\r\n}public class Exercise\r\n            {\r\n                public String title = \"JavaScript Exercise\";\r\n                public String programmingLanguage = \"JavaScript\";\r\n                public int points = 100;\r\n                \r\n                // Default constructor.\r\n                public Exercise() \r\n                {\r\n                    \r\n                }\r\n                \r\n                // Edit code in this constructor.\r\n                public Exercise(String title, String programmingLanguage, int points) \r\n                {\r\n                    this.title = title;\r\n                    this.programmingLanguage = programmingLanguage;\r\n                    this.points =  points;\r\n                }\r\n                \r\n                public String getTitle() {\r\n                    return title;\r\n                }\r\n            }","address":"/codehs/java/5/9/write-your-own-codehs.html"},{"title":"6.1.8 Last Element in Array","text":"6.1.8 Last Element in Arraypublic class LastElement\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String[] arr = new String[]{\"hello\", \"my name\", \"world\", \"Karel\"};\r\n                    //get and print the last element of the array\r\n                    \r\n                    System.out.println(\"The last element of the String array is: \" + getLastElement(arr));\r\n                }\r\n            \r\n                public static String getLastElement(String[] arr)\r\n                {\r\n                    return arr[arr.length - 1];\r\n                }\r\n            }","address":"/codehs/java/6/1/last-element-in-array.html"},{"title":"6.1.6 Our First Array","text":"6.1.6 Our First Arraypublic class FirstArray\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                  String[] cities = new String[] {\r\n                      \"Las Vegas\", \"Minsk\", \"Sao Paulo\"\r\n                  };\r\n                  \r\n                  int[] temps = new int[] {\r\n                      104, 73, 80\r\n                  };\r\n                  \r\n                  double[] precipitation = new double[] {\r\n                      4.17, 26.7, 55.0\r\n                  };\r\n                    \r\n                  for(int i = 0; i < cities.length; i++) {\r\n                      System.out.println(cities[i] + \" has an average annual precipitation of \" + precipitation[i] + \" inches.\");\r\n                      System.out.println(cities[i] + \" has an average annual high temp of \" + temps[i] + \" degrees Fahrenheit.\");\r\n                  }\r\n                \r\n                }\r\n            }","address":"/codehs/java/6/1/our-first-array.html"},{"title":"6.1.7 Set Scores","text":"6.1.7 Set Scorespublic class Scores\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] scores = {80, 95, 82, 67, 100};\r\n                    \r\n                    for(int i = 0; i < scores.length; i++) System.out.println(scores[i]);\r\n                    \r\n                    scores[2] = 72;\r\n                    scores[scores.length - 1] = 95;\r\n                    \r\n                    System.out.println(\"\");\r\n                    \r\n                    for(int i = 0; i < scores.length; i++) System.out.println(scores[i]);\r\n                }\r\n            }","address":"/codehs/java/6/1/set-scores.html"},{"title":"6.1.9 Snap Shot Splash Screen","text":"6.1.9 Snap Shot Splash Screenpublic class SnapShot\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String[] splashLines ={ \"Welcome\",\r\n                                            \"to\",\r\n                                            \"the snap shot\",\r\n                                            \"app!\" };\r\n                                            \r\n                    for(int i = 0; i < splashLines.length; i++) System.out.println(splashLines[i]);\r\n                    \r\n                    splashLines[0] = \"Upgrade\";\r\n                    splashLines[splashLines.length - 1] = \"premium app!\";\r\n                    \r\n                    System.out.println(\"\");\r\n                    \r\n                    for(int i = 0; i < splashLines.length; i++) System.out.println(splashLines[i]);\r\n                }\r\n            }","address":"/codehs/java/6/1/snap-shot-splash-screen.html"},{"title":"6.2.10 Fibonacci Sequence","text":"6.2.10 Fibonacci Sequencepublic class Fibonacci \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n      \r\n        //number of elements to generate in the sequence\r\n\t\tint max = 15;\r\n\t\t\r\n\t\t// create the array to hold the sequence of Fibonacci numbers\r\n\t\tint[] sequence = new int[max];\r\n\t\t\r\n\t\t//create the first 2 Fibonacci sequence elements\r\n\t\tsequence[0] = 0;\r\n\t\tsequence[1] = 1;\r\n\t\t\r\n\t\t//create the Fibonacci sequence and store it in int[] sequence\r\n\t    for(int i = 2; i < sequence.length; i++) sequence[i] = sequence[i - 1] + sequence[i - 2];\r\n\t\t\r\n\t\t//print the Fibonacci sequence numbers\r\n        for(int i = 0; i < sequence.length; i++) System.out.print(sequence[i] + \" \");\r\n    \r\n        System.out.println(\"\\nIndex position of 55 is: \" + findIndex(sequence, 55));\r\n    \r\n    }\r\n      \r\n    // This method finds the index of an element in an array \r\n      \r\n    public static int findIndex (int[] arr, int n) \r\n    {\r\n        for(int i = 0; i < arr.length; i++) {\r\n            if(arr[i] == n) return i;\r\n        }\r\n        return -1;\r\n    }\r\n}","address":"/codehs/java/6/2/fibonacci-sequence.html"},{"title":"6.2.9 Find Index of a String","text":"6.2.9 Find Index of a Stringpublic class MatchingStringTester\r\n            {\r\n               public static void main(String[] args)\r\n               {\r\n                 System.out.println(MatchingString.findString(\"Karel\"));\r\n                 \r\n               }\r\n            }public class MatchingString\r\n            {\r\n            \r\n                private static String[] arr = {\"Hello\", \"Karel\", \"CodeHS!\"};\r\n                \r\n                public static int findString(String myString)\r\n                {\r\n                    for(int i = 0; i < arr.length; i++) {\r\n                        if(arr[i].equals(myString)) return i;\r\n                    }\r\n                    return -1;\r\n                }\r\n            }","address":"/codehs/java/6/2/find-index-of-a-string.html"},{"title":"6.2.7 Print Array","text":"6.2.7 Print Arraypublic class PrintArray\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    String[] arr = new String[]{\"a\", \"b\", \"c\"};\r\n                    printArr(arr);\r\n                }\r\n                \r\n                public static void printArr(String[] arr)\r\n                {\r\n                    // Print everything in the array on its own line\r\n                    for(int i = 0; i < arr.length; i++) System.out.println(arr[i]);\r\n                }\r\n            }","address":"/codehs/java/6/2/print-array.html"},{"title":"6.2.8 Print Odd Array Indices","text":"6.2.8 Print Odd Array Indicespublic class PrintOdd \r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] oddIndexArray = new int[] {1, 2, 3, 4, 5};\r\n                    printOddIndices(oddIndexArray);\r\n                }\r\n                \r\n                public static void printOddIndices(int[] arr)\r\n                {\r\n                    for(int i = 1; i < arr.length; i+=2) System.out.println(arr[i]);\r\n                }\r\n            }","address":"/codehs/java/6/2/print-odd-array-indices.html"},{"title":"6.3.9 Array Average","text":"6.3.9 Array Averagepublic class ArrayAverageTester\r\n            {\r\n            \r\n               public static void main(String[] args)\r\n               {\r\n                 int[] numArray =  {12, 17, 65, 7, 30, 88};\r\n                 \r\n                 ArrayAverage avg = new ArrayAverage(numArray);\r\n                 System.out.println(\"The average of the array is \" + avg.getAverage());\r\n               }\r\n            }public class ArrayAverage\r\n{\r\n   private int[] values;\r\n\r\n   public ArrayAverage(int[] theValues)\r\n   {\r\n      values = theValues;\r\n   }\r\n\r\n   public double getAverage()\r\n   {\r\n     //double so that division won't be rounded\r\n     double sum = 0;\r\n     for(int m : values) sum += m;\r\n     return sum / values.length;\r\n   }\r\n}","address":"/codehs/java/6/3/array-average.html"},{"title":"6.3.8 Classroom Array","text":"6.3.8 Classroom Arraypublic class ClassRoster\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    Student julian = new Student(\"Julian\", \"Jones\", 9);\r\n                    Student larisa = new Student(\"Larisa\", \"Torres\", 10);\r\n                    Student amada = new Student(\"Amada\", \"Robin\", 10);\r\n                    Student mikka = new Student(\"Mikka\", \"Leads\", 9);\r\n                    Student jay = new Student(\"Jay\", \"Khalil\", 10);\r\n                    \r\n                    Student[] classroom = {julian, larisa, amada, mikka, jay};\r\n            \r\n                    for(Student kid : classroom) {\r\n                        System.out.println(kid.getFirstName() + \" \" + kid.getLastName() + \" is in grade \" + kid.getGradeLevel());\r\n                    }\r\n                    \r\n                }\r\n            }/**\r\n * The Student class holds data about a student.\r\n * The fields are firstName, lastName, and grade.\r\n */\r\npublic class Student\r\n{\r\n    // Attributes\r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    \r\n    // Constructor\r\n    public Student(String fName, String lName, int grade)\r\n    {\r\n        firstName = fName;\r\n        lastName = lName;\r\n        gradeLevel = grade;\r\n    }\r\n    \r\n    public String getFirstName()\r\n    {\r\n        return firstName;\r\n    }\r\n    \r\n    // new getter\r\n    public String getLastName()\r\n    {\r\n        return lastName;\r\n    }\r\n    \r\n    // new getter \r\n    public int getGradeLevel()\r\n    {\r\n        return gradeLevel;\r\n    }\r\n    \r\n    /*\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade: \" + gradeLevel;\r\n    }\r\n    */\r\n}","address":"/codehs/java/6/3/classroom-array.html"},{"title":"6.3.7 Largest Value","text":"6.3.7 Largest Valuepublic class LargestValue     \r\n            { \r\n                public static void main(String[] arg) \r\n                { \r\n                    { \r\n                        int[] values = {32, 56, 79, 2, 150, 37}; \r\n                          \r\n                        int highestValue = findMax(values); \r\n                        System.out.println(\"The highest score is \" + highestValue); \r\n                    } \r\n                } \r\n                public static int findMax(int[] numbers) \r\n                {  \r\n                    int maxSoFar = numbers[0];\r\n                    \r\n                    // for each loop to rewrite as for loop \r\n                    for (int i = 0; i < numbers.length; i++)  \r\n                    { \r\n                        if (numbers[i]> maxSoFar) \r\n                        { \r\n                            maxSoFar = numbers[i]; \r\n                        } \r\n                    } \r\n                return maxSoFar; \r\n                } \r\n            }","address":"/codehs/java/6/3/largest-value.html"},{"title":"6.3.6 Print Odds","text":"6.3.6 Print Oddspublic class PrintOdds\r\n            {\r\n               public static void main(String[] args)\r\n               {\r\n                 int[ ] values = {17, 34, 56, 2, 19, 100};\r\n                    \r\n                 for (int val : values)\r\n                 {\r\n                   if (val % 2 == 1)\r\n                       System.out.println(val + \" is odd\");\r\n                 }\r\n               }\r\n            }","address":"/codehs/java/6/3/print-odds.html"},{"title":"6.4.8 Car Showroom","text":"6.4.8 Car Showroomclass CarModel \r\n{\r\n   private String name;\r\n   private int speed;\r\n\r\n   public CarModel(String theName, int theSpeed)\r\n   {\r\n      this.name = theName;\r\n      this.speed = theSpeed;\r\n   }\r\n\r\n   public String getName() \r\n   { \r\n       return this.name;\r\n   }\r\n\r\n   public int getSpeed() \r\n   { \r\n       return this.speed; \r\n   }\r\n\r\n   public String toString()\r\n   {\r\n      return this.name + \" with a top speed of \" + this.speed;\r\n   }\r\n}public class CarShowroom \r\n            {\r\n               public static void main (String[] args)\r\n               {\r\n                 CarShowroom showroom = new CarShowroom(7);\r\n                 showroom.spaces[0] = new CarModel(\"Mustang\", 157);\r\n                 showroom.spaces[1] = new CarModel(\"Camaro\",155);\r\n                 showroom.spaces[3] = new CarModel(\"Corvette\", 194);\r\n                 showroom.spaces[6] = new CarModel(\"Porshe\", 210);\r\n            \r\n                 // print out what is in the showroom\r\n                 System.out.println(showroom);\r\n            \r\n                 // test output\r\n                 System.out.println(\"Index of Mustang should be 0 and is \" +\r\n                                    showroom.findCarSpace(\"Mustang\"));\r\n                 System.out.println(\"Index of Corvette should be 3 and is \" +\r\n                                    showroom.findCarSpace(\"Corvette\"));\r\n                 System.out.println(\"Index of Miata should be -1 and is \" +\r\n                                    showroom.findCarSpace(\"Miata\"));\r\n                                    \r\n                 \r\n                 System.out.println(\"\\nOriginal Car Showroom:\");\r\n                 System.out.println(showroom);\r\n                 showroom.consolidate();\r\n                 System.out.println(\"Car Showroom after cars have been consolidated:\");\r\n                 System.out.println(showroom);\r\n               }\r\n               \r\n               private CarModel[] spaces;\r\n            \r\n               // constructor for number of spaces in showroom\r\n               public CarShowroom(int numParkingSpaces)\r\n               {\r\n                 spaces = new CarModel[numParkingSpaces];\r\n               }\r\n            \r\n               // Returns index of space that contains the car with the specified model\r\n               // and -1 if no car in the showroom is that model.No two cars in the showroom are the same model.\r\n            \r\n               public int findCarSpace(String name)\r\n               {\r\n                    for(int i = 0; i < spaces.length; i++) {\r\n                        if(spaces[i] == null) continue;\r\n                        \r\n                        if(spaces[i].getName().equals(name)) return i;\r\n                    }\r\n                    \r\n                    return -1;\r\n               }\r\n               \r\n               // Consolidates cars in the showroom so that there are no gaps\r\n               // in the parking spaces so that it's easier to move new models in\r\n               \r\n               public void consolidate()\r\n               { \r\n                   for(int i = 0; i < spaces.length - 1; i++) {\r\n                       if(spaces[i] == null) {\r\n                           //if this space is empty, search for cars after here that can be used to fill it in\r\n                           for(int j = i; j < spaces.length; j++) {\r\n                               if(spaces[j] != null) {\r\n                                   //if/when we find one, slot it in & remove it from its old spot\r\n                                   spaces[i] = spaces[j];\r\n                                   spaces[j] = null;\r\n                                   //break searching loop once we've found something\r\n                                   break;\r\n                               }\r\n                           }\r\n                       }\r\n                   }\r\n               }\r\n            \r\n               public String toString()\r\n               {\r\n                 String result = \"\";\r\n                 CarModel sp = null;\r\n                 \r\n                 // iterate through the spaces\r\n                 for (int i = 0; i < spaces.length; i++) \r\n                 {\r\n                   sp = spaces[i];\r\n                   result = result + \"Space \" + i + \" has a \";\r\n                   \r\n                   // locate empty spaces\r\n                   if (sp == null)\r\n                   {\r\n                        result = result + \" null \\n\";\r\n                   }\r\n                   else result = result + sp.toString() + \"\\n\";\r\n                 }\r\n                 return result;\r\n               }\r\n            }","address":"/codehs/java/6/4/car-showroom.html"},{"title":"6.4.7 Find the Last Multiple of 3","text":"6.4.7 Find the Last Multiple of 3public class LastMultipleOfThree\r\n            {\r\n            \r\n                public static void main(String[] args)\r\n                {\r\n                    int[] numbers1 = {76, 75, 3, 17, 12, 22, 7};\r\n                    System.out.print(\"The following index holds the LAST multiple of 3: \" + findMultipleOfThree(numbers1));\r\n                    \r\n                }\r\n                \r\n                public static int findMultipleOfThree(int[] arr)\r\n                {\r\n                    //start at the last index and move towards the start, looking for items divisible by 3\r\n                    for(int i = arr.length - 1; i >= 0; i--) {\r\n                        if(arr[i] % 3 == 0)  return i;\r\n                    }\r\n                    return -1;\r\n                }\r\n            }","address":"/codehs/java/6/4/find-the-last-multiple-of-3.html"},{"title":"6.4.6 Find the Median","text":"6.4.6 Find the Medianimport java.util.*;\r\n            public class Median\r\n            {\r\n            \r\n                public static void main(String[] args)\r\n                {\r\n                    int[] numbers1 = {12, 75, 3, 17, 65, 22};\r\n                    System.out.print(\"The median value of the EVEN array is \" + median(numbers1));\r\n                    \r\n                    int[] numbers2 = {12, 75, 3, 17, 65, 22, 105};\r\n                    System.out.print(\"\\nThe median value of the ODD array is \" + median(numbers2));\r\n                    \r\n                }\r\n            \r\n                public static double median(int[] arr)\r\n                {\r\n                    Arrays.sort(arr);\r\n                    \r\n                    if(arr.length % 2 > 0) return arr[arr.length / 2];\r\n                    else return (double) (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2;\r\n                }\r\n            }","address":"/codehs/java/6/4/find-the-median.html"},{"title":"6.4.8 Most Improved","text":"6.4.8 Most Improvedpublic class ClassroomTester \r\n            {\r\n                public static void main (String[] args)\r\n                {\r\n                    Classroom c = new Classroom(2);\r\n                    \r\n                    Student ada = new Student(\"Ada\", \"Lovelace\", 12);\r\n                    ada.addExamScore(44);\r\n                    ada.addExamScore(65);\r\n                    ada.addExamScore(77);\r\n            \r\n                    Student alan = new Student(\"Alan\", \"Turing\", 11);\r\n                    alan.addExamScore(38);\r\n                    alan.addExamScore(24);\r\n                    alan.addExamScore(31);\r\n            \r\n                    // add students to classroom\r\n                    c.addStudent(ada);\r\n                    c.addStudent(alan);\r\n                    c.printStudents();\r\n                    \r\n                    Student mostImproved = c.getMostImprovedStudent();\r\n                    System.out.println(\"The most improved student is \" + mostImproved.getName());\r\n                }\r\n            }public class Student\r\n{\r\n    private static final int NUM_EXAMS = 4;\r\n    \r\n    private String firstName;\r\n    private String lastName;\r\n    private int gradeLevel;\r\n    private double gpa;\r\n    \r\n    private int[] exams;\r\n    private int numExamsTaken;\r\n\r\n    /**\r\n     * This is a constructor.  A constructor is a method\r\n     * that creates an object -- it creates an instance\r\n     * of the class. What that means is it takes the input\r\n     * parameters and sets the instance variables (or fields)\r\n     * to the proper values.\r\n     * \r\n     * Check out StudentTester.java for an example of how to use\r\n     * this constructor. \r\n     */\r\n    public Student(String fName, String lName, int grade)\r\n    {\r\n        firstName = fName;\r\n        lastName = lName;\r\n        gradeLevel = grade;\r\n        exams = new int[NUM_EXAMS];\r\n        numExamsTaken = 0;\r\n    }\r\n    \r\n    public int getExamRange()\r\n    {\r\n        int min = Integer.MAX_VALUE;\r\n        for(int m : exams) min = Math.min(min, m);\r\n        \r\n        int max = Integer.MIN_VALUE;\r\n        for(int m : exams) max = Math.max(max, m);\r\n        \r\n        return max - min;\r\n    }\r\n    \r\n    public String getName()\r\n    {\r\n        return firstName + \" \" + lastName;\r\n    }\r\n    \r\n    public void addExamScore(int score)\r\n    {\r\n        exams[numExamsTaken] = score;\r\n        numExamsTaken++;\r\n    }\r\n    \r\n    // This is a setter method to set the GPA for the Student.\r\n    public void setGPA(double theGPA)\r\n    {\r\n        gpa = theGPA;\r\n    }\r\n    \r\n    /**\r\n     * This is a toString for the Student class. It returns a String\r\n     * representation of the object, which includes the fields\r\n     * in that object.\r\n     */\r\n    public String toString()\r\n    {\r\n        return firstName + \" \" + lastName + \" is in grade: \" + gradeLevel;\r\n    }\r\n}public class Classroom\r\n{\r\n    Student[] students;\r\n    int numStudentsAdded;\r\n    \r\n    public Classroom(int numStudents)\r\n    {\r\n        students = new Student[numStudents];\r\n        numStudentsAdded = 0;\r\n    }\r\n    \r\n    public Student getMostImprovedStudent()\r\n    {\r\n        int mostImprovedRange = Integer.MIN_VALUE;\r\n        Student mostImprovedStudent = students[0];\r\n        \r\n        for(Student s : students) {\r\n            if(s == null) continue;\r\n            \r\n            int range = s.getExamRange();\r\n            if(range > mostImprovedRange) {\r\n                mostImprovedStudent = s;\r\n                mostImprovedRange = range;\r\n            }\r\n        }\r\n        \r\n        return mostImprovedStudent;\r\n    }\r\n    \r\n    public void addStudent(Student s)\r\n    {\r\n        students[numStudentsAdded] = s;\r\n        numStudentsAdded++;\r\n    }\r\n    \r\n    public void printStudents()\r\n    {\r\n        for(int i = 0; i < numStudentsAdded; i++)\r\n        {\r\n            System.out.println(students[i]);\r\n        }\r\n    }\r\n}","address":"/codehs/java/6/4/most-improved.html"},{"title":"7.1.8 Car Inventory","text":"7.1.8 Car Inventoryimport java.util.ArrayList;\r\n            public class CarTracker\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //Initialize your ArrayList here:\r\n                    ArrayList<Car> inventory = new ArrayList<Car>();\r\n                }\r\n            }","address":"/codehs/java/7/1/car-inventory.html"},{"title":"7.1.7 Initializing an ArrayList","text":"7.1.7 Initializing an ArrayListimport java.util.ArrayList;\r\n            public class Agency\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<String> companyName = new ArrayList<String>();\r\n                    ArrayList<Integer> contractValue = new ArrayList<Integer>();\r\n                }\r\n            }","address":"/codehs/java/7/1/initializing-an-arraylist.html"},{"title":"7.2.7 ArrayList of Even Numbers","text":"7.2.7 ArrayList of Even Numbersimport java.util.ArrayList;\r\n\r\n            public class Evens\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<Integer> evens = new ArrayList<Integer>();\r\n                    \r\n                    for(int i = 2; i <= 100; i+=2) evens.add(i);\r\n                    \r\n                    printArray(evens);\r\n                }\r\n                \r\n                \r\n                //Don't alter this method! It will print your array in the console\r\n                public static void printArray(ArrayList<Integer> array)\r\n                {\r\n                    System.out.println(\"Array:\");\r\n                    for(int name: array)\r\n                    {\r\n                        System.out.print(name + \" \");\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/7/2/arraylist-of-even-numbers.html"},{"title":"7.2.6 Get First Element","text":"7.2.6 Get First Elementimport java.util.ArrayList;\r\n\r\n            public class Numbers\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<Integer> numbers = new ArrayList<Integer>();\r\n                    // Add 5 numbers to `numbers`\r\n                    numbers.add(1);\r\n                    numbers.add(2);\r\n                    numbers.add(3);\r\n                    numbers.add(4);\r\n                    numbers.add(5);\r\n                    \r\n                    // Print out the first element in `numbers`\r\n                    System.out.println(numbers.get(0));\r\n                }\r\n            }","address":"/codehs/java/7/2/get-first-element.html"},{"title":"7.2.9 Teacher Class List Methods","text":"7.2.9 Teacher Class List Methodspublic class ClassListTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //You don't need to change anything here, but feel free to add more Students!\r\n                    Student alan = new Student(\"Alan\", 11);\r\n                    Student kevin = new Student(\"Kevin\", 10);\r\n                    Student annie = new Student(\"Annie\", 12);\r\n                    System.out.println(Student.printClassList());\r\n                    \r\n                    System.out.println(Student.getLastStudent());\r\n                    System.out.println(Student.getStudent(1));\r\n                \r\n                    Student.addStudent(2, new Student(\"Trevor\", 12));\r\n                    System.out.println(Student.printClassList());\r\n                    System.out.println(Student.getClassSize());\r\n                }\r\n                \r\n                \r\n                \r\n            }import java.util.ArrayList;\r\n\r\npublic class Student\r\n{\r\n    private String name;\r\n    private int grade;\r\n    //Implement classList here:\r\n    private static ArrayList<Student> classList = new ArrayList<Student>();\r\n    \r\n    public Student(String name, int grade)\r\n    {\r\n        this.name = name;\r\n        this.grade = grade;\r\n        classList.add(this);\r\n    }\r\n    \r\n    public String getName()\r\n    {\r\n        return this.name;\r\n    }\r\n    //Add the static methods here:\r\n    \r\n    public static String getLastStudent() {\r\n        return classList.get(classList.size() - 1).getName();\r\n    }\r\n    \r\n    public static int getClassSize() {\r\n        return classList.size();\r\n    }\r\n    \r\n    public static void addStudent(int index, Student student) {\r\n        classList.remove(classList.size() - 1);\r\n        classList.add(index, student);\r\n    }\r\n    \r\n    public static String getStudent(int index) {\r\n        return classList.get(index).getName();\r\n    }\r\n\r\n\r\n    public static String printClassList()\r\n    {\r\n        String names = \"\";\r\n        for(Student name: classList)\r\n        {\r\n            names+= name.getName() + \"\\n\";\r\n        }\r\n        return \"Student Class List:\\n\" + names;\r\n    }\r\n}","address":"/codehs/java/7/2/teacher-class-list-methods.html"},{"title":"7.2.8 Teacher Class List","text":"7.2.8 Teacher Class Listpublic class ClassListTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        //You don't need to change anything here, but feel free to add more Students!\r\n        Student alan = new Student(\"Alan\", 11);\r\n        Student kevin = new Student(\"Kevin\", 10);\r\n        Student annie = new Student(\"Annie\", 12);\r\n        System.out.println(Student.printClassList());\r\n    }\r\n    \r\n    \r\n    \r\n}import java.util.ArrayList;\r\n            public class Student\r\n            {\r\n                private String name;\r\n                private int grade;\r\n                \r\n                //Implement classList here:\r\n                private static ArrayList<Student> classList = new ArrayList<Student>();\r\n                \r\n                public Student(String name, int grade)\r\n                {\r\n                    this.name = name;\r\n                    this.grade = grade;\r\n                    \r\n                    classList.add(this);    \r\n                }\r\n                \r\n                public String getName()\r\n                {\r\n                    return this.name;\r\n                }\r\n                \r\n                /*Don't change the code in this method!\r\n                This method will print out all the Student names in the classList Array\r\n                */\r\n                public static String printClassList()\r\n                {\r\n                    String names = \"\";\r\n                    for(Student name : classList)\r\n                    {\r\n                        names += name.getName() + \"\\n\";\r\n                    }\r\n                    return \"Student Class List:\\n\" + names;\r\n                }\r\n            }","address":"/codehs/java/7/2/teacher-class-list.html"},{"title":"7.3.8 ArrayList Helper Methods","text":"7.3.8 ArrayList Helper Methodsimport java.util.ArrayList;\r\n\r\n            public class ArrayListMethodsTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<String> stringArray = new ArrayList<String>();\r\n                    stringArray.add(\"This\");\r\n                    stringArray.add(\"is\");\r\n                    stringArray.add(\"an\");\r\n                    stringArray.add(\"ArrayList\");\r\n                    stringArray.add(\"of\");\r\n                    stringArray.add(\"Strings\");\r\n                    \r\n                    ArrayListMethods.print(stringArray);\r\n                    System.out.println(\"\\nArrayList is condensing:\");\r\n                    ArrayListMethods.condense(stringArray);\r\n                    ArrayListMethods.print(stringArray);\r\n                    System.out.println(\"\\nArrayList is duplicating:\");\r\n                    ArrayListMethods.duplicate(stringArray);\r\n                    ArrayListMethods.print(stringArray);\r\n                    \r\n                }\r\n            }import java.util.ArrayList;\r\npublic class ArrayListMethods\r\n{\r\n    public static void print(ArrayList<String> array) {\r\n        for(String s : array) System.out.println(s);\r\n    }\r\n    public static void condense(ArrayList<String> array) {\r\n        for(int i = 0; i < array.size() - 1; i++) {\r\n            array.set(i, array.get(i) + array.get(i+1));\r\n            array.remove(i+1);\r\n        }\r\n    }\r\n    public static void duplicate(ArrayList<String> array) {\r\n        for(int i = 0; i < array.size(); i+=2) {\r\n            array.add(i, array.get(i));\r\n        }\r\n    }\r\n}","address":"/codehs/java/7/3/arraylist-helper-methods.html"},{"title":"7.3.9 Road Trip!","text":"7.3.9 Road Trip!/*\r\n            * This class stores information about a location on Earth.  Locations are\r\n            * specified using latitude and longitude.  The class includes a method for\r\n            * computing the distance between two locations.\r\n            *\r\n            * This implementation is based off of the example from Stuart Reges at \r\n            * the University of Washington.\r\n            */\r\n           \r\n           public class GeoLocation \r\n           {\r\n               // Earth radius in miles\r\n               public static final double RADIUS = 3963.1676;  \r\n           \r\n               private double latitude;\r\n               private double longitude;\r\n               \r\n               private String name;\r\n           \r\n               /**\r\n                * Constructs a geo location object with given latitude and longitude\r\n                */\r\n               public GeoLocation(String name, double theLatitude, double theLongitude) \r\n               {\r\n                   this.name = name;\r\n                   latitude = theLatitude;\r\n                   longitude = theLongitude;\r\n               }\r\n               \r\n               public String getName() {\r\n                   return this.name;\r\n               }\r\n           \r\n               /**\r\n                * Returns the latitude of this geo location\r\n                */\r\n               public double getLatitude() \r\n               {\r\n                   return latitude;\r\n               }\r\n           \r\n               /**\r\n                * returns the longitude of this geo location\r\n                */\r\n               public double getLongitude() \r\n               {\r\n                   return longitude;\r\n               }\r\n           \r\n               // returns a string representation of this geo location\r\n               public String toString() \r\n               {\r\n                   return name + \" (\" + latitude + \", \" + longitude + \")\";\r\n               }\r\n           \r\n               // returns the distance in miles between this geo location and the given\r\n               // other geo location\r\n               public double distanceFrom(GeoLocation other) \r\n               {\r\n                   double lat1 = Math.toRadians(latitude);\r\n                   double long1 = Math.toRadians(longitude);\r\n                   double lat2 = Math.toRadians(other.latitude);\r\n                   double long2 = Math.toRadians(other.longitude);\r\n                   // apply the spherical law of cosines with a triangle composed of the\r\n                   // two locations and the north pole\r\n                   double theCos = Math.sin(lat1) * Math.sin(lat2) +\r\n                       Math.cos(lat1) * Math.cos(lat2) * Math.cos(long1 - long2);\r\n                   double arcLength = Math.acos(theCos);\r\n                   return arcLength * RADIUS;\r\n               }\r\n           }public class RoadTripTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        RoadTrip rt = new RoadTrip();\r\n        rt.addStop(\"San Francisco\", 37.7833, -122.4167);\r\n        rt.addStop(\"Los Angeles\", 34.052235, -118.243683);\r\n        rt.addStop(\"Las Vegas\", 36.114647, -115.172813);\r\n\r\n        \r\n        System.out.println(rt);\r\n        \r\n        System.out.println(\"Stops: \" + rt.getNumberOfStops());\r\n        System.out.println(\"Total Miles: \" + rt.getTripLength());\r\n    }\r\n}import java.util.ArrayList;\r\n\r\n            public class RoadTrip\r\n            {\r\n                private ArrayList<GeoLocation> places;\r\n                \r\n                public RoadTrip() {\r\n                    this.places = new ArrayList<GeoLocation>();\r\n                }\r\n                \r\n                // Create a GeoLocation and add it to the road trip\r\n                public void addStop(String name, double latitude, double longitude) {\r\n                    places.add(new GeoLocation(name, latitude, longitude));\r\n                }\r\n                \r\n                // Get the total number of stops in the trip\r\n                public int getNumberOfStops() {\r\n                    return places.size();\r\n                }\r\n                \r\n                // Get the total miles of the trip\r\n                public double getTripLength() {\r\n                    double total = 0;\r\n                    for(int i = 1; i < places.size(); i++) {\r\n                        total += places.get(i).distanceFrom(places.get(i - 1));\r\n                    }\r\n                    return total;\r\n                }\r\n                \r\n                // Return a formatted toString of the trip\r\n                public String toString() {\r\n                    String list = \"\";\r\n                    \r\n                    for(int i = 0; i < places.size(); i++) list += (i + 1) + \". \" + places.get(i).toString() + \"\\n\";\r\n                    \r\n                    return list;\r\n                }\r\n            }","address":"/codehs/java/7/3/road-trip.html"},{"title":"7.3.6 Traversing Odds","text":"7.3.6 Traversing Oddsimport java.util.ArrayList;\r\n\r\n            public class Odds\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<Integer> odds = new ArrayList<Integer>();\r\n                    // Pre-load the array list with values.\r\n                    for(int index = 1; index < 101; index++)\r\n                    {\r\n                        odds.add(index);\r\n                        odds.add(index);\r\n                    }\r\n                    //call removeEvens on the array above!\r\n                    removeEvens(odds);\r\n                }\r\n                \r\n                public static void removeEvens(ArrayList<Integer> array)\r\n                {\r\n                    for(int i = 0; i < array.size(); i++) {\r\n                        if(array.get(i) % 2 == 0) {\r\n                            array.remove(i);\r\n                            i--;\r\n                        }\r\n                    }\r\n                    \r\n                    for(int i = 0; i < array.size(); i++) System.out.println(array.get(i));\r\n                }\r\n            }","address":"/codehs/java/7/3/traversing-odds.html"},{"title":"7.4.7 Airline Tickets","text":"7.4.7 Airline Ticketspublic class AirlineTicket\r\n            {\r\n                private String[] seats = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"};\r\n                private String name;\r\n                private String seat;\r\n                private int boardingGroup;\r\n                private int row;\r\n                \r\n                public AirlineTicket(String name, String seat, int boardingGroup, int row)\r\n                {\r\n                    this.name = name;\r\n                    if(isValidSeat(seat))\r\n                    {\r\n                        this.seat = seat;\r\n                    }\r\n                    this.boardingGroup = boardingGroup;\r\n                    this.row = row;\r\n                    \r\n                }\r\n                \r\n                private boolean isValidSeat(String seat)\r\n                {\r\n                    boolean isValidSeat = false;\r\n                    for(String elem: seats)\r\n                    {\r\n                        if(seat.equals(elem))\r\n                        {\r\n                            isValidSeat = true;\r\n                        }\r\n                    }\r\n                    return isValidSeat;\r\n                }\r\n                \r\n                public String getSeat()\r\n                {\r\n                    return this.seat;\r\n                }\r\n                \r\n                public String getName()\r\n                {\r\n                    return this.name;\r\n                }\r\n                \r\n                public int getBoardingGroup()\r\n                {\r\n                    return this.boardingGroup;\r\n                }\r\n                \r\n                public int getRow()\r\n                {\r\n                    return this.row;\r\n                }\r\n                \r\n                public String toString()\r\n                {\r\n                    return name + \" Seat: \" +seat + \" Row: \" + row + \" Boarding Group: \" + boardingGroup;\r\n                }\r\n            }import java.util.ArrayList;\r\n\r\n            public class AirlineTicketTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<AirlineTicket> tickets = new ArrayList<AirlineTicket>();\r\n                    //This creates a randomized list of passengers\r\n                    addPassengers(tickets);\r\n                    for(AirlineTicket elem: tickets)\r\n                    {\r\n                        System.out.println(elem);\r\n                    }\r\n                   //This creates a TicketOrganizer object\r\n                    TicketOrganizer ticketOrganizer = new TicketOrganizer(tickets);\r\n                    \r\n                    //These are the methods of the ticketOrganizer in action\r\n                    System.out.println(\"\\nPassengers Ordered by Boarding Group:\");\r\n                    ticketOrganizer.printPassengersByBoardingGroup();\r\n                    System.out.println(\"\\nPassengers in line who can board together:\");\r\n                    ticketOrganizer.canBoardTogether();\r\n                }\r\n                \r\n                //Do not touch this method! It is adding random passengers to the AirlineTicket array\r\n                public static void addPassengers(ArrayList<AirlineTicket> tickets)\r\n                {\r\n                    String[] seats = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"};\r\n                    for(int index = 0; index < 15; index++)\r\n                    {\r\n                        int random = (int)(Math.random() * 5);\r\n                        AirlineTicket ticket = new AirlineTicket(\"Passenger \" + (index+1), seats[random], ((int)(Math.random()*5)+1), ((int)(Math.random()*8)+1));\r\n                        tickets.add(ticket);\r\n                    }\r\n                }\r\n                \r\n            }import java.util.ArrayList;\r\n\r\n            public class TicketOrganizer\r\n            {\r\n                private ArrayList<AirlineTicket> tickets;\r\n                \r\n                public TicketOrganizer(ArrayList<AirlineTicket> theTickets) {\r\n                    this.tickets = theTickets;\r\n                }\r\n                \r\n                public ArrayList<AirlineTicket> getTickets() {\r\n                    return this.tickets;\r\n                }\r\n            \r\n                public void printPassengersByBoardingGroup() {\r\n                    for(int i = 1; i <= 5; i++) {\r\n                        System.out.println(\"Boarding Group \" + i + \":\");\r\n                        for(int j = 0; j < tickets.size(); j++) {\r\n                            if(tickets.get(j).getBoardingGroup() == i) System.out.println(\"Passenger \" + (j + 1));\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                public void canBoardTogether() {\r\n                    boolean somePassengersCanBoard = false;\r\n                    for(int i = 0; i < tickets.size() - 1; i++) {\r\n                        if(tickets.get(i).getBoardingGroup() == tickets.get(i + 1).getBoardingGroup() &&\r\n                            tickets.get(i).getRow() == tickets.get(i + 1).getRow()) {\r\n                                System.out.println(\"Passenger \" + (i+1) +\" can board with Passenger \" + (i+2) +\".\");\r\n                                somePassengersCanBoard = true;\r\n                            }\r\n                    }\r\n                    if(!somePassengersCanBoard) System.out.println(\"There are no passengers with the same row and boarding group.\");\r\n                }\r\n            }","address":"/codehs/java/7/4/airline-tickets.html"},{"title":"7.4.6 ArrayList equals","text":"7.4.6 ArrayList equalsimport java.util.ArrayList;\r\n            public class isEqual\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //This code is just to test your equals method\r\n                    ArrayList<Integer> list1 = new ArrayList<Integer>();\r\n                    list1.add(10);\r\n                    list1.add(9);\r\n                    list1.add(5);\r\n                    list1.add(2);\r\n                    list1.add(9);\r\n                    ArrayList<Integer> list2 = new ArrayList<Integer>();\r\n                    list2.add(10);\r\n                    list2.add(9);\r\n                    list2.add(5);\r\n                    list2.add(2);\r\n                    list2.add(9);\r\n                    boolean isEqual = equals(list1, list2);\r\n                    System.out.println(\"List 1 is equal to List 2: \"+isEqual);\r\n                    ArrayList<Integer> list3 = new ArrayList<Integer>();\r\n                    list3.add(1);\r\n                    list3.add(9);\r\n                    list3.add(5);\r\n                    list3.add(2);\r\n                    list3.add(9);\r\n                    boolean isEqual2 = equals(list2, list3);\r\n                    System.out.println(\"List 2 is equal to List 3: \"+isEqual2);\r\n                    \r\n                }\r\n                \r\n                //Write your method here!\r\n                public static boolean equals(ArrayList<Integer> array1, ArrayList<Integer> array2)\r\n                {\r\n                    if(array1.size() != array2.size()) return false;\r\n                    int size = array1.size();\r\n                    for(int i = 0; i < size; i++) {\r\n                        if(array1.get(i) != array2.get(i)) return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }","address":"/codehs/java/7/4/arraylist-equals.html"},{"title":"7.4.8 Billboard Top 10","text":"7.4.8 Billboard Top 10public class Musician\r\n{\r\n    private String name;\r\n    private int weeksInTop40;\r\n    private int albumsSold;\r\n    private boolean isPlatinum;;\r\n    \r\n    public Musician(String name, int weeksInTop40, int albumsSold)\r\n    {\r\n        this.name = name;\r\n        this.weeksInTop40 = weeksInTop40;\r\n        this.albumsSold = albumsSold;\r\n        setPlatinum(albumsSold);\r\n    }\r\n    \r\n    public void setPlatinum(int albumsSold)\r\n    {\r\n        if(albumsSold >= 1000000)\r\n        {\r\n            isPlatinum = true;\r\n        }\r\n        else\r\n        {\r\n            isPlatinum = false;\r\n        }\r\n    }\r\n    \r\n    public int getWeeksInTop40()\r\n    {\r\n        return this.weeksInTop40;\r\n    }\r\n    \r\n    public String getName()\r\n    {\r\n        return this.name;\r\n    }\r\n    \r\n    public boolean getIsPlatinum()\r\n    {\r\n        return isPlatinum;\r\n    }\r\n    \r\n    public String toString()\r\n    {\r\n        return this.name;\r\n    }\r\n}public class BillboardTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Billboard top10 = new Billboard();\r\n        top10.add(new Musician(\"Beyonce\", 316, 100000000));\r\n        top10.add(new Musician(\"The Beatles\", 365, 600000000));\r\n        top10.add(new Musician(\"Drake\", 425, 150000000));\r\n        top10.add(new Musician(\"Pink Floyd\", 34, 250000000));\r\n        top10.add(new Musician(\"Mariah Carey\", 287, 200000000));\r\n        top10.add(new Musician(\"Rihanna\", 688, 250000000));\r\n        top10.add(new Musician(\"Queen\", 327, 170000000));\r\n        top10.add(new Musician(\"Ed Sheeran\", 536, 150000000));\r\n        top10.add(new Musician(\"Katy Perry\", 317, 143000000));\r\n        top10.add(new Musician(\"Justin Bieber\", 398, 140000000));\r\n\r\n        //This musician should not be added to the top10 because they don't have enough records sold        \r\n        top10.add(new Musician(\"Karel the Dog\", 332, 60));\r\n        \r\n        //This musician should replace the artist with the least Weeks on the top 40 charts.\r\n        top10.add(new Musician(\"Tracy the Turtle\", 332, 150000000));\r\n        \r\n        //This musician should not replace an artist, but is a Platinum artist\r\n        top10.add(new Musician(\"Alex Eacker\", 100, 23400000));\r\n        \r\n        top10.printTop10();\r\n\r\n\r\n    } \r\n}import java.util.ArrayList;\r\n            public class Billboard\r\n            {\r\n                private ArrayList<Musician> top10 = new ArrayList<Musician>();\r\n             \r\n             \r\n             \r\n                public void add(Musician m) {\r\n                    if(!m.getIsPlatinum()) {\r\n                        System.out.println(\"Sorry, \" + m.getName() + \" does not qualify for Top 10\");\r\n                        return;\r\n                    }\r\n                    if(top10.size() < 10) top10.add(m);\r\n                    else replace(m);\r\n                }\r\n                \r\n                public void replace(Musician toAdd) {\r\n                    int minWeeksTop40 = 1000;\r\n                    int minWeeksTop40Index = 0;\r\n                    for(int i = 0; i < top10.size(); i++) {\r\n                        Musician m = top10.get(i);\r\n                        if(m.getWeeksInTop40() < minWeeksTop40) {\r\n                            minWeeksTop40 = m.getWeeksInTop40();\r\n                            minWeeksTop40Index = i;\r\n                        }\r\n                    }\r\n                    \r\n                    if(toAdd.getWeeksInTop40() <= minWeeksTop40) {\r\n                        System.out.println(\"Sorry, \" + toAdd.getName() + \" has less weeks in the Top 40 than the other musicians.\");\r\n                    } else {\r\n                        System.out.println(\"The musician \" + top10.get(minWeeksTop40Index).getName() + \" has been replaced by \" + toAdd.getName() + \".\");\r\n                        top10.set(minWeeksTop40Index, toAdd);\r\n                    }\r\n                }\r\n             \r\n             \r\n                //Don't make alterations to this method!\r\n                public void printTop10()\r\n                {\r\n                    System.out.println(top10);\r\n                }\r\n            }","address":"/codehs/java/7/4/billboard-top-10.html"},{"title":"7.4.9 User Data Cleanup","text":"7.4.9 User Data Cleanupimport java.util.ArrayList;\r\n\r\npublic class DataPurgeTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<String> emails = new ArrayList<String>();\r\n        addEmails(emails);\r\n        System.out.println(\"List is all emails: \" +DataPurge.containsOnlyEmails(emails));\r\n        DataPurge.removeDuplicates(emails);\r\n        DataPurge.removeAOL(emails);\r\n        System.out.println(emails);\r\n    }\r\n    \r\n    \r\n    \r\n    public static void addEmails(ArrayList<String> emails)\r\n    {\r\n        emails.add(\"tbmaddux@icloud.com\");\r\n        emails.add(\"rfisher@outlook.com\");\r\n        emails.add(\"anicolao@verizon.net\");\r\n        emails.add(\"openldap@me.com\");\r\n        emails.add(\"improv@gmail.com\");\r\n        emails.add(\"alias@sbcglobal.net\");\r\n        emails.add(\"portele@me.com\");\r\n        emails.add(\"doormat@icloud.com\");\r\n        emails.add(\"mailarc@aol.com\");\r\n        emails.add(\"portele@me.com\");\r\n        emails.add(\"rmcfarla@optonline.net\");\r\n        emails.add(\"chrisk@verizon.net\");\r\n        emails.add(\"gordonjcp@aol.com\");\r\n        emails.add(\"improv@gmail.com\");\r\n    }\r\n}import java.util.ArrayList;\r\n\r\n            public class DataPurge\r\n            {\r\n                public static void removeDuplicates(ArrayList<String> list) {\r\n                    ArrayList<String> existing = new ArrayList<String>();\r\n                    \r\n                    for(int i = 0; i < list.size(); i++) {\r\n                        String email = list.get(i);\r\n                        if(existing.indexOf(email) != -1) {\r\n                            list.remove(i);\r\n                            i--;\r\n                        }\r\n                        existing.add(email);\r\n                    }\r\n                }\r\n                public static void removeAOL(ArrayList<String> list) {\r\n                    for(int i = 0; i < list.size(); i++) {\r\n                        if(list.get(i).indexOf(\"@aol.com\") > -1) {\r\n                            System.out.println(\"removing \" + list.get(i));\r\n                            list.remove(i);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n                public static boolean containsOnlyEmails(ArrayList<String> list) {\r\n                    for(int i = 0; i < list.size(); i++) {\r\n                        if(list.get(i).indexOf(\"@\") == -1 || list.get(i).indexOf(\".\") == -1) return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }","address":"/codehs/java/7/4/user-data-cleanup.html"},{"title":"7.5.8 Card Collector FRQ","text":"7.5.8 Card Collector FRQimport java.util.ArrayList;\r\n            public class CardCollection {\r\n                private ArrayList<Card> collection;\r\n                \r\n                public CardCollection(ArrayList<Card> theCollection) {\r\n                    this.collection = theCollection;\r\n                }\r\n                \r\n                public double totalValue() {\r\n                    double total = 0.0;\r\n                    for(int i = 0; i < collection.size(); i++) {\r\n                        total += collection.get(i).getValue();\r\n                    }\r\n                    return total;\r\n                }\r\n                \r\n                public void checkPerfect() {\r\n                    for(int i = 0; i < collection.size(); i++) {\r\n                        if(collection.get(i).getCondition().equals(\"perfect\")) System.out.println(collection.get(i).getName());\r\n                    }\r\n                }\r\n                \r\n                public void orderNumerically() {\r\n                    //horribly inoptimal sort algo, but we haven't learned anything better\r\n                    for(int i = 0; i < collection.size(); i++) {\r\n                        int setNumBase = collection.get(i).getSetNum();\r\n                        for(int j = i + 1; j < collection.size(); j++) {\r\n                            Card toMove = collection.get(j);\r\n                            if(toMove.getSetNum() < setNumBase) {\r\n                                collection.remove(j);\r\n                                collection.add(i, toMove);\r\n                                j--;\r\n                            }\r\n                        }\r\n                    }    \r\n                }\r\n            }","address":"/codehs/java/7/5/card-collector.html"},{"title":"7.5.7 Fantasy Football Roster","text":"7.5.7 Fantasy Football Rosterimport java.util.ArrayList;\r\n            import java.util.Scanner;\r\n            \r\n            public class FantasyFootball\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    ArrayList<String> availablePlayers = new ArrayList<String>();\r\n                    addPlayers(availablePlayers);\r\n                    \r\n                    String[] team = new String[5];\r\n                    \r\n                    Scanner sc = new Scanner(System.in);\r\n                    \r\n                    for(int i = 0; i < 5; i++) {\r\n                        System.out.println(\"Enter Player you would like on your team: \");\r\n                        String player = sc.nextLine();\r\n                        int playerIndex = search(availablePlayers, player);\r\n                        if(playerIndex > -1) {\r\n                            System.out.println(\"Great! That player is added to your team!\");   \r\n                            team[i] = player;\r\n                            availablePlayers.remove(playerIndex);\r\n                        } else {\r\n                            System.out.println(\"That player is not available, please pick another player.\");\r\n                            i--;\r\n                        }\r\n                        System.out.println(\"\");\r\n                    }\r\n                    \r\n                    System.out.println(\"Your team is:\");\r\n                    for(int i = 0; i < 5; i++) {\r\n                        System.out.println(team[i]);\r\n                    }\r\n                }\r\n                \r\n                public static int search(ArrayList<String> array, String player)\r\n                {\r\n                    for(int i = 0; i < array.size(); i++) {\r\n                        if(array.get(i).equals(player)) return i;\r\n                    }\r\n                    return -1;\r\n                }\r\n                \r\n                public static void addPlayers(ArrayList<String> array)\r\n                {\r\n                    array.add(\"Cam Newton\");\r\n                    array.add(\"Antonio Brown\");\r\n                    array.add(\"Leveon Bell\");\r\n                    array.add(\"Patrick Mahomes\");\r\n                    array.add(\"Saquon Barkley\");\r\n                    array.add(\"Mike Evans\");\r\n                    array.add(\"Odell Beckham Jr.\");\r\n                    array.add(\"Travis Kelce\");\r\n                    array.add(\"Baker Mayfield\");\r\n                    array.add(\"Michael Thomas\");\r\n                    array.add(\"Julio Jones\");\r\n                    array.add(\"Ezekial Elliott\");\r\n                    array.add(\"Alvin Kamara\");\r\n                    array.add(\"Davante Adams\");\r\n                    array.add(\"Aaron Rogers\");\r\n                }\r\n            }","address":"/codehs/java/7/5/fantasy-football-roster.html"},{"title":"7.5.6 Linear Search on ArrayList with While Loop","text":"7.5.6 Linear Search on ArrayList with While Loopimport java.util.ArrayList;\r\n\r\npublic class ArrayListSearch\r\n{\r\n    public static void main(String[] args) {\r\n        ArrayList<Double> array = new ArrayList<Double>();\r\n        array.add(4.5);\r\n        array.add(6.7);\r\n        array.add(5.0);\r\n        array.add(2.9);\r\n        array.add(7.0);\r\n        System.out.println(search(array, 5.0));\r\n    }\r\n\r\n    public static int search(ArrayList<Double> array, double key)\r\n    {\r\n        int i = 0;\r\n        while(i < array.size()) {\r\n            if(array.get(i) == key) return i;\r\n            i++;\r\n        }\r\n        return -1;\r\n    }\r\n}","address":"/codehs/java/7/5/linear-search-on-arraylist-with-while-loop.html"},{"title":"7.6.9 Explore Insertion Sort","text":"7.6.9 Explore Insertion Sortimport java.util.Arrays;\r\n\r\n            public class InsertionSort\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] array1 = {9, 8, 7, 6, 5, 4, 3, 2, 1};\r\n                    int[] array2 = {5, 6, 4, 8, 9, 7, 3, 1, 2};\r\n                    \r\n                    System.out.print(\"First array: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                    System.out.println();\r\n            \r\n                    // sort first array\r\n                    insertionSort(array1);\r\n                    // sort second array\r\n                    insertionSort(array2);\r\n            \r\n                    System.out.print(\"First array sorted: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array sorted: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                }\r\n                \r\n                /*\r\n                 * Insertion sort takes in an array of integers and\r\n                 * returns a sorted array of the same integers.\r\n                 */\r\n                public static void insertionSort(int[] arr)\r\n                {\r\n                \r\n                for (int i = 0; i < arr.length; i++) {\r\n                    int value = arr[i];\r\n                    \r\n                    int j;\r\n                    \r\n                    for (j = i - 1; j >= 0 && arr[j] < value; j--) {\r\n                        arr[j + 1] = arr[j];\r\n                    }\r\n            \r\n                    arr[j + 1] = value;\r\n                }\r\n                    \r\n                }\r\n            }","address":"/codehs/java/7/6/explore-insertion-sort.html"},{"title":"7.6.4 Explore Selection Sort","text":"7.6.4 Explore Selection Sortimport java.util.Arrays;\r\n\r\n            public class SelectionSort\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[] array1 = {9, 8, 7, 6, 5, 4, 3, 2, 1};\r\n                    int[] array2 = {5, 6, 4, 8, 9, 7, 3, 1, 2};\r\n                    \r\n                    System.out.print(\"First array: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                    System.out.println();\r\n            \r\n                    // sort first array\r\n                    selectionSort(array1);\r\n                    // sort second array\r\n                    selectionSort(array2);\r\n            \r\n                    System.out.print(\"First array sorted: \");\r\n                    System.out.println(Arrays.toString(array1));\r\n                    System.out.print(\"Second array sorted: \");\r\n                    System.out.println(Arrays.toString(array2));\r\n                }\r\n                \r\n                /*\r\n                 * Selection sort takes in an array of integers and\r\n                 * returns a sorted array of the same integers.\r\n                 */\r\n                public static int[] selectionSort(int[] arr)\r\n                {\r\n                    int swaps = 0;\r\n                    int currentMinIndex;\r\n                    for (int i = 0; i < arr.length - 1; i++)\r\n                    {\r\n                        currentMinIndex = i;\r\n                        for (int j = i + 1; j < arr.length; j++)\r\n                        {\r\n                            if(arr[j] < arr[currentMinIndex])\r\n                            {\r\n                                currentMinIndex = j;\r\n                            }\r\n                        }\r\n                        \r\n                        // swap numbers if needed\r\n                        if (i != currentMinIndex)\r\n                        {\r\n                            int temp = arr[currentMinIndex];\r\n                            arr[currentMinIndex] = arr[i];\r\n                            arr[i] = temp;\r\n                            swaps++;\r\n                        }\r\n                    }\r\n                    \r\n                    // Print out the number of swaps that took place here\r\n                    // before returning arr\r\n                    System.out.println(swaps);\r\n                    return arr;\r\n                }\r\n            }","address":"/codehs/java/7/6/explore-selection-sort.html"},{"title":"7.6.10 Selection Sort vs. Insertion Sort Run Time","text":"7.6.10 Selection Sort vs. Insertion Sort Run TimeJSYK\r\n            This assignment seems to have the wrong type, because you don't have to do anything at first. However,\r\n                it's used by the next task, which is an open-response (and, as such, not on Dinner Coding Time).public class InsertionvSelection\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    /*\r\n                    This program evaluates the speed that Selection and Insertion sort are able to \r\n                    sort different arrays. What do you notice about the difference in speed?\r\n                    Why do you think that's the case?\r\n                    */\r\n                    \r\n                    //Try changing the size of the array by changing the value of makeReverseArray()\r\n                    //Does that change the results?\r\n                    int[] reverse = makeReverseArray(100);\r\n                    System.out.println(\"Reversed Array:\");\r\n                    printArray(reverse);\r\n                    long startTime = System.nanoTime();\r\n                    selectionSort(reverse);\r\n                    long endTime = System.nanoTime();\r\n                    long timeElapsed = endTime - startTime;\r\n                    System.out.println(\"\\nSelection Sort on Reversed Array:\");\r\n                    printArray(reverse);\r\n                    System.out.println(\"Time elapsed: \"+ timeElapsed + \" nanoseconds.\");\r\n                    \r\n                    //Try changing the size of the array by changing the value of makeReverseArray()\r\n                    //Does that change the results?\r\n                    int[] reverse2 = makeReverseArray(100);\r\n                    System.out.println(\"\\nReversed Array:\");\r\n                    printArray(reverse2);\r\n                    long newstartTime = System.nanoTime();\r\n                    insertionSort(reverse2);\r\n                    long newendTime = System.nanoTime();\r\n                    long newtimeElapsed = newendTime - newstartTime;\r\n                    System.out.println(\"\\nInsertion Sort on Reversed Array:\");\r\n                    printArray(reverse2);\r\n                    System.out.println(\"Time elapsed: \"+ newtimeElapsed + \" nanoseconds.\\n\");\r\n                    \r\n                    checkSpeed(timeElapsed, newtimeElapsed);\r\n                    \r\n                    System.out.println(\"\\n==================================================\");\r\n                    //Try changing the size of the array by changing the value of makeAlmostSortedArray()\r\n                    //Does that change the results?\r\n                    int[] almostSorted = makeAlmostSortedArray(100);\r\n                    System.out.println(\"Almost Sorted Array:\");\r\n                    printArray(almostSorted);\r\n                    startTime = System.nanoTime();\r\n                    selectionSort(almostSorted);\r\n                    endTime = System.nanoTime();\r\n                    timeElapsed = endTime - startTime;\r\n                    System.out.println(\"\\nSelection Sort on Almost Sorted Array:\");\r\n                    printArray(almostSorted);\r\n                    System.out.println(\"Time elapsed: \"+ timeElapsed + \" nanoseconds.\");\r\n                    \r\n                    //Try changing the size of the array by changing the value of makeAlmostSortedArray()\r\n                    //Does that change the results?\r\n                    int[] almostSorted2 = makeAlmostSortedArray(100);\r\n                    System.out.println(\"\\nAlmost Sorted Array:\");\r\n                    printArray(almostSorted2);\r\n                    newstartTime = System.nanoTime();\r\n                    insertionSort(almostSorted2);\r\n                    newendTime = System.nanoTime();\r\n                    newtimeElapsed = newendTime - newstartTime;\r\n                    System.out.println(\"\\nInsertion Sort on Almost Sorted Array:\");\r\n                    printArray(almostSorted2);\r\n                    System.out.println(\"Time elapsed: \"+ newtimeElapsed + \" nanoseconds.\\n\");\r\n                    \r\n                    checkSpeed(timeElapsed, newtimeElapsed);\r\n                }\r\n                \r\n                public static void insertionSort(int[] array)\r\n                {\r\n                    for(int index = 1; index < array.length; index++)\r\n                    {\r\n                        int currentIndexValue = array[index];\r\n                        \r\n                        int sortedIndex = index - 1;\r\n                        \r\n                        while( sortedIndex > -1 && array[sortedIndex] > currentIndexValue)\r\n                        {\r\n                            array[sortedIndex + 1] = array[sortedIndex];\r\n                            \r\n                            sortedIndex--;\r\n                        }\r\n                        \r\n                        array[sortedIndex + 1] = currentIndexValue;\r\n                    }\r\n                }\r\n                \r\n                public static void selectionSort(int[] array)\r\n                {\r\n                    for(int index = 0; index < array.length - 1; index++)\r\n                    {\r\n                        int minIndex = index;\r\n                        for(int i = index; i < array.length; i ++)\r\n                        {\r\n                            if(array[i] < array[minIndex])\r\n                            {\r\n                                minIndex = i;\r\n                            }\r\n                        }\r\n                        int tempValue = array[index];\r\n                        array[index] = array[minIndex];\r\n                        array[minIndex] = tempValue;\r\n                    }\r\n                }\r\n                \r\n                 public static void printArray(int[] array)\r\n                {\r\n                    for(int elem: array)\r\n                    {\r\n                        System.out.print(elem+ \" \");\r\n                    }\r\n                    System.out.println();\r\n                }\r\n                \r\n                 /**\r\n                 * This method returns an array in reverse order starting from the parameter number\r\n                 * and going to the value 0.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number. Index 0 is the value number, and \r\n                 * index array.length-1 is 0\r\n                 */\r\n                public static int[] makeReverseArray(int number)\r\n                {\r\n                    int[] array = new int[number];\r\n                    int counter = number;\r\n                    for(int i = 0; i < number; i++)\r\n                    {\r\n                        array[i] = counter;\r\n                        counter--;\r\n                    }\r\n                    return array;\r\n                }\r\n                \r\n                /**\r\n                 * This method returns an array that is almost sorted, but the last index\r\n                 * and last index-1 are switched.\r\n                 * @param number- the length of the desired almost sorted array\r\n                 * @return array - returns an array length number with index array.length - 1 \r\n                 * and array.length- 2 swapped.\r\n                 */\r\n                public static int[] makeAlmostSortedArray(int number)\r\n                {\r\n                    int[] array = new int[number];\r\n                    for(int i= 0; i < number; i++)\r\n                    {\r\n                        array[i] = i+1;\r\n                    }\r\n                    int temp = array[array.length - 1];\r\n                    array[array.length - 1] = array[array.length - 2];\r\n                    array[array.length - 2] = temp;\r\n                    return array;\r\n                    \r\n                }\r\n                \r\n                /**\r\n                 * This method compares the speed of Selection Sort and Insertion Sort and prints\r\n                 * the results depending on which Sort method is faster.\r\n                 * @param selectionTime- the time elapsed during the selection sort\r\n                 * @param insertionTime- the time elapsed during insertion sort\r\n                 */\r\n                public static void checkSpeed(long selectionTime, long insertionTime)\r\n                {\r\n                    if(selectionTime > insertionTime)\r\n                    {\r\n                        System.out.println(\"Insertion time is faster than Selection time by \" + (selectionTime- insertionTime) + \" nanoseconds.\");\r\n                    }\r\n                    else\r\n                    {\r\n                        System.out.println(\"Selection time is faster than Insertion time by \"+ (insertionTime- selectionTime) + \" nanoseconds.\");\r\n            \r\n                    }\r\n                }\r\n                \r\n            }","address":"/codehs/java/7/6/selection-sort-vs-insertion-sort-run-time.html"},{"title":"8.1.6 Complete Chessboard","text":"8.1.6 Complete Chessboardpublic class ChessBoard\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    //Create an 8x8 2D String array called chess.\r\n                    String[][] chess = {\r\n                        {\"Rook\", \"Knight\", \"Bishop\", \"Queen\", \"King\", \"Bishop\", \"Knight\", \"Rook\"},\r\n                        {\"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\",  \"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\"},\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"-\",    \"-\",      \"-\",      \"-\",     \"-\",    \"-\",      \"-\",      \"-\"   },\r\n                        {\"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\",  \"Pawn\", \"Pawn\",   \"Pawn\",   \"Pawn\"},\r\n                        {\"Rook\", \"Knight\", \"Bishop\", \"Queen\", \"King\", \"Bishop\", \"Knight\", \"Rook\"}\r\n                    };\r\n                    \r\n                    //Use this method to print the chess board onto the console\r\n                    print(chess);\r\n                    \r\n            \r\n                }\r\n                \r\n                //Do not make alterations to this method!\r\n                public static void print(String[][] array)\r\n                {\r\n                    for(String[] row: array)\r\n                    {\r\n                        for(String thing: row)\r\n                        {\r\n                            System.out.print(thing + \"\\t\");\r\n                        }\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/8/1/complete-chessboard.html"},{"title":"8.1.5 Manipulating 2D Arrays","text":"8.1.5 Manipulating 2D Arrayspublic class ArrayPractice\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[][] array = {{5, 4, 2, 1, 0}, {523, 63, 2342, 586, 1, 6534, 0}, {10, 9, 2, 0}};\r\n                    //Call the fixArray method three times on this array:\r\n                    fixArray(array, 0, 4, array[0].length);\r\n                    fixArray(array, 1, 6, array[1][0] + array[1][5]);\r\n                    fixArray(array, 2, 3, array.length);\r\n                    \r\n                    \r\n                    print(array);\r\n                }\r\n                \r\n                //Create a method to add the correct value to the array at the correct col, row\r\n                public static void fixArray(int[][] arr, int row, int col, int value)\r\n                {\r\n                    arr[row][col] = value;\r\n                }\r\n                \r\n                \r\n                \r\n                //Do not make alterations to this method!\r\n                public static void print(int[][] array)\r\n                {\r\n                    for(int[] row: array)\r\n                    {\r\n                        for(int num: row)\r\n                        {\r\n                            System.out.print(num + \" \");\r\n                        }\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }","address":"/codehs/java/8/1/manipulating-2d-arrays.html"},{"title":"8.1.7 Tic Tac Toe Board","text":"8.1.7 Tic Tac Toe Boardpublic class TicTacToeTester\r\n{\r\n    //You don't need to alter any of the code in this class!\r\n    //This is just to test that your TicTacToe class is working correctly\r\n    public static void main(String[] args)\r\n    {\r\n        TicTacToe board = new TicTacToe();\r\n        printBoard(board.getBoard());\r\n    }\r\n    \r\n    public static void printBoard(String[][] array)\r\n    {\r\n        for(String[] row: array)\r\n        {\r\n            for(String play: row)\r\n            {\r\n                System.out.print(play+ \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}public class TicTacToe\r\n            {\r\n                private String[][] board;\r\n                \r\n                public TicTacToe() {\r\n                    this.board = new String[][] {\r\n                        {\"-\", \"-\", \"-\"},\r\n                        {\"-\", \"-\", \"-\"},\r\n                        {\"-\", \"-\", \"-\"}\r\n                    };\r\n                }\r\n                \r\n                public String[][] getBoard() {\r\n                    return this.board;\r\n                }\r\n                \r\n            }","address":"/codehs/java/8/1/tic-tac-toe-board.html"},{"title":"8.2.7 Sum Rows in a 2D Array","text":"8.2.7 Sum Rows in a 2D Arraypublic class Sum\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    int[][] array = {{32, 4, 14, 65, 23, 6},\r\n                                    {4, 2, 53, 31, 765, 34},\r\n                                    {64235, 23, 522, 124, 42, 64}};\r\n                                    \r\n                    for(int i = 0; i < array.length; i++) System.out.println(sumRow(array, i));\r\n                }\r\n                \r\n                public static int sumRow(int[][] array, int row)\r\n                {\r\n                    int total = 0;\r\n                    for(int n : array[row]) total += n;\r\n                    return total;\r\n                }\r\n            }","address":"/codehs/java/8/2/sum-rows-in-a-2d-array.html"},{"title":"8.2.8 Tic Tac Toe Methods","text":"8.2.8 Tic Tac Toe Methodspublic class TicTacToeTester\r\n            {\r\n            public static void main(String[] args)\r\n            {\r\n            //This is to help you test your methods. Feel free to add code at the end to check\r\n            //to see if your checkWin method works!\r\n            TicTacToe game = new TicTacToe();\r\n            System.out.println(\"Initial Game Board:\");\r\n            game.printBoard();\r\n            \r\n            //Prints the first row of turns taken\r\n            for(int row = 0; row < 3; row++)\r\n            {\r\n            if(game.pickLocation(0, row))\r\n            {\r\n            game.takeTurn(0, row);\r\n            }\r\n            }\r\n            System.out.println(\"\\nAfter three turns:\");\r\n            game.printBoard();\r\n            \r\n            \r\n            \r\n            }\r\n            }public class TicTacToe\r\n            {\r\n            //copy over your constructor from the Tic Tac Toe Board activity in the previous lesson!\r\n            private int turn;\r\n            private String[][] board;\r\n            \r\n            public TicTacToe() {\r\n            this.board = new String[][] {\r\n            {\"-\", \"-\", \"-\"},\r\n            {\"-\", \"-\", \"-\"},\r\n            {\"-\", \"-\", \"-\"}\r\n            };\r\n            this.turn = 0;\r\n            }\r\n            \r\n            public String[][] getBoard() {\r\n            return this.board;\r\n            }\r\n            \r\n            //this method returns the current turn\r\n            public int getTurn()\r\n            {\r\n            return this.turn;\r\n            }\r\n            \r\n            /*This method prints out the board array on to the console\r\n            */\r\n            public void printBoard()\r\n            {\r\n            for(int i = -1; i < 3; i++) {\r\n            for(int j = -1; j < 3; j++) {\r\n            //leave the top-left corner blank\r\n            if(i<0 && j<0) System.out.print(\" \");\r\n            else if(i<0) System.out.print(j);\r\n            else if(j<0)  System.out.print(i);\r\n            else System.out.print(board[i][j]);\r\n            \r\n            //codehs doesn't like us having the extra padding on the first row for some reason >:(\r\n            if(i > -1 || j < 2) System.out.print(\" \");\r\n            }\r\n            System.out.println();\r\n            }\r\n            }\r\n            \r\n            //This method returns true if space row, col is a valid space\r\n            public boolean pickLocation(int row, int col)\r\n            {\r\n            return board[row][col].equals(\"-\");\r\n            }\r\n            \r\n            //This method places an X or O at location row,col based on the int turn\r\n            public void takeTurn(int row, int col)\r\n            {\r\n            if(turn % 2 == 0) board[row][col] = \"X\";\r\n            else board[row][col] = \"O\";\r\n            \r\n            turn++;\r\n            }\r\n            \r\n            //This method returns a boolean that returns true if a row has three X or O's in a row\r\n            public boolean checkRow()\r\n            {\r\n            for(String[] row : board) {\r\n            int xInRow = 0;\r\n            int oInRow = 0;\r\n            for(String space : row) {\r\n            if(space.equals(\"X\")) xInRow++;\r\n            else xInRow = 0;\r\n            \r\n            if(space.equals(\"O\")) oInRow++;\r\n            else oInRow = 0;\r\n            \r\n            if(xInRow >= 3 || oInRow >= 3) return true;\r\n            }\r\n            }\r\n            return false;\r\n            }\r\n            \r\n            //This method returns a boolean that returns true if a col has three X or O's\r\n            public boolean checkCol()\r\n            {\r\n            for(int row = 0; row < 3; row++) {\r\n            int xInRow = 0;\r\n            int oInRow = 0;\r\n            for(int col = 0; col < 3; col++) {\r\n            if(board[col][row].equals(\"X\")) xInRow++;\r\n            else xInRow = 0;\r\n            \r\n            if(board[col][row].equals(\"O\")) oInRow++;\r\n            else oInRow = 0;\r\n            \r\n            if(xInRow >= 3 || oInRow >= 3) return true;\r\n            }\r\n            }\r\n            return false;\r\n            }\r\n            \r\n            //This method returns a boolean that returns true if either diagonal has three X or O's\r\n            public boolean checkDiag()\r\n            {\r\n            String diag1 = board[0][0] + board[1][1] + board[2][2];\r\n            String diag2 = board[0][2] + board[1][1] + board[0][2];\r\n            \r\n            return diag1.equals(\"XXX\") || diag1.equals(\"OOO\") || diag2.equals(\"XXX\") || diag2.equals(\"OOO\");\r\n            }\r\n            \r\n            //This method returns a boolean that checks if someone has won the game\r\n            public boolean checkWin()\r\n            {\r\n            return checkDiag() || checkCol() || checkRow();\r\n            }\r\n            \r\n            }","address":"/codehs/java/8/2/tic-tac-toe-methods.html"},{"title":"9.1.7 Books","text":"9.1.7 Bookspublic class Fiction extends Book\r\n            {\r\n                private String author;\r\n                \r\n                \r\n                public String getAuthor() {\r\n                    return author;\r\n                }\r\n                \r\n                public void setAuthor(String author) {\r\n                    this.author = author;\r\n                }\r\n            }public class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Fiction hungerGames = new Fiction();\r\n        \r\n        hungerGames.setPages(374);\r\n        hungerGames.setName(\"The Hunger Games\");\r\n        hungerGames.setAuthor(\"Suzanne Collins\");\r\n        \r\n        Dict websters = new Dict();\r\n        websters.setPages(720);\r\n        websters.setName(\"Webster's Dictionary\");\r\n        websters.setWords(171476);\r\n        \r\n        System.out.println(hungerGames.getName());\r\n        System.out.println(websters.getName());\r\n    }\r\n}public class Dict extends Book\r\n{\r\n    private int words;\r\n    \r\n    \r\n    public int getWords() {\r\n        return words;\r\n    }\r\n    \r\n    public void setWords(int words) {\r\n        this.words = words;\r\n    }\r\n}public class Book\r\n{\r\n    \r\n    \r\n    private int pages;\r\n    private String name;\r\n    \r\n    \r\n    public int getPages() {\r\n        return pages;\r\n    }\r\n    \r\n    public void setPages(int pages) {\r\n        this.pages = pages;\r\n    }\r\n    \r\n    public String getName() {\r\n        return name;\r\n    }\r\n    \r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n}","address":"/codehs/java/9/1/books.html"},{"title":"9.1.8 Computers","text":"9.1.8 Computerspublic class Desktop extends Computer\r\n            {\r\n                \r\n            private boolean monitor;\r\n            \r\n                \r\n                \r\n                public boolean hasMonitor() {\r\n                    return this.monitor;\r\n                }\r\n            }public class Laptop extends Computer\r\n{\r\n   private double batteryLife;\r\n   \r\n   public void setBatteryLife(double _batteryLife) {\r\n        this.batteryLife = _batteryLife;\r\n    }\r\n    \r\n    public double getBatteryLife() {\r\n        return this.batteryLife;\r\n    }\r\n}public class Computer\r\n{\r\n\r\n    private int screenSize;\r\n    private int memory;\r\n    \r\n    public void setScreenSize(int _screenSize) {\r\n        this.screenSize = _screenSize;\r\n    }\r\n    \r\n    public int getScreenSize() {\r\n        return this.screenSize;\r\n    }\r\n    \r\n    public void setMemory(int _memory) {\r\n        this.memory = _memory;\r\n    }\r\n    \r\n    public int getMemory() {\r\n        return this.memory;\r\n    }\r\n    \r\n    \r\n\r\n}public class ComputerTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Laptop macBook = new Laptop();\r\n        macBook.setBatteryLife(8.5);\r\n        \r\n        Desktop dell = new Desktop();\r\n        dell.setScreenSize(18);\r\n        \r\n        Computer surface = new Computer();\r\n        surface.setScreenSize(11);\r\n        \r\n        System.out.println(macBook.getBatteryLife());\r\n        System.out.println(dell.getScreenSize());\r\n        System.out.println(surface.getScreenSize());\r\n    }\r\n}","address":"/codehs/java/9/1/computers.html"},{"title":"9.1.9 More Animals!","text":"9.1.9 More Animals!JSYK\r\n            You don't need to fill in AnimalTester.java at all-- the autograder doesn't care about it.public class AnimalTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Add code to test your hierarchy\r\n                }\r\n            }public class Pet extends Animal\r\n{\r\n   private String name;\r\n   private String size;\r\n   \r\n   public void setName(String _name) {\r\n       this.name = _name;\r\n   }\r\n   public String getName() {\r\n       return this.name;\r\n   }\r\n   \r\n   public void setSize(String _size) {\r\n       this.size = _size;\r\n   }\r\n   public String getSize() {\r\n       return this.size;\r\n   }\r\n   \r\n}public class Animal\r\n{\r\n   private String type;\r\n   \r\n   public void setType(String _type) {\r\n       this.type = _type;\r\n   }\r\n   public String getType() {\r\n       return this.type;\r\n   }\r\n   \r\n}public class Fish extends Pet\r\n{\r\n    \r\n    String water;\r\n    public void setWater(String _water) {\r\n       this.water = _water;\r\n   }\r\n   public String setWater() {\r\n       return this.water;\r\n   }\r\n}public class Dog extends Pet\r\n{\r\n   boolean isTrained;\r\n    public void setIsTrained(boolean _isTrained) {\r\n       this.isTrained = _isTrained;\r\n   }\r\n   public boolean getIsTrained() {\r\n       return this.isTrained;\r\n   }\r\n   \r\n}","address":"/codehs/java/9/1/more-animals.html"},{"title":"9.1.6 Person / Student Object","text":"9.1.6 Person / Student Objectpublic class Student extends Person {\r\n\r\n                private int grade;\r\n                private double gpa;\r\n            \r\n                public Student(String name, String birthday, int grade, double gpa){\r\n                    super(name, birthday);\r\n                    this.grade = grade;\r\n                    this.gpa = gpa;\r\n                }\r\n            \r\n                public int getGrade(){\r\n                    return grade;\r\n                }\r\n            \r\n                public double getGpa(){\r\n                    return gpa;\r\n                }\r\n            }public class Person {\r\n\r\n                private String name;\r\n                private String birthday;\r\n            \r\n                public Person (String name, String birthday)\r\n                {\r\n                    this.name = name;\r\n                    this.birthday = birthday;\r\n                }\r\n            \r\n                public String getBirthday(){ \r\n                    return birthday;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n            \r\n            }public class PersonRunner\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Person tom = new Person(\"Thomas Edison\", \" February 11, 1847\");\r\n        \r\n        System.out.println(tom.getName());\r\n        System.out.println(tom.getBirthday());\r\n        \r\n        Student albert = new Student(\"Albert Einstein\", \"March 14, 1879\", 12, 5.0);\r\n        \r\n        System.out.println(albert.getName());\r\n        System.out.println(albert.getBirthday());\r\n        System.out.println(albert.getGrade());\r\n        System.out.println(albert.getGpa());\r\n    }\r\n}","address":"/codehs/java/9/1/person-student-object.html"},{"title":"9.2.9 Clothing Store","text":"9.2.9 Clothing Storepublic class Sweatshirt extends Clothing\r\n            {\r\n            \r\n            private boolean hood;\r\n            \r\n            public Sweatshirt(String size, String color, boolean hasHood) {\r\n                super(size, color);\r\n                this.hood = hasHood;\r\n            }\r\n            \r\n            public boolean hasHood() {\r\n                return hood;\r\n            }\r\n            }public class TShirt extends Clothing\r\n{\r\n    private String fabric;\r\n    \r\n    public TShirt(String size, String color, String fabric) {\r\n        super(size, color);\r\n        this.fabric = fabric;\r\n    }\r\n    \r\n    public String getFabric() {\r\n        return fabric;\r\n    }\r\n}public class Clothing\r\n{\r\n    private String size;\r\n    private String color;\r\n    \r\n    public Clothing(String size, String color) {\r\n        this.size = size;\r\n        this.color = color;\r\n    }\r\n    \r\n    public String getSize() {\r\n        return size;\r\n    }\r\npublic String getColor() {\r\n    return color;\r\n}\r\n}public class Jeans extends Clothing\r\n{\r\n    public Jeans(String size) {\r\n        super(size, \"blue\");\r\n    }\r\n    \r\n}public class ClothingTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(new Sweatshirt(\"L\", \"blue\", false));\r\n        System.out.println(new Jeans(\"XS\"));\r\n        System.out.println(new Clothing(\"M\", \"red\"));\r\n        System.out.println(new Jeans(\"L\"));\r\n    }\r\n}","address":"/codehs/java/9/2/clothing-store.html"},{"title":"9.2.8 Foods","text":"9.2.8 Foodspublic class Fruit extends HealthyFood\r\n            {\r\n                private boolean isLocal;\r\n                private String color;\r\n                \r\n                public Fruit(String foodName, int calories, boolean isLocal, String foodColor) {\r\n                    super(foodName, calories, \"Fruit\");\r\n                    this.isLocal = isLocal;\r\n                    this.color = foodColor;\r\n                }\r\n                \r\n                public boolean isLocal() {\r\n                    return this.isLocal;\r\n                    }\r\n                public String getColor() {\r\n                    return this.color;\r\n                }\r\n            }public class FoodTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(new Food(\"Apple\", 2000));\r\n        System.out.println(new HealthyFood(\"Cake\", 2000, \"Meat\"));\r\n    }\r\n}public class HealthyFood extends Food\r\n{\r\n    private String group;\r\n    \r\n    public HealthyFood(String foodName, int calories, String foodGroup) {\r\n        super(foodName, calories);\r\n        this.group = foodGroup;\r\n    }\r\n    \r\n    public String getGroup() {\r\n        return this.group;\r\n    }\r\n}public class Food\r\n{\r\n    private String name;\r\n    private int calories;\r\n    \r\n    public Food (String foodName, int calories) {\r\n        this.name = foodName;\r\n        this.calories = calories;\r\n    }\r\n    \r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n    public int getCal() {\r\n        return this.calories;\r\n    }\r\n    \r\n    public String toString() {\r\n        return name + \" has \" + calories + \" calories\";\r\n    }\r\n}","address":"/codehs/java/9/2/foods.html"},{"title":"9.2.7 Instruments","text":"9.2.7 Instrumentspublic class Wind extends Instrument\r\n            {\r\n                private boolean usesReed;\r\n                \r\n                public Wind(String name, String family, boolean usesReed) {\r\n                    super(name, family);\r\n                    this.usesReed = usesReed;\r\n                }\r\n             \r\n            }public class InstrumentTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        /**\r\n         * Don't Change This Tester Class!\r\n         * \r\n         * When you are finished, this should run without error.\r\n         */ \r\n        Wind tuba = new Wind(\"Tuba\", \"Brass\", false);\r\n        Wind clarinet = new Wind(\"Clarinet\", \"Woodwind\", true);\r\n        \r\n        Strings violin = new Strings(\"Violin\", true);\r\n        Strings harp = new Strings(\"Harp\", false);\r\n        \r\n        System.out.println(tuba);\r\n        System.out.println(clarinet);\r\n        \r\n        System.out.println(violin);\r\n        System.out.println(harp);\r\n    }\r\n}public class Strings extends Instrument\r\n{\r\n     private boolean usesBow;\r\n    \r\n    public Strings(String name, boolean usesBow) {\r\n        super(name, \"Strings\");\r\n        this.usesBow = usesBow;\r\n    }\r\n       \r\n}public class Instrument\r\n{\r\n    \r\n    private String name;\r\n    private String family;\r\n    \r\n    public Instrument(String name, String family) {\r\n        this.name = name;\r\n        this.family = family;\r\n    }\r\n    \r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n    \r\n    public String getFamily() {\r\n        return this.family;\r\n    }\r\n    \r\n    public String toString() {\r\n        return this.name + \" is a member of the \" + this.family + \" family.\";\r\n    }\r\n}","address":"/codehs/java/9/2/instruments.html"},{"title":"9.2.6 Students","text":"9.2.6 StudentsJSYK\r\n    You don't need to fill in StudentTester.java at all-- the autograder doesn't care about it. It's just filled in here for posterity.public class Student\r\n            {\r\n                private String name;\r\n                private int classYear;\r\n               \r\n               public Student(String name, int classYear) {\r\n                   this.name = name;\r\n                   this.classYear = classYear;\r\n               }\r\n               \r\n               \r\n                public String getName(){\r\n                   return name;\r\n                }\r\n               \r\n                public int getClassYear(){\r\n                   return classYear;\r\n                }\r\n               \r\n                public String toString(){\r\n                    return name + \", class of \" + classYear;\r\n                }\r\n            }public class StudentTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        \r\n        /**\r\n         * Create a student in the class of 2020\r\n         */\r\n         Student student = new Student(\"Quin\", 2020);\r\n         \r\n         \r\n         /**\r\n         * Create a student athlete in the class of 2022\r\n         * that is eligible and plays soccer.\r\n         */\r\n         StudentAthlete jock = new StudentAthlete(\"Elle\", 2022, \"Soccer\", true);\r\n         \r\n         \r\n         System.out.println(student);\r\n         System.out.println(jock);\r\n    }\r\n}public class StudentAthlete extends Student\r\n{\r\n    private String sport;\r\n    private boolean eligible;\r\n    \r\n   public StudentAthlete(String name, int classYear, String sport, boolean eligible) {\r\n       super(name, classYear);\r\n       this.sport = sport;\r\n       this.eligible = eligible;\r\n   }\r\n   \r\n   \r\n   public String getSport(){\r\n       return sport;\r\n   }\r\n   \r\n   public boolean isEligible(){\r\n       return eligible;\r\n   }\r\n    \r\n    @Override\r\n    public String toString(){\r\n        return super.getName() + \", class of \" + super.getClassYear() +\r\n            \", plays \" + sport;\r\n    }\r\n}","address":"/codehs/java/9/2/students.html"},{"title":"9.3.6 Dogs Bark","text":"9.3.6 Dogs Barkpublic class DogTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(new Dog(\"Fido\"));\r\n                    System.out.println(new LoudDog(\"Tib\"));\r\n                }\r\n            }public class LoudDog extends Dog\r\n{\r\n   \r\n   public LoudDog(String name){\r\n       super(name);\r\n   }\r\n   \r\n   public String speak(){\r\n       return \"BARK!\";\r\n   }\r\n   \r\n   public String toString(){\r\n      return super.getName() + \" is loud and likes to \" + speak();\r\n   }\r\n}public class Dog\r\n{\r\n    private String name;\r\n    \r\n     public Dog(String name){\r\n       this.name = name;\r\n   }\r\n   \r\n   public String getName(){\r\n       return name;\r\n   }\r\n   \r\n   public String speak(){\r\n       return \"Bark!\";\r\n   }\r\n   \r\n   public String toString(){\r\n       return name + \" likes to \" + speak();\r\n   }\r\n}","address":"/codehs/java/9/3/dogs-bark.html"},{"title":"9.3.7 Electric Cars","text":"9.3.7 Electric Carspublic class CarTester\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    // Create a Car object\r\n                    Car car = new Car(\"Toyota\", \"20\");\r\n                    // Print out the model\r\n                    System.out.println(car.getModel());\r\n                    // Print out the MPG\r\n                    System.out.println(car.getMPG());\r\n                    // Print the object\r\n                    System.out.println(car);\r\n                    // Create an ElectricCar object\r\n                    ElectricCar elecCar = new ElectricCar(\"Tesla\");\r\n                    // Print out the model\r\n                    System.out.println(elecCar.getModel());\r\n                    // Print out the MPG\r\n                    System.out.println(elecCar.getMPG());\r\n                    // Print the object\r\n                    System.out.println(elecCar);\r\n                }\r\n            }public class Car {\r\n\r\n                //This code is complete\r\n                private String model;\r\n                private String mpg;\r\n            \r\n                public Car(String model, String mpg){\r\n                    this.model = model;\r\n                    this.mpg = mpg;\r\n                }\r\n            \r\n                public String getModel(){\r\n                    return model;\r\n                }\r\n            \r\n                public String getMPG(){\r\n                    return mpg;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return model + \" gets \" + mpg + \" mpg.\";\r\n                }\r\n            }public class ElectricCar extends Car {\r\n\r\n                // Complete the constructor\r\n                public ElectricCar(String model){\r\n                   super(model, \"Electric cars do not calculate MPG.\");\r\n                }\r\n            \r\n                // Override the getMPG here.\r\n                // It should return: \"Electric cars do not calculate MPG.\r\n                @Override \r\n                public String getMPG() {\r\n                    return \"Electric cars do not calculate MPG.\";\r\n                }\r\n                \r\n            \r\n                // Override the toString() here.\r\n                // (model) is an  electric car.\r\n                @Override\r\n                public String toString() {\r\n                    return super.getModel() + \" is an electric car.\";\r\n                }\r\n                \r\n            }","address":"/codehs/java/9/3/electric-cars.html"},{"title":"9.3.8 Online Companies","text":"9.3.8 Online Companiespublic class Company {\r\n    \r\n                private String name;\r\n                private String streetAddress;\r\n                private String city;\r\n                private String state;\r\n            \r\n                // Set missing values to null\r\n                public Company(String name){\r\n                    this.streetAddress = null;\r\n                    this.name = name;\r\n                    this.city = null;\r\n                    this.state = null;\r\n                }\r\n                \r\n            \r\n                public Company(String name, String streetAddress, String city, String state){\r\n                   this.name = name;\r\n                   this.streetAddress = streetAddress;\r\n                   this.city = city;\r\n                   this.state = state;\r\n                }\r\n            \r\n                public String getName(){\r\n                  return name;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String address(){\r\n                   return streetAddress + \"\\n\" + city + \", \" + state;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * Widget Company\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String toString(){\r\n                   return name + \"\\n\" + this.address();\r\n                }\r\n            }public class OnlineCompany extends Company{\r\n\r\n                private String webAddress;\r\n            \r\n                public OnlineCompany(String name, String webAddress){\r\n                    super(name);\r\n                    this.webAddress = webAddress;\r\n                }\r\n            \r\n                //Return the website address\r\n            \r\n                public String address(){\r\n                    return webAddress;\r\n                }\r\n            \r\n                /**\r\n                * Remember To get name from superclass, use super.getName()\r\n                * \r\n                * Example Output:\r\n                * CodeHS\r\n                * www.codehs.com\r\n                */\r\n                \r\n                public String toString(){\r\n                    return super.getName() + \"\\n\" + webAddress;\r\n                }\r\n            }public class CompanyTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println((new Company(\"McDonalds\", \"123 Main Street\", \"Anytown\", \"USA\")).toString());\r\n        System.out.println((new OnlineCompany(\"Google\", \"https://google.com\")).toString());\r\n    }\r\n}","address":"/codehs/java/9/3/online-companies.html"},{"title":"9.4.7 Bank Accounts","text":"9.4.7 Bank Accountspublic class StudentAccount extends Account\r\n            {\r\n                // Complete this class with Override methods.   \r\n                public StudentAccount(String clientName, double openingBal){\r\n                   super(clientName, openingBal);\r\n                }\r\n                \r\n                // Students get a $1 bonus on depositing\r\n                public void deposit(double amount){\r\n                   super.deposit(amount + 1);\r\n                   \r\n                }\r\n                \r\n                \r\n                // Students pay a $2 fee for withdrawing\r\n                public void withdrawal(double amount){\r\n                   super.withdrawal(amount + 2);\r\n                   \r\n                }\r\n                \r\n                \r\n                // toString() Should read: Student account with a balance of $__.__\r\n                public String toString(){\r\n                   return \"Student account with a balance of $\" + super.getBalance();\r\n                   \r\n                }\r\n            }public class Account\r\n{\r\n    private String name;\r\n    private double balance;\r\n    \r\n    // Initialize values in constructor\r\n    public Account(String clientName, double openingBal){\r\n       name = clientName;\r\n       balance = openingBal;\r\n    }\r\n    \r\n    // Complete the accessor method\r\n    public double getBalance(){\r\n        \r\n        return balance;\r\n    }\r\n    \r\n    // Add amount to balance\r\n    public void deposit(double amount){\r\n       balance += amount;\r\n       \r\n    }\r\n    \r\n    // Subtract amount from balance\r\n    public void withdrawal(double amount){\r\n        balance -= amount;\r\n        \r\n    }\r\n    \r\n    // Should read: Regular account with a balance of $__.__\r\n    public String toString(){\r\n       return \"Regular account with a balance of $\" + balance;\r\n       \r\n    }\r\n}public class BankTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        StudentAccount s = new StudentAccount(\"Jem\", 300);\r\n        System.out.println(s);\r\n        s.deposit(20);\r\n        System.out.println(s);\r\n    }\r\n}","address":"/codehs/java/9/4/bank-accounts.html"},{"title":"9.4.8 Employees","text":"9.4.8 Employeespublic class HourlyEmployee extends Employee {\r\n\r\n                private double hoursPerWeek;\r\n            \r\n                // Call the Employee constructor and pass it a calculated annual salary\r\n                \r\n                public HourlyEmployee(String name, double hourlySalary, double hoursPerWeek){\r\n                    super(name, hourlySalary*hoursPerWeek*52);\r\n                    this.hoursPerWeek = hoursPerWeek;\r\n                    \r\n                    \r\n                }\r\n                \r\n                // Get the annual salary from the superclass and convert it back\r\n                // to hourly.\r\n                public double getHourlySalary(){\r\n                    return super.getAnnualSalary() / 52 / hoursPerWeek;\r\n                }\r\n            \r\n                // Use the input to set the annual salary in the superclass\r\n                \r\n                public void setHourlySalary(double hourlySalary){\r\n                   super.setAnnualSalary(hourlySalary*hoursPerWeek*52);\r\n                }\r\n            \r\n                /**\r\n                 * Example output:\r\n                 * Mike makes $18.0 per hour\r\n                 */\r\n                 \r\n                public String toString(){\r\n                    return super.getName() + \" makes $\" + getHourlySalary() + \" per hour\";   \r\n                }\r\n            }public class Employee {\r\n\r\n                private String name;\r\n                private double salary;\r\n            \r\n                public Employee(String name, double annualSalary){\r\n                   this.name = name;\r\n                   this.salary = annualSalary;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n                public double getAnnualSalary(){\r\n                    return salary;\r\n                }\r\n            \r\n                public void setAnnualSalary(double annualSalary){\r\n                    salary = annualSalary;\r\n                }\r\n            \r\n                /**\r\n                 * Example output:\r\n                 * Mr. Karel makes $75000.0 per year\r\n                 */\r\n                 \r\n                public String toString(){\r\n                    return name + \" makes $\" + salary + \" per year\"; \r\n                }\r\n            }public class EmployeeTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        HourlyEmployee eric = new HourlyEmployee(\"Eric B\", 13.0, 28);\r\n        System.out.println(eric);\r\n        eric.setHourlySalary(15.0);\r\n        System.out.println(eric);\r\n    }\r\n}","address":"/codehs/java/9/4/employees.html"},{"title":"9.4.6 Squares","text":"9.4.6 Squarespublic class Square extends Rectangle {\r\n\r\n                // Call to the Rectangle constructor\r\n                public Square(double sideLength){\r\n                   super(sideLength, sideLength);\r\n                }\r\n            \r\n                // Return either the width or height from the superclass\r\n                public double getSideLength(){\r\n                    return super.getHeight();\r\n                }\r\n            \r\n                //Set both the width and height in the superclass\r\n                public void setSideLength(double sideLength){\r\n                    super.setHeight(sideLength);\r\n                    super.setWidth(sideLength);\r\n                }\r\n                \r\n                // Get the width and/or the height from the superclass\r\n                public double area(){\r\n                    return super.getHeight() * super.getWidth();\r\n                }\r\n            \r\n                // Override to read: Square with side lengths ______\r\n                public String toString(){\r\n                    return \"Square with side lengths \" + super.getHeight();\r\n                }\r\n            }public class Rectangle {\r\n\r\n                private double width;\r\n                private double height;\r\n            \r\n                public Rectangle(double w, double h){\r\n                    width = w;\r\n                    height = h;\r\n                }\r\n            \r\n                public double getWidth(){\r\n                    return width;\r\n                }\r\n            \r\n                public void setWidth(double w){\r\n                    width = w;\r\n                }\r\n            \r\n                public double getHeight(){\r\n                    return height;\r\n                }\r\n            \r\n                public void setHeight(double h){\r\n                    height = h;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return \"Rectangle with width \" + width + \" and height \" + height;\r\n                }\r\n            }public class SquareTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Square sq = new Square(3.0);\r\n        System.out.println(sq);\r\n        sq.setSideLength(4.0);\r\n        System.out.println(sq);\r\n    }\r\n}","address":"/codehs/java/9/4/squares.html"},{"title":"9.4.9 Student Test Scores","text":"9.4.9 Student Test Scorespublic class StudentTest {\r\n\r\n                private int mathScore;\r\n                private int elaScore;\r\n                private String name;\r\n            \r\n                public StudentTest(String name, int mathScore, int elaScore){\r\n                   this.name = name;\r\n                   this.mathScore = mathScore;\r\n                   this.elaScore = elaScore;\r\n                }\r\n            \r\n                public int getMathScore() {\r\n                    return mathScore;\r\n                }\r\n            \r\n                public void setMathScore(int mathScore) {\r\n                    this.mathScore = mathScore;\r\n                }\r\n            \r\n                public int getElaScore() {\r\n                    return elaScore;\r\n                }\r\n            \r\n                public void setElaScore(int elaScore) {\r\n                    this.elaScore = elaScore;\r\n                }\r\n            \r\n                public String getName() {\r\n                    return name;\r\n                }\r\n            \r\n            }public class HSStudent extends StudentTest {\r\n\r\n                private int serviceHours;\r\n            \r\n                public HSStudent(String name, int mathScore, int elaScore, int serviceHours){\r\n                   super(name, mathScore, elaScore);\r\n                   this.serviceHours = serviceHours;\r\n                   \r\n                }\r\n            \r\n                public int getServiceHours(){\r\n                   return serviceHours;\r\n                }\r\n            \r\n                public void setServiceHours(int serviceHours){\r\n                   this.serviceHours += serviceHours;\r\n                   \r\n                }\r\n            \r\n                // If math score is at least 525, return true\r\n                public boolean passMath(){\r\n                    return super.getMathScore() >= 525;\r\n                    \r\n                }\r\n            \r\n                // If ela score is at least 560, return true\r\n                public boolean passEla(){\r\n                   return super.getElaScore() >= 525;\r\n                   \r\n                }\r\n            \r\n                // If service hours are at least 75, return true\r\n                public boolean completeService(){\r\n                    return serviceHours >= 75;\r\n                    \r\n                }\r\n            \r\n                // If the student has passed math, passed ela, and completed\r\n                // service hours, return true.\r\n                public boolean gradQualify(){\r\n                   return passMath() && passEla() && completeService();\r\n                   \r\n                }\r\n            \r\n                // If the student has qualified for graduation, print:\r\n                // (name) has qualified for graduation.\r\n                // Otherwise print:\r\n                // (name) has not yet qualified for graduation.\r\n                // Where (name) is the student's name.\r\n                public String toString(){\r\n                    if (gradQualify()){\r\n                        return super.getName() + \" has qualified for graduation.\";\r\n                    }\r\n            \r\n                    return super.getName() + \" has not yet qualified for graduation.\";\r\n                }\r\n            }import java.util.Scanner;\r\n\r\npublic class StudentTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        // Prompt the user for name, test scores, and service hours\r\n        System.out.println(\"Please enter the student name: \");\r\n        String name = sc.nextLine();\r\n        \r\n        System.out.println(\"Please enter the Math Score: \");\r\n        int mathScore = sc.nextInt();\r\n        \r\n        System.out.println(\"Please enter the Ela Score: \");\r\n        int elaScore = sc.nextInt();\r\n        \r\n        System.out.println(\"Please enter the Service Hours: \");\r\n        int hours = sc.nextInt();\r\n        \r\n        // Create a HSStudent object\r\n        HSStudent student = new HSStudent(name, mathScore, elaScore, hours);\r\n        \r\n        // Print the results\r\n        System.out.println(\"Pass Math? \" + student.passMath());\r\n        System.out.println(\"Pass ELA? \" + student.passEla());\r\n        System.out.println(\"Completed Service Hours? \" + student.completeService());\r\n        \r\n        System.out.println(student.toString());\r\n    }\r\n}","address":"/codehs/java/9/4/student-test-scores.html"},{"title":"9.5.9 Assignments","text":"9.5.9 Assignmentspublic class Project extends Assignment {\r\n                private String dueDate;\r\n                private boolean groups;\r\n                \r\n                public Project(String name, double availablePoints, double earnedPoints, String dueDate, boolean groups) {\r\n                    super(name, availablePoints, earnedPoints);\r\n                    this.dueDate = dueDate;\r\n                    this.groups = groups;\r\n                }\r\n                \r\n                public void setDueDate(String dueDate) {\r\n                this.dueDate = dueDate;\r\n            }\r\n            public String getDueDate() {\r\n                return this.dueDate;\r\n            }\r\n            public void setGroups(boolean groups) {\r\n                this.groups = groups;\r\n            }\r\n            public boolean getGroups() {\r\n                return this.groups;\r\n            }\r\n            }import java.util.*;\r\n\r\npublic class AssignmentRunner {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        ArrayList<Assignment> assignments = new ArrayList<Assignment>();\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        //keep looping until it's exited by the `break` statement\r\n        while(true) {\r\n            System.out.print(\"Please enter an assignment name (exit to quit): \");\r\n            String name = sc.nextLine();\r\n            if(name.equals(\"exit\")) break;\r\n            \r\n            System.out.print(\"Please enter the available points: \");\r\n            double pointTotal = sc.nextDouble();\r\n            sc.nextLine(); /*consume the ghost line formed by the scanner's tokenizer*/\r\n            \r\n            System.out.print(\"Please enter the earned points: \");\r\n            double pointsEarned = sc.nextDouble();\r\n            sc.nextLine(); /*consume the ghost line formed by the scanner's tokenizer*/\r\n            \r\n            System.out.print(\"Is this a (t)est or (p)roject: \");\r\n            String type = sc.nextLine();\r\n            \r\n            if(type.equals(\"t\")) {\r\n                System.out.print(\"Please enter the test date: \");\r\n                String testDate = sc.nextLine();\r\n                \r\n                Test test = new Test(name, pointTotal, pointsEarned, testDate);\r\n                assignments.add(test);\r\n            } else {\r\n                System.out.print(\"Please enter the due date: \");\r\n                String dueDate = sc.nextLine();\r\n                \r\n                System.out.print(\"Group project? true or false: \");\r\n                boolean groups = sc.nextBoolean();\r\n                sc.nextLine(); /*consume the ghost line formed by the scanner's tokenizer*/\r\n                \r\n                Project project = new Project(name, pointTotal, pointsEarned, dueDate, groups);\r\n                assignments.add(project);\r\n            }\r\n        }\r\n        System.out.print(\"Your average: \");\r\n        System.out.print(average(assignments));\r\n\r\n\r\n    }\r\n\r\n    public static double average(ArrayList<Assignment> assignments) {\r\n       double totalPointsEarned = 0;\r\n       double totalPointsAvailable = 0;\r\n       \r\n       for(Assignment a : assignments) {\r\n           totalPointsEarned += a.getEarnedPoints();\r\n           totalPointsAvailable += a.getAvailablePoints();\r\n       }\r\n       \r\n       return 100 * (totalPointsEarned / totalPointsAvailable);\r\n       \r\n    }\r\n}public class Assignment\r\n{\r\n    private String name;\r\n    private double availablePoints;\r\n    private double earnedPoints;\r\n    \r\n    public Assignment(String name, double availablePoints, double earnedPoints) {\r\n        this.name = name;\r\n        this.availablePoints = availablePoints;\r\n        this.earnedPoints = earnedPoints;\r\n    }\r\n    \r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n    \r\n    public void setAvailablePoints(double availablePoints) {\r\n        this.availablePoints = availablePoints;\r\n    }\r\n    public double getAvailablePoints() {\r\n        return this.availablePoints;\r\n    }\r\n    \r\n    public void setEarnedPoints(double earnedPoints) {\r\n        this.earnedPoints = earnedPoints;\r\n    }\r\n    public double getEarnedPoints() {\r\n        return this.earnedPoints;\r\n    }\r\n\r\n}public class Test extends Assignment {\r\n                private String testDate;\r\n                \r\n                public Test(String name, double availablePoints, double earnedPoints, String testDate) {\r\n                    super(name, availablePoints, earnedPoints);\r\n                    this.testDate = testDate;\r\n                }\r\n                \r\n                public void setTestDate(String testDate) {\r\n                    this.testDate = testDate;\r\n                }\r\n                public String getTestDate() {\r\n                    return this.testDate;\r\n                }\r\n                \r\n            }","address":"/codehs/java/9/5/assignments.html"},{"title":"9.5.7 Creating .equals","text":"9.5.7 Creating .equalspublic class Student extends Person {\r\n\r\n                private int grade;\r\n            \r\n                public Student(String name, String birthday, int grade){\r\n                    super(name, birthday);\r\n                    this.grade = grade;\r\n                }\r\n            \r\n                public int getGrade(){\r\n                    return grade;\r\n                }\r\n            }public class Person {\r\n\r\n                private String name;\r\n                private String birthday;\r\n            \r\n                public Person (String name, String birthday)\r\n                {\r\n                    this.name = name;\r\n                    this.birthday = birthday;\r\n                }\r\n            \r\n                public String getBirthday(){\r\n                    return birthday;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n                public boolean equals(Person other) {\r\n                    return other.getBirthday().equals(birthday) && other.getName().equals(name);\r\n                }\r\n                \r\n            }import java.util.Scanner;\r\n\r\npublic class PersonTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        System.out.print(\"Please enter the Person's name: \");\r\n        String p1name = sc.nextLine();\r\n        System.out.print(\"Please enter the Person's birthday: \");\r\n        String p1bday = sc.nextLine();\r\n        \r\n        Person p1 = new Person(p1name, p1bday);\r\n        \r\n        System.out.print(\"Please enter the Student's name: \");\r\n        String p2name = sc.nextLine();\r\n        System.out.print(\"Please enter the Student's birthday: \");\r\n        String p2bday = sc.nextLine();\r\n        System.out.print(\"Please enter the Student's grade: \");\r\n        int    p2grade = sc.nextInt();\r\n        \r\n        Student p2 = new Student(p2name, p2bday, p2grade);\r\n        \r\n        System.out.println(\"Same: \" + p1.equals(p2));\r\n\r\n        \r\n    }\r\n}","address":"/codehs/java/9/5/creating-equals.html"},{"title":"9.5.8 Online Companies Revisited","text":"9.5.8 Online Companies Revisitedpublic class OnlineCompany extends Company{\r\n\r\n                private String webAddress;\r\n            \r\n                public OnlineCompany(String name, String webAddress){\r\n                    super(name);\r\n                    this.webAddress = webAddress;\r\n                }\r\n            \r\n                //Return the website address\r\n            \r\n                public String address(){\r\n                    return webAddress;\r\n                }\r\n            \r\n                /**\r\n                * Remember: To get name from superclass, use super.getName()\r\n                * Example Output:\r\n                * CodeHS\r\n                * www.codehs.com\r\n                */\r\n                \r\n                public String toString(){\r\n                    return super.getName() + \"\\nWebsite: \" + webAddress;   \r\n                }\r\n            }public class Company {\r\n    \r\n                private String name;\r\n                private String streetAddress;\r\n                private String city;\r\n                private String state;\r\n            \r\n                // Set missing values to null\r\n                public Company(String name){\r\n                    this.name = name;\r\n                    this.streetAddress = null;\r\n                    this.city = null;\r\n                    this.state = null;\r\n                }\r\n                \r\n            \r\n                public Company(String name, String streetAddress, String city, String state){\r\n                    this.name = name;\r\n                    this.streetAddress = streetAddress;\r\n                    this.city = city;\r\n                    this.state = state;\r\n                }\r\n            \r\n                public String getName(){\r\n                    return name;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String address(){\r\n                   return streetAddress;\r\n                }\r\n            \r\n                /**\r\n                * Example output:\r\n                * Widget Company\r\n                * 123 Main St\r\n                * Springfield, OH\r\n                */\r\n                public String toString(){\r\n                   return name + \"\\n\" + streetAddress + \"\\n\" + city + \", \" + state;\r\n                }\r\n            }import java.util.*;\r\n\r\npublic class CompanyTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        ArrayList<Company> companies = new ArrayList<Company>(); \r\n        \r\n        //keep looping until it is broken by the `break` statement\r\n        while(true) {\r\n            System.out.print(\"Please enter a company name, enter 'exit' to quit: \");\r\n            String companyName = sc.nextLine();\r\n            if(companyName.equals(\"exit\")) break;\r\n            \r\n            System.out.print(\"Is this an online company, 'yes' or 'no': \");\r\n            String online = sc.nextLine();\r\n            if(online.equals(\"yes\")) {\r\n                System.out.print(\"Please enter the website address: \");\r\n                String website = sc.nextLine();\r\n                \r\n                OnlineCompany onlineCompany = new OnlineCompany(companyName, website);\r\n                companies.add(onlineCompany);\r\n            } else {\r\n                System.out.print(\"Please enter the street address: \");\r\n                String streetAddress = sc.nextLine();\r\n                System.out.print(\"Please enter the city address: \");\r\n                String city = sc.nextLine();\r\n                System.out.print(\"Please enter the state address: \");\r\n                String state = sc.nextLine();\r\n                \r\n                Company company = new Company(companyName, streetAddress, city, state);\r\n                companies.add(company);\r\n            }\r\n        }\r\n        \r\n        //print out arraylist\r\n        for(Company company : companies) {\r\n            System.out.println(company.toString());\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","address":"/codehs/java/9/5/online-companies-revisited.html"},{"title":"9.5.6 Pies","text":"9.5.6 Piespublic class Pie {\r\n\r\n                private String type;\r\n                private int slices;\r\n                \r\n                public Pie (String type, int slices) {\r\n                    this.type = type;\r\n                    this.slices = slices;\r\n                }\r\n                \r\n                public int getSlices (){\r\n                    return slices;\r\n                }\r\n                \r\n                public void eatSlice(){\r\n                    slices --;\r\n                }\r\n                \r\n                public String getType(){\r\n                    return type;\r\n                }\r\n            }public class PumpkinPie extends Pie {\r\n    \r\n                private boolean canned;\r\n            \r\n                public PumpkinPie (int slices, boolean canned) \r\n                {\r\n                    super(\"Pumpkin\", slices);\r\n                    this.canned = canned;\r\n                }\r\n                \r\n                public boolean canned()\r\n                {\r\n                    return canned;\r\n                }\r\n                \r\n            }public class ApplePie extends Pie {\r\n\r\n                public ApplePie (int slices) \r\n                {\r\n                    super(\"Apple\", slices);\r\n                }\r\n                \r\n                public boolean hasSlice()\r\n                {\r\n                    return super.getSlices() > 0;\r\n                }\r\n                \r\n                @Override\r\n                public void eatSlice()\r\n                {\r\n                    if (this.hasSlice())\r\n                    {\r\n                        super.eatSlice();\r\n                    }\r\n                }\r\n            }import java.util.ArrayList;\r\n\r\npublic class PieTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Pie[] pies = new Pie[] {\r\n            new Pie(\"Blueberry\", 3),\r\n            new PumpkinPie(4, true),\r\n            new ApplePie(12)\r\n        };\r\n        \r\n        for(Pie pie : pies) {\r\n            System.out.println(\"Pie: \" + pie.getType());\r\n        }\r\n    }\r\n}","address":"/codehs/java/9/5/pies.html"},{"title":"9.6.7 Cars","text":"9.6.7 Carspublic class Car {\r\n\r\n                //This code is complete\r\n                private String model;\r\n                private String mpg;\r\n            \r\n                public Car(String model, String mpg){\r\n                    this.model = model;\r\n                    this.mpg = mpg;\r\n                }\r\n            \r\n                public String getModel(){\r\n                    return model;\r\n                }\r\n            \r\n                public String getMPG(){\r\n                    return mpg;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return model + \" gets \" + mpg + \" mpg.\";\r\n                }\r\n            }public class ElectricCar extends Car {\r\n\r\n                // Complete the constructor\r\n                public ElectricCar(String model){\r\n                   super(model, \"Electric cars do not calculate MPG.\");\r\n                }\r\n            \r\n                // Override the getMPG here.\r\n                // It should return: \"Electric cars do not calculate MPG.\r\n                @Override \r\n                public String getMPG() {\r\n                    return \"Electric cars do not calculate MPG\";\r\n                }\r\n                \r\n            \r\n                // Override the toString() here.\r\n                // (model) is an  electric car.\r\n                @Override\r\n                public String toString() {\r\n                    return super.getModel() + \" is an electric car.\";\r\n                }\r\n                \r\n            }import java.util.*;\r\n\r\npublic class CarTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Car> cars = new ArrayList<Car>();\r\n        \r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        //keep looping until the user exits with the `break;` statement\r\n        while(true) {\r\n            System.out.println(\"Please enter a car model name(exit to quit): \");\r\n            String name = sc.nextLine();\r\n            if(name.equals(\"exit\")) break;\r\n            \r\n            System.out.println(\"Is this car electric? (y or n) \");\r\n            String electric = sc.nextLine();\r\n            \r\n            if(electric.equals(\"y\")) {\r\n                ElectricCar electricCar = new ElectricCar(name);\r\n                cars.add(electricCar);\r\n            } else {\r\n                System.out.println(\"How many miles per gallon: \");\r\n                //you'd think you'd want a double, but it represents it as strings for some reason. idk.\r\n                String mpg = sc.nextLine();\r\n                \r\n                Car car = new Car(name, mpg);\r\n                cars.add(car);\r\n            }\r\n        }\r\n        \r\n        //print out each car\r\n        \r\n        for(Car c : cars) {\r\n            System.out.println(\"Car: \" + c.getModel());\r\n            System.out.println(\"MPG: \" + c.getMPG());\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","address":"/codehs/java/9/6/cars.html"},{"title":"9.6.9 Fun with Solids","text":"9.6.9 Fun with Solidsimport java.lang.Math;\r\n\r\n            public class Sphere extends Solid\r\n            {\r\n                \r\n                private double radius;\r\n                \r\n                \r\n                public Sphere(String name, double radius) {\r\n                    super(name);\r\n                    this.radius = radius;\r\n                }\r\n                \r\n                public double volume()\r\n                {\r\n                    return (4.0/3.0) * Math.PI * (radius*radius*radius);\r\n                }\r\n                \r\n                public double surfaceArea()\r\n                {\r\n                    return 4 * Math.PI * (radius*radius);\r\n                } \r\n            }public class Cube extends RectangularPrism\r\n{\r\n    \r\n    public Cube(String name, double sideLength) {\r\n        super(name, sideLength, sideLength, sideLength);\r\n    }\r\n}public class Solid\r\n{\r\n    private String myName;\r\n\r\n    public Solid(String name)\r\n    {\r\n        myName = name;\r\n    }\r\n\r\n    public String getName()\r\n    {\r\n        return myName;\r\n    }\r\n\r\n    // This should be overriden in the subclass\r\n    public double volume()\r\n    {\r\n        return 0;\r\n    }\r\n    \r\n    // This should be overriden in the subclass\r\n    public double surfaceArea()\r\n    {\r\n        return 0;\r\n    }\r\n}import java.lang.Math;\r\n\r\n            public class Cylinder extends Solid\r\n            {\r\n                private double radius;\r\n                private double height;\r\n                \r\n                public Cylinder(String name, double radius, double height) {\r\n                    super(name);\r\n                    this.radius = radius;\r\n                    this.height = height;\r\n                }\r\n                \r\n                public double volume()\r\n                {\r\n                    return Math.PI * (radius*radius) * height;\r\n                }\r\n                \r\n                public double surfaceArea()\r\n                {\r\n                    return 2 * Math.PI * radius * (height+radius);\r\n                }\r\n            }public class RectangularPrism extends Solid\r\n{\r\n    private double length;\r\n    private double width;\r\n    private double height;\r\n    \r\n    public RectangularPrism(String name, double length, double width, double height) {\r\n        super(name);\r\n        this.length = length;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    \r\n    public double volume()\r\n    {\r\n        return width*length*height;\r\n    }\r\n    \r\n    public double surfaceArea()\r\n    {\r\n        return width*length*2 + length*height*2 + height*width*2;\r\n    }\r\n}import java.lang.Math;\r\n\r\npublic class Pyramid extends Solid\r\n{\r\n    private double length;\r\n    private double width;\r\n    private double height;\r\n    \r\n    public Pyramid(String name, double length, double width, double height) {\r\n        super(name);\r\n        this.length = length;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    \r\n    public double volume()\r\n    {\r\n        return (length*width)/3 * height;\r\n    }\r\n    \r\n    public double surfaceArea()\r\n    {\r\n        double baseArea = (length*width);\r\n        \r\n        \r\n        double slantHeightFront = Math.sqrt(Math.pow(height,2) + Math.pow(length/2, 2));\r\n        double slantHeightSide = Math.sqrt(Math.pow(height,2) + Math.pow(width/2, 2));\r\n        \r\n        double frontArea = (width * slantHeightFront) * 0.5;\r\n        double sideArea = (length * slantHeightSide) * 0.5;\r\n        \r\n        return baseArea + frontArea*2 + sideArea*2;\r\n    }\r\n}public class SolidTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        String name;\r\n        double volume;\r\n        double surfaceArea;\r\n\r\n        // Pyramid constructor should take name, length, width, height\r\n        // in that order\r\n        Pyramid pyramid = new Pyramid(\"My pyramid\", 1, 3, 5);\r\n        name = pyramid.getName();\r\n        volume = round(pyramid.volume(), 2);\r\n        surfaceArea = round(pyramid.surfaceArea(), 2);\r\n        System.out.println(\"Pyramid '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n\r\n        // Sphere constructor should take name then radius\r\n        Sphere sphere = new Sphere(\"My sphere\", 4);\r\n        name = sphere.getName();\r\n        volume = round(sphere.volume(), 2);\r\n        surfaceArea = round(sphere.surfaceArea(), 2);\r\n        System.out.println(\"Sphere '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n            \r\n        // RectangularPrism constructor should take name, \r\n        // length, width, height in that order\r\n        RectangularPrism rectangularPrism = new RectangularPrism(\"My rectangular prism\",\r\n            5, 8, 3);\r\n        name = rectangularPrism.getName();\r\n        volume = round(rectangularPrism.volume(), 2);\r\n        surfaceArea = round(rectangularPrism.surfaceArea(), 2);\r\n        System.out.println(\"RectangularPrism '\" + name + \"' has volume: \" +\r\n            volume + \" and surface area: \" + surfaceArea + \".\");\r\n\r\n        // Cylinder constructor should take name, radius, height\r\n        // in that order\r\n        Cylinder cylinder = new Cylinder(\"My cylinder\", 4, 9);\r\n        name = cylinder.getName();\r\n        volume = round(cylinder.volume(), 2);\r\n        surfaceArea = round(cylinder.surfaceArea(), 2);\r\n        System.out.println(\"Cylinder '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n\r\n        // Cube constructor should take name then side length\r\n        Cube cube = new Cube(\"My cube\", 4);\r\n        name = cube.getName();\r\n        volume = round(cube.volume(), 2);\r\n        surfaceArea = round(cube.surfaceArea(), 2);\r\n        System.out.println(\"Cube '\" + name + \"' has volume: \" + volume +\r\n            \" and surface area: \" + surfaceArea + \".\");\r\n    }\r\n\r\n    public static double round(double value, int places) {\r\n        if (places < 0) throw new IllegalArgumentException();\r\n\r\n        long factor = (long) Math.pow(10, places);\r\n        value = value * factor;\r\n        long tmp = Math.round(value);\r\n        return (double) tmp / factor;\r\n    }\r\n}","address":"/codehs/java/9/6/fun-with-solids.html"},{"title":"9.6.8 Library Books","text":"9.6.8 Library Bookspublic class Novel extends Book\r\n            {\r\n                private String genre;\r\n                private int pages;\r\n                \r\n                public Novel(String title, String author, \r\n                            String genre, int pages) {\r\n                                super(title, author);\r\n                                this.genre = genre;\r\n                                this.pages = pages;\r\n                            }\r\n                            public void setGenre(String genre) {\r\n                this.genre = genre;\r\n            }\r\n            public String getGenre() {\r\n                return this.genre;\r\n            }\r\n            \r\n            public void setPages(int pages) {\r\n                this.pages = pages;\r\n            }\r\n            public int getPages() {\r\n                return this.pages;\r\n            }\r\n            }public class Book\r\n            {\r\n            \r\n                private String title;\r\n                private String author;\r\n                \r\n                public Book(String title, String author) {\r\n                    this.title = title;\r\n                    this.author = author;\r\n                }\r\n                \r\n                public void setTitle(String title) {\r\n                this.title = title;\r\n            }\r\n            public String getTitle() {\r\n                return this.title;\r\n            }\r\n            \r\n            public void setAuthor(String author) {\r\n                this.author = author;\r\n            }\r\n            public String getAuthor() {\r\n                return this.author;\r\n            }\r\n            }public class TextBook extends Book\r\n{\r\n    private String subject;\r\n    private String edition;\r\n    \r\n    public TextBook(String title, String author, \r\n                String subject, String edition) {\r\n                    super(title, author);\r\n                    this.subject = subject;\r\n                    this.edition = edition;\r\n                }\r\n                public void setSubject(String subject) {\r\n    this.subject = subject;\r\n}\r\npublic String getSubject() {\r\n    return this.subject;\r\n}\r\n\r\npublic void setEdition(String edition) {\r\n    this.edition = edition;\r\n}\r\npublic String getEdition() {\r\n    return this.edition;\r\n}\r\n\r\n}import java.util.ArrayList;\r\n\r\npublic class BookTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayList<Book> books = new ArrayList<Book>();\r\n        \r\n        books.add(new TextBook(\"Genetics\", \"Some Old Dude\", \"Biology\", \"3rd\"));\r\n        books.add(new TextBook(\"The Golden Ratio: A Historical Look\", \"Some Other Old Dude\", \"Maths\", \"1st\"));\r\n        \r\n        books.add(new Novel(\"Harry Potter\", \"J.K. Rowling\", \"Fantasy\", 300));\r\n        books.add(new Novel(\"Lord of the Rings\", \"J.R.R. Tolkien\", \"Fantasy\", 1000));\r\n        \r\n        \r\n        for(Book book : books) {\r\n            System.out.println(book.getTitle());\r\n            System.out.println(book.getAuthor());\r\n            System.out.println(book.toString());\r\n        }\r\n    }\r\n}","address":"/codehs/java/9/6/library-books.html"},{"title":"9.6.6 Which Team?","text":"9.6.6 Which Team?public class Team {\r\n\r\n                private String name;\r\n                private String location;\r\n                private int wins;\r\n                private int losses;\r\n            \r\n                public Team(String name, String location, int wins, int losses) {\r\n                    this.name = name;\r\n                    this.location = location;\r\n                    this.wins = wins;\r\n                    this.losses = losses;\r\n                }\r\n            \r\n                public String getName() {\r\n                    return name;\r\n                }\r\n            \r\n                public void setName(String name) {\r\n                    this.name = name;\r\n                }\r\n            \r\n                public String getLocation() {\r\n                    return location;\r\n                }\r\n            \r\n                public void setLocation(String location) {\r\n                    this.location = location;\r\n                }\r\n            \r\n                public int getWins() {\r\n                    return wins;\r\n                }\r\n            \r\n                public void setWins(int wins) {\r\n                    this.wins = wins;\r\n                }\r\n            \r\n                public int getLosses() {\r\n                    return losses;\r\n                }\r\n            \r\n                public void setLosses(int losses) {\r\n                    this.losses = losses;\r\n                }\r\n            \r\n                public String toString(){\r\n                    return wins + \" - \" + losses;\r\n                }\r\n            }public class BaseballTeam extends Team {\r\n\r\n                private String league;\r\n            \r\n                public BaseballTeam(String name, String location,\r\n                                int wins, int losses, String league) {\r\n                    super(name, location, wins, losses);\r\n                    this.league = league;\r\n                }\r\n            \r\n                public String getLeague() {\r\n                    return league;\r\n                }\r\n            \r\n                public void setLeague(String league) {\r\n                    this.league = league;\r\n                }\r\n            \r\n            }public  class FootballTeam extends Team {\r\n\r\n                private int ties;\r\n            \r\n            \r\n                public FootballTeam(String name, String location,\r\n                                int wins, int losses, int ties) {\r\n                    super(name, location, wins, losses);\r\n                    this.ties = ties;\r\n                }\r\n            \r\n                public int getTies() {\r\n                    return ties;\r\n                }\r\n            \r\n                public void setTies(int ties) {\r\n                    this.ties = ties;\r\n                }\r\n            \r\n                @Override\r\n                public String toString(){\r\n                    return super.getWins() + \" - \" + super.getLosses() + \" - \" + ties;\r\n                }\r\n            }public  class TeamTester {\r\n\r\n                public static void main(String[] args) {\r\n                    FootballTeam dolphins = new FootballTeam(\"Dolphins\", \"Miami\", 8, 4, 1);\r\n                    Team cubs = new BaseballTeam(\"Cubs\", \"Chicago\", 80, 65, \"National\");\r\n                    Team lizards = new Team(\"Lizards\", \"New York\", 9, 5);\r\n            \r\n                    //Print out all available information for the Dolphins\r\n                    System.out.println(dolphins.getName());\r\n                    System.out.println(dolphins.getLocation());\r\n                    System.out.println(dolphins.getWins());\r\n                    System.out.println(dolphins.getLosses());\r\n                    System.out.println(dolphins.getTies());\r\n                    System.out.println(dolphins.toString());\r\n            \r\n                    //Print out all available information for the Cubs\r\n                    System.out.println(cubs.getName());\r\n                    System.out.println(cubs.getLocation());\r\n                    System.out.println(cubs.getWins());\r\n                    System.out.println(cubs.getLosses());\r\n                    System.out.println(cubs.toString());\r\n            \r\n                    //Print out all available information for the Lizards\r\n                    System.out.println(lizards.getName());\r\n                    System.out.println(lizards.getLocation());\r\n                    System.out.println(lizards.getWins());\r\n                    System.out.println(lizards.getLosses());\r\n                    System.out.println(lizards.toString());\r\n            \r\n                }\r\n            }","address":"/codehs/java/9/6/which-team.html"},{"title":"9.7.9 2D Array Tester","text":"9.7.9 2D Array Testerpublic class TwoDTester {\r\n\r\n                public static void main(String[] args) {\r\n            \r\n            \r\n                    Integer[][] firstArray = {{2,3}, {3,4}, {4,5}};\r\n                    Integer[][] secondArray = {{2,3}, {3,4}, {4,5}};\r\n                    TwoDArray first = new TwoDArray(firstArray);\r\n                    \r\n                    System.out.println(first.equals(secondArray));\r\n                    \r\n                    String[][] thirdArray = {{\"Hello\", \"Goodbye\"}, \r\n                                             {\"Hola\", \"Adios\"},\r\n                                             {\"Bonjour\", \"Au revoir\"}};\r\n                    String[][] fourthArray = {{\"Hello\", \"Goodbye\"}, \r\n                                             {\"Ciao\", \"Addio\"},\r\n                                             {\"Bonjour\", \"Au revoir\"}};\r\n                    TwoDArray third = new TwoDArray(thirdArray);\r\n                    \r\n                    System.out.println(third.equals(fourthArray));\r\n                }\r\n            \r\n            }public class TwoDArray {\r\n\r\n                private Object[][] myArray;\r\n            \r\n                public TwoDArray(Object[][] input){\r\n                    myArray = input;\r\n                }\r\n            \r\n                public boolean equals(Object[][] other){\r\n            \r\n                    for(int i = 0; i < myArray.length; i++) {\r\n                        int rowLength = myArray[i].length;\r\n                        for(int j = 0; j < rowLength; j++) {\r\n                            if(!myArray[i][j].equals(other[i][j])) return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            \r\n            }","address":"/codehs/java/9/7/2d-array-tester.html"},{"title":"9.7.8 Equal Rectangles","text":"9.7.8 Equal Rectanglespublic class Rectangle{\r\n\r\n                private int width;\r\n                private int height;\r\n                 \r\n                public Rectangle(int width, int height) {\r\n                  this.width = width;\r\n                  this.height = height;\r\n                }\r\n                \r\n                public boolean equals(Rectangle other) {\r\n                    return toString().equals(other.toString());\r\n                }\r\n                \r\n                public String toString() {\r\n                    return \"A rectangle with a width of \" + width + \" and a height of \" + height;\r\n                }\r\n                \r\n               \r\n            }public class RectangleTester\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Rectangle rect1 = new Rectangle(5, 4);\r\n        Rectangle rect2 = new Rectangle(5, 4);\r\n        Rectangle rect3 = new Rectangle(10, 4);\r\n        \r\n        // Print all three rectangles\r\n        System.out.println(rect1);\r\n        System.out.println(rect2);\r\n        System.out.println(rect3);\r\n        \r\n        // Print one true statement comparing rectangles\r\n        System.out.println(rect1.equals(rect3));\r\n        // Print one false statment comparing rectangles\r\n        System.out.println(rect1.equals(rect2));\r\n    }\r\n}","address":"/codehs/java/9/7/equal-rectangles.html"},{"title":"9.7.6 Equal?","text":"9.7.6 Equal?public class Ball\r\n            {\r\n               private String color;\r\n               \r\n               public Ball(String color){\r\n                   this.color = color;\r\n               }\r\n               \r\n                public String getColor(){\r\n                   return color;\r\n               }\r\n            }public class TestEquals\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        System.out.println(\"** Object **\");\r\n        Object obj1 = new Object();\r\n        Object obj2 = new Object();\r\n        Object obj3 = obj1;\r\n        \r\n        // Print out all three objects\r\n        System.out.println(obj1);\r\n        System.out.println(obj2);\r\n        System.out.println(obj3);\r\n        \r\n        // Print a true statement using 2 objects and ==\r\n        System.out.println(obj1 == obj3);\r\n        \r\n        // Print a false statement using 2 objects and ==\r\n        System.out.println(obj1 == obj2);\r\n        \r\n        // Print a true statement using 2 objects and .equals()\r\n        System.out.println(obj1.equals(obj3));\r\n        \r\n        // Print a false statement using 2 objects and .equals()\r\n        System.out.println(obj1.equals(obj2));\r\n        \r\n        System.out.println(\"** Ball **\");\r\n        \r\n        \r\n        Ball ball1 = new Ball(\"Red\");\r\n        Ball ball2 = new Ball(\"Red\");\r\n        Ball ball3 = ball1;\r\n        \r\n        // Print out all three objects\r\n        System.out.println(ball1);\r\n        System.out.println(ball2);\r\n        System.out.println(ball3);\r\n        \r\n         // Print a true statement using 2 objects and ==\r\n        System.out.println(ball1 == ball3);\r\n        \r\n        // Print a false statement using 2 objects and ==\r\n        System.out.println(ball1 == ball2);\r\n        \r\n        // Print a true statement using 2 objects and .equals()\r\n        System.out.println(ball1.equals(ball3));\r\n        \r\n        // Print a false statement using 2 objects and .equals()\r\n        System.out.println(ball1.equals(ball2));\r\n\r\n    }\r\n}","address":"/codehs/java/9/7/equal.html"},{"title":"9.7.7 Equals? - Part 2","text":"9.7.7 Equals? - Part 2public class Ball\r\n            {\r\n               private String color;\r\n               \r\n               public Ball(String color){\r\n                   this.color = color;\r\n               }\r\n               \r\n               public String getColor(){\r\n                   return color;\r\n               }\r\n               \r\n               public boolean equals(Ball other) {\r\n                   return color.equals(other.getColor());\r\n               }\r\n               \r\n               public String toString() {\r\n                    return \"Color: \" + color;\r\n               }\r\n               \r\n               \r\n            }public class TestEquals\r\n            {\r\n                public static void main(String[] args)\r\n                {\r\n                    System.out.println(\"** Object **\");\r\n                    Object obj1 = new Object();\r\n                    Object obj2 = new Object();\r\n                    Object obj3 = obj1;\r\n                    \r\n                    // Print out all three objects\r\n                    System.out.println(obj1);\r\n                    System.out.println(obj2);\r\n                    System.out.println(obj3);\r\n                    \r\n                    // Print a true statement using 2 objects and ==\r\n                    System.out.println(obj1 == obj3);\r\n                    \r\n                    // Print a false statement using 2 objects and ==\r\n                    System.out.println(obj1 == obj2);\r\n                    \r\n                    // Print a true statement using 2 objects and .equals()\r\n                    System.out.println(obj1.equals(obj3));\r\n                    \r\n                    // Print a false statement using 2 objects and .equals()\r\n                    System.out.println(obj1.equals(obj2));\r\n                    \r\n                    System.out.println(\"** Ball **\");\r\n                    \r\n                    \r\n                    Ball ball1 = new Ball(\"Red\");\r\n                    Ball ball2 = new Ball(\"Red\");\r\n                    Ball ball3 = ball1;\r\n                    \r\n                    // Print out all three objects\r\n                    System.out.println(ball1);\r\n                    System.out.println(ball2);\r\n                    System.out.println(ball3);\r\n                    \r\n                     // Print a true statement using 2 objects and ==\r\n                    System.out.println(ball1 == ball3);\r\n                    \r\n                    // Print a false statement using 2 objects and ==\r\n                    System.out.println(ball1 == ball2);\r\n                    \r\n                    // Print a true statement using 2 objects and .equals()\r\n                    System.out.println(ball1.equals(ball3));\r\n                    \r\n                    // Print a false statement using 2 objects and .equals()\r\n                    System.out.println(ball1.equals(ball2));\r\n            \r\n                }\r\n            }","address":"/codehs/java/9/7/equals-part-2.html"},{"title":"CodeHS: Java","text":"CodeHS: JavaBelow are all Java CodeHS lessons on this site. Only exercises are included, so you won't see any videos, examples, or tests-- if you are confused by an example, feel free to ask in the Discord!Primitive Types\r\n                \r\n                    \r\n                        \r\n                            \r\n                                1.2 Why Programming? Why Java?\r\n                            \r\n                            \r\n                                \r\n                                    1.2.5\r\n                                            Welcome Program\r\n                                \r\n                                \r\n                                    1.2.6\r\n                                            ASCII Art\r\n                                \r\n                                \r\n                                    1.2.7\r\n                                            Fixing a Paragraph\r\n                                \r\n                                \r\n                                    1.2.8\r\n                                            Making Popcorn\r\n                                \r\n                                \r\n                                    1.2.9\r\n                                            Personal Timeline\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.3 Variables and Data Types\r\n                            \r\n                            \r\n                                \r\n                                    1.3.5\r\n                                            Our First Integer\r\n                                \r\n                                \r\n                                    1.3.8\r\n                                            Answering Questions\r\n                                \r\n                                \r\n                                    1.3.9\r\n                                            Team Rankings\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.4 Expressions and Assignments Statements\r\n                            \r\n                            \r\n                                \r\n                                    1.4.6\r\n                                            Weight of a Pyramid\r\n                                \r\n                                \r\n                                    1.4.7\r\n                                            Add Fractions\r\n                                \r\n                                \r\n                                    1.4.8\r\n                                            Freely Falling Bodies\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.5 Compound Assignment Operators\r\n                            \r\n                            \r\n                                \r\n                                    1.5.5\r\n                                            Work Shift\r\n                                \r\n                                \r\n                                    1.5.6\r\n                                            My Age\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.6 User Input\r\n                            \r\n                            \r\n                                \r\n                                    1.6.4\r\n                                            My Age (User Input)\r\n                                \r\n                                \r\n                                    1.6.5 Night\r\n                                            Out\r\n                                \r\n                                \r\n                                    1.6.6\r\n                                            MLA Citation\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                1.7 Casting and Ranges of Variables\r\n                            \r\n                            \r\n                                \r\n                                    1.7.4\r\n                                            Casting to an Int\r\n                                \r\n                                \r\n                                    1.7.5\r\n                                            Casting to a Double\r\n                                \r\n                                \r\n                                    1.7.8\r\n                                            Movie Ratings\r\n                                \r\n                                \r\n                                    1.7.11\r\n                                            Integer Overflow\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Using Objects\r\n                \r\n                    \r\n                        \r\n                            \r\n                                2.1 Objects: Instances of Classes\r\n                            \r\n                            \r\n                                \r\n                                    2.1.8\r\n                                            Pizza Instance Variables\r\n                                \r\n                                \r\n                                    2.1.9\r\n                                            Phone Skeleton\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.2 Creating and Storing Objects (Instantiation)\r\n                            \r\n                            \r\n                                \r\n                                    2.2.6\r\n                                            Using the Rectangle Class\r\n                                \r\n                                \r\n                                    2.2.7\r\n                                            Student GPA Field\r\n                                \r\n                                \r\n                                    2.2.8\r\n                                            Instance Variables for Your Dog\r\n                                \r\n                                \r\n                                    2.2.9\r\n                                            Pizza Time!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.3 Overloading\r\n                            \r\n                            \r\n                                \r\n                                    2.3.7\r\n                                            Plain Coffee\r\n                                \r\n                                \r\n                                    2.3.8\r\n                                            Custom Pinatas\r\n                                \r\n                                \r\n                                    2.3.9\r\n                                            Website Class\r\n                                \r\n                                \r\n                                    2.3.10\r\n                                            Empty References\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.4 Calling a Void Method\r\n                            \r\n                            \r\n                                \r\n                                    2.4.5\r\n                                            Hello!\r\n                                \r\n                                \r\n                                    2.4.6\r\n                                            Loose Change\r\n                                \r\n                                \r\n                                    2.4.7\r\n                                            Chat Bot\r\n                                \r\n                                \r\n                                    2.4.8\r\n                                            Greetings and Salutations\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.5 Calling a Void Method with Parameters\r\n                            \r\n                            \r\n                                \r\n                                    2.5.5\r\n                                            Using the Point Class\r\n                                \r\n                                \r\n                                    2.5.7\r\n                                            Basketball Players\r\n                                \r\n                                \r\n                                    2.5.8\r\n                                            More Operations\r\n                                \r\n                                \r\n                                    2.5.9\r\n                                            Chat Bot 2.0\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.6 Calling a Non-void Method\r\n                            \r\n                            \r\n                                \r\n                                    2.6.6\r\n                                            Number Games\r\n                                \r\n                                \r\n                                    2.6.7\r\n                                            Construction Costs\r\n                                \r\n                                \r\n                                    2.6.8\r\n                                            How Far Away is ...?\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.7 String Objects\r\n                            \r\n                            \r\n                                \r\n                                    2.7.7\r\n                                            Pretty Printing Operations\r\n                                \r\n                                \r\n                                    2.7.8\r\n                                            Full Name\r\n                                \r\n                                \r\n                                    2.7.9\r\n                                            QuoteMachine\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.8 String Methods\r\n                            \r\n                            \r\n                                \r\n                                    2.8.6\r\n                                            Speaking\r\n                                \r\n                                \r\n                                    2.8.7\r\n                                            toString for Flowers\r\n                                \r\n                                \r\n                                    2.8.8\r\n                                            Organizing Files\r\n                                \r\n                                \r\n                                    2.8.9\r\n                                            Concatenating Fractions\r\n                                \r\n                                \r\n                                    2.8.10\r\n                                            Word Games\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.9 Wrapper Classes: Integers and Doubles\r\n                            \r\n                            \r\n                                \r\n                                    2.9.6\r\n                                            Order Up!\r\n                                \r\n                                \r\n                                    2.9.7\r\n                                            Currency\r\n                                \r\n                                \r\n                                    2.9.8\r\n                                            Guess the number!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                2.10 Using the Math Class\r\n                            \r\n                            \r\n                                \r\n                                    2.10.6\r\n                                            Circle Area\r\n                                \r\n                                \r\n                                    2.10.7\r\n                                            The Unit Circle\r\n                                \r\n                                \r\n                                    2.10.8\r\n                                            Racing\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Boolean Expressions and if Statements\r\n                \r\n                    \r\n                        \r\n                            \r\n                                3.1 Boolean Expressions\r\n                            \r\n                            \r\n                                \r\n                                    3.1.6\r\n                                            Number Order\r\n                                \r\n                                \r\n                                    3.1.7\r\n                                            Sugar Tax\r\n                                \r\n                                \r\n                                    3.1.8\r\n                                            Triple Double\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.2 if Statements and Control Flow\r\n                            \r\n                            \r\n                                \r\n                                    3.2.6\r\n                                            Discounts\r\n                                \r\n                                \r\n                                    3.2.7\r\n                                            Sweet or Unsweet?\r\n                                \r\n                                \r\n                                    3.2.8\r\n                                            Cooking\r\n                                \r\n                                \r\n                                    3.2.9\r\n                                            Rating\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.3 if-else Statements\r\n                            \r\n                            \r\n                                \r\n                                    3.3.5\r\n                                            Positive or Negative\r\n                                \r\n                                \r\n                                    3.3.6\r\n                                            Battleships Move\r\n                                \r\n                                \r\n                                    3.3.7\r\n                                            Ratings\r\n                                \r\n                                \r\n                                    3.3.8\r\n                                            Player Score\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.4 else if Statements\r\n                            \r\n                            \r\n                                \r\n                                    3.4.6\r\n                                            Positive, Negative, or Zero\r\n                                \r\n                                \r\n                                    3.4.7\r\n                                            Salmon Spawn\r\n                                \r\n                                \r\n                                    3.4.8\r\n                                            Berries\r\n                                \r\n                                \r\n                                    3.4.9\r\n                                            Battleships\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.5 Compound Boolean Expressions\r\n                            \r\n                            \r\n                                \r\n                                    3.5.6\r\n                                            Roller Coaster\r\n                                \r\n                                \r\n                                    3.5.7\r\n                                            Compound Roller Coaster\r\n                                \r\n                                \r\n                                    3.5.8\r\n                                            Divisibility\r\n                                \r\n                                \r\n                                    3.5.9\r\n                                            Find the Minimum\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.6 Equivalent Boolean Expressions\r\n                            \r\n                            \r\n                                \r\n                                    3.6.5\r\n                                            Amusement Park\r\n                                \r\n                                \r\n                                    3.6.6\r\n                                            Odd Numbers\r\n                                \r\n                                \r\n                                    3.6.7\r\n                                            Odd and Even\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                3.7 Comparing Objects\r\n                            \r\n                            \r\n                                \r\n                                    3.7.7\r\n                                            String Variable Trace\r\n                                \r\n                                \r\n                                    3.7.9\r\n                                            Three Strings\r\n                                \r\n                                \r\n                                    3.7.10\r\n                                            Comparing Circles\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Iteration\r\n                \r\n                    \r\n                        \r\n                            \r\n                                4.1 While Loops\r\n                            \r\n                            \r\n                                \r\n                                    4.1.6 Making\r\n                                            Taffy\r\n                                \r\n                                \r\n                                    4.1.7\r\n                                            Guess the Number\r\n                                \r\n                                \r\n                                    4.1.8\r\n                                            Divisibility\r\n                                \r\n                                \r\n                                    4.1.9\r\n                                            Max and Min Values\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.2 For Loops\r\n                            \r\n                            \r\n                                \r\n                                    4.2.6 Print\r\n                                            the Odds\r\n                                \r\n                                \r\n                                    4.2.7\r\n                                            Repeat 100 Times\r\n                                \r\n                                \r\n                                    4.2.8\r\n                                            Replace WHILE with FOR Loop\r\n                                \r\n                                \r\n                                    4.2.9\r\n                                            Replace FOR Loop with WHILE Loop\r\n                                \r\n                                \r\n                                    4.2.10\r\n                                            Multiplication Table\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.3 Developing Algorithms Using Strings\r\n                            \r\n                            \r\n                                \r\n                                    4.3.6\r\n                                            Replace Letter\r\n                                \r\n                                \r\n                                    4.3.7\r\n                                            Password Checker\r\n                                \r\n                                \r\n                                    4.3.8\r\n                                            Finding Palindromes\r\n                                \r\n                                \r\n                                    4.3.9\r\n                                            Fixing Grammar\r\n                                \r\n                                \r\n                                    4.3.10\r\n                                            Teen Talk\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.4 Nested Iteration\r\n                            \r\n                            \r\n                                \r\n                                    4.4.6\r\n                                            Upright Number Triangle\r\n                                \r\n                                \r\n                                    4.4.7\r\n                                            Make a Tree\r\n                                \r\n                                \r\n                                    4.4.8\r\n                                            Multiplication Table\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                4.5 Informal Code Analysis\r\n                            \r\n                            \r\n                                \r\n                                    4.5.7\r\n                                            Improving isChar Speed\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Writing Classes\r\n                \r\n                    \r\n                        \r\n                            \r\n                                5.1 Anatomy of Classes\r\n                            \r\n                            \r\n                                \r\n                                    5.1.4\r\n                                            Access for DNA Class\r\n                                \r\n                                \r\n                                    5.1.5\r\n                                            Access for Employee Class\r\n                                \r\n                                \r\n                                    5.1.6\r\n                                            Fixing Circle\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.2 Constructors\r\n                            \r\n                            \r\n                                \r\n                                    5.2.5\r\n                                            Batting Average\r\n                                \r\n                                \r\n                                    5.2.6 Dog\r\n                                            Class\r\n                                \r\n                                \r\n                                    5.2.7\r\n                                            Student Overload\r\n                                \r\n                                \r\n                                    5.2.8\r\n                                            SchoolClub Class\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.3 Documentation with Comments\r\n                            \r\n                            \r\n                                \r\n                                    5.3.5\r\n                                            Commenting Activity Tracker\r\n                                \r\n                                \r\n                                    5.3.6\r\n                                            Commenting Activity Log\r\n                                \r\n                                \r\n                                    5.3.7\r\n                                            C.Y.O.A. Layout\r\n                                \r\n                                \r\n                                    5.3.8\r\n                                            C.Y.O.A. Finishing the story\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.4 Accessor Methods\r\n                            \r\n                            \r\n                                \r\n                                    5.4.5\r\n                                            Text Messages Getter Methods\r\n                                \r\n                                \r\n                                    5.4.6\r\n                                            Full Dragon Class\r\n                                \r\n                                \r\n                                    5.4.7\r\n                                            A Different Dragon Class\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.5 Mutator Methods\r\n                            \r\n                            \r\n                                \r\n                                    5.5.5\r\n                                            Rectangle class\r\n                                \r\n                                \r\n                                    5.5.6\r\n                                            Full Fraction Class\r\n                                \r\n                                \r\n                                    5.5.7\r\n                                            Weekly Routine\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.6 Writing Classes\r\n                            \r\n                            \r\n                                \r\n                                    5.6.5\r\n                                            Distance Conversions\r\n                                \r\n                                \r\n                                    5.6.6\r\n                                            Food App Demo\r\n                                \r\n                                \r\n                                    5.6.7\r\n                                            Car Class\r\n                                \r\n                                \r\n                                    5.6.8\r\n                                        Open Response: Combination Lock FRQ\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.7 Static Variables and Methods\r\n                            \r\n                            \r\n                                \r\n                                    5.7.5\r\n                                            Randomizer Class\r\n                                \r\n                                \r\n                                    5.7.6\r\n                                            Rock, Paper, Scissors!\r\n                                \r\n                                \r\n                                    5.7.7\r\n                                            How Many Players in the Game?\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.8 Scope and Access\r\n                            \r\n                            \r\n                                \r\n                                    5.8.7\r\n                                            Scope\r\n                                \r\n                                \r\n                                    5.8.8\r\n                                            Which Variables Exist?\r\n                                \r\n                                \r\n                                    5.8.9\r\n                                            Broken Calculator\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                5.9 this Keyword\r\n                            \r\n                            \r\n                                \r\n                                    5.9.5\r\n                                            Write Your Own CodeHS\r\n                                \r\n                                \r\n                                    5.9.6\r\n                                            Song Class\r\n                                \r\n                                \r\n                                    5.9.7\r\n                                            Fraction Math\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Array\r\n                \r\n                    \r\n                        \r\n                            \r\n                                6.1 Array Creation and Access\r\n                            \r\n                            \r\n                                \r\n                                    6.1.6\r\n                                            Our First Array\r\n                                \r\n                                \r\n                                    6.1.7\r\n                                            Set Scores\r\n                                \r\n                                \r\n                                    6.1.8\r\n                                            Last Element in Array\r\n                                \r\n                                \r\n                                    6.1.9\r\n                                            Snap Shot Splash Screen\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                6.2 Traversing Arrays\r\n                            \r\n                            \r\n                                \r\n                                    6.2.7 Print\r\n                                            Array\r\n                                \r\n                                \r\n                                    6.2.8\r\n                                            Print Odd Array Indices\r\n                                \r\n                                \r\n                                    6.2.9\r\n                                            Find Index of a String\r\n                                \r\n                                \r\n                                    6.2.10\r\n                                            Fibonacci Sequence\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                6.3 Enhanced for Loop for Arrays\r\n                            \r\n                            \r\n                                \r\n                                    6.3.6\r\n                                            Print Odds\r\n                                \r\n                                \r\n                                    6.3.7\r\n                                            Largest Value\r\n                                \r\n                                \r\n                                    6.3.8\r\n                                            Classroom Array\r\n                                \r\n                                \r\n                                    6.3.9\r\n                                            Array Average\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                6.4 Developing Algorithms Using Arrays\r\n                            \r\n                            \r\n                                \r\n                                    6.4.6\r\n                                            Find the Median\r\n                                \r\n                                \r\n                                    6.4.7\r\n                                            Find the Last Multiple of 3\r\n                                \r\n                                \r\n                                    6.4.8\r\n                                            Most Improved\r\n                                \r\n                                \r\n                                    6.4.9\r\n                                            Car Showroom\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                ArrayList\r\n                \r\n                    \r\n                        \r\n                            \r\n                                7.1 Introduction to ArrayList\r\n                            \r\n                            \r\n                                \r\n                                    7.1.7\r\n                                            Initializing an ArrayList\r\n                                \r\n                                \r\n                                    7.1.8\r\n                                            Car Inventory\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.2 ArrayList Methods\r\n                            \r\n                            \r\n                                \r\n                                    7.2.6\r\n                                            Get First Element\r\n                                \r\n                                \r\n                                    7.2.7\r\n                                            ArrayList of Even Numbers\r\n                                \r\n                                \r\n                                    7.2.8\r\n                                            Teacher Class List\r\n                                \r\n                                \r\n                                    7.2.9\r\n                                            Teacher Class List Methods\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.3 Traversing ArrayLists\r\n                            \r\n                            \r\n                                \r\n                                    7.3.6\r\n                                            Traversing Odds\r\n                                \r\n                                \r\n                                    7.3.8\r\n                                            ArrayList Helper Methods\r\n                                \r\n                                \r\n                                    7.3.9\r\n                                            Road Trip!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.4 Developing Algorithms using ArrayLists\r\n                            \r\n                            \r\n                                \r\n                                    7.4.6\r\n                                            ArrayList equals\r\n                                \r\n                                \r\n                                    7.4.7\r\n                                            Airline Tickets\r\n                                \r\n                                \r\n                                    7.4.8\r\n                                            Billboard Top 10\r\n                                \r\n                                \r\n                                    7.4.9\r\n                                            User Data Cleanup\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.5 Searching\r\n                            \r\n                            \r\n                                \r\n                                    7.5.6\r\n                                            Linear Search on ArrayList with While Loop\r\n                                \r\n                                \r\n                                    7.5.7\r\n                                            Fantasy Football Roster\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                7.6 Sorting\r\n                            \r\n                            \r\n                                \r\n                                    7.6.4\r\n                                            Explore Selection Sort\r\n                                \r\n                                \r\n                                    7.6.9\r\n                                            Explore Insertion Sort\r\n                                \r\n                                \r\n                                    7.6.10\r\n                                            Selection Sort vs. Insertion Sort Run Time\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                2D Array\r\n                \r\n                    \r\n                        \r\n                            \r\n                                8.1 2D Arrays\r\n                            \r\n                            \r\n                                \r\n                                    8.1.5\r\n                                            Manipulating 2D Arrays\r\n                                \r\n                                \r\n                                    8.1.6\r\n                                            Complete Chessboard\r\n                                \r\n                                \r\n                                    8.1.7 Tic\r\n                                            Tac Toe Board\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                8.2 Traversing 2D Arrays\r\n                            \r\n                            \r\n                                \r\n                                    8.2.7\r\n                                            Sum Rows in a 2D Array\r\n                                \r\n                                \r\n                                    8.2.8\r\n                                            Tic Tac Toe Methods\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Inheritance\r\n                \r\n                    \r\n                        \r\n                            \r\n                                9.1 Creating Superclasses and Subclasses\r\n                            \r\n                            \r\n                                \r\n                                    9.1.6\r\n                                            Person / Student Object\r\n                                \r\n                                \r\n                                    9.1.7\r\n                                            Books\r\n                                \r\n                                \r\n                                    9.1.8\r\n                                            Computers\r\n                                \r\n                                \r\n                                    9.1.9\r\n                                            More Animals!\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.2 Writing Constructors for Subclasses\r\n                            \r\n                            \r\n                                \r\n                                    9.2.6\r\n                                            Students\r\n                                \r\n                                \r\n                                    9.2.7\r\n                                            Instruments\r\n                                \r\n                                \r\n                                    9.2.8\r\n                                            Foods\r\n                                \r\n                                \r\n                                    9.2.9\r\n                                            Clothing Store\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.3 Overriding Methods\r\n                            \r\n                            \r\n                                \r\n                                    9.3.6\r\n                                            Dogs Bark\r\n                                \r\n                                \r\n                                    9.3.7\r\n                                            Electric Cars\r\n                                \r\n                                \r\n                                    9.3.8\r\n                                            Online Companies\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.4 super Keyword\r\n                            \r\n                            \r\n                                \r\n                                    9.4.6\r\n                                            Squares\r\n                                \r\n                                \r\n                                    9.4.7\r\n                                            Bank Accounts\r\n                                \r\n                                \r\n                                    9.4.8\r\n                                            Employees\r\n                                \r\n                                \r\n                                    9.4.9\r\n                                            Student Test Scores\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.5 Creating References Using Inheritance\r\n                            \r\n                            \r\n                                \r\n                                    9.5.6\r\n                                            Pies\r\n                                \r\n                                \r\n                                    9.5.7\r\n                                            Creating .equals\r\n                                \r\n                                \r\n                                    9.5.8\r\n                                            Online Companies Revisited\r\n                                \r\n                                \r\n                                    9.5.9\r\n                                            Assignments\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.6 Polymorphism\r\n                            \r\n                            \r\n                                \r\n                                    9.6.6 Which\r\n                                            Team?\r\n                                \r\n                                \r\n                                    9.6.7 Cars\r\n                                \r\n                                \r\n                                    9.6.8\r\n                                            Library Books\r\n                                \r\n                                \r\n                                    9.6.9\r\n                                            Fun with Solids\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                9.7 Object Superclass\r\n                            \r\n                            \r\n                                \r\n                                    9.7.6\r\n                                            Equal?\r\n                                \r\n                                \r\n                                    9.7.7\r\n                                            Equals? - Part 2\r\n                                \r\n                                \r\n                                    9.7.8\r\n                                            Equal Rectangles\r\n                                \r\n                                \r\n                                    9.7.9\r\n                                            2D Array Tester\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Recursion\r\n                \r\n                    \r\n                        \r\n                            \r\n                                10.1 Recursion\r\n                            \r\n                            \r\n                                \r\n                                    10.1.6\r\n                                            Factorial\r\n                                \r\n                                \r\n                                    10.1.7\r\n                                            Countdown!\r\n                                \r\n                                \r\n                                    10.1.8\r\n                                            Recursive Minimum\r\n                                \r\n                                \r\n                                    10.1.9\r\n                                            Bacteria Cultures\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                10.2 Recursive Searching\r\n                            \r\n                            \r\n                                \r\n                                    10.2.6\r\n                                            Exploring Binary Searches\r\n                                \r\n                                \r\n                                    10.2.7\r\n                                            Comparing Binary Search and Linear Search\r\n                                \r\n                                \r\n                                    10.2.8\r\n                                            Maximum Iterations\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                10.3 Recursive Sorting\r\n                            \r\n                            \r\n                                \r\n                                    10.3.6\r\n                                            Explore Merge Sort\r\n                                \r\n                                \r\n                                    10.3.7\r\n                                            Merge Sort Benchmark Testing\r\n                                \r\n                                \r\n                                    10.3.8\r\n                                            Recursive Calls\r\n                                \r\n                                \r\n                                    10.3.9\r\n                                            Sort Benchmark Testing\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Additional Exercises\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Unit 3\r\n                            \r\n                            \r\n                                \r\n                                    Lesson\r\n                                            3.2 Constructions\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.2 Game Bonus\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.3 Comparing Doubles\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.4 Classifying the Rich\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.4 Mesozoic Age\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            3.5 Salmon Season\r\n                                \r\n                                \r\n                                    Lesson 3.6\r\n                                            Used Car\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                Unit 4\r\n                            \r\n                            \r\n                                \r\n                                    Lesson\r\n                                            4.1 Find Digits\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.2 Factorial\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.2 Five Little Ducks\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.3 Fix the Sum\r\n                                \r\n                                \r\n                                    Lesson\r\n                                            4.5 Values Held In Variables\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Introduction to Programming in Java with Karel the Dog\r\n                \r\n                    \r\n                        \r\n                            \r\n                                11.1 Introduction to Programming With Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.1.5\r\n                                            Your First Karel Program\r\n                                \r\n                                \r\n                                    11.1.6\r\n                                            Short Stack\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.2 More Basic Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.2.4\r\n                                            Make a Tower\r\n                                \r\n                                \r\n                                    11.2.5\r\n                                            Pyramid of Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.3 Java Programs and the Run Method\r\n                            \r\n                            \r\n                                \r\n                                    11.3.4\r\n                                            Tower Karel\r\n                                \r\n                                \r\n                                    11.3.5\r\n                                            Gold Medal Karel\r\n                                \r\n                                \r\n                                    11.3.6\r\n                                            Maze Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.4 Karel Can't Turn Right\r\n                            \r\n                            \r\n                                \r\n                                    11.4.4\r\n                                            Slide Karel\r\n                                \r\n                                \r\n                                    11.4.5\r\n                                            Fireman Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.5 Methods in Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.5.4\r\n                                            Planting Bushes\r\n                                \r\n                                \r\n                                    11.5.5\r\n                                            Mario Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.6 Top Down Design and Decomposition in Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.6.4\r\n                                            The Two Towers\r\n                                \r\n                                \r\n                                    11.6.5\r\n                                            Planting Flowers\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.7 Commenting Your Code\r\n                            \r\n                            \r\n                                \r\n                                    11.7.4\r\n                                            The Two Towers + Comments\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.8 Super Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.8.4\r\n                                            The Two Towers + SuperKarel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.9 For Loops\r\n                            \r\n                            \r\n                                \r\n                                    11.9.5\r\n                                            Marathon Karel\r\n                                \r\n                                \r\n                                    11.9.6\r\n                                            Take 'em All\r\n                                \r\n                                \r\n                                    11.9.7\r\n                                            Dizzy Karel\r\n                                \r\n                                \r\n                                    11.9.8\r\n                                            For Loop Square\r\n                                \r\n                                \r\n                                    11.9.9\r\n                                            Planting Flowers\r\n                                \r\n                                \r\n                                    11.9.10\r\n                                            Lots of Hurdles\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.10 While Loops in Karel\r\n                            \r\n                            \r\n                                \r\n                                    11.10.4\r\n                                            Follow The Yellow Ball Road\r\n                                \r\n                                \r\n                                    11.10.5\r\n                                            Just Keep Spinning\r\n                                \r\n                                \r\n                                    11.10.6\r\n                                            Lay Row of Tennis Balls\r\n                                \r\n                                \r\n                                    11.10.7\r\n                                            Big Tower\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.11 If Statements\r\n                            \r\n                            \r\n                                \r\n                                    11.11.5\r\n                                            Is There a Ball?\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.12 If/Else Statements\r\n                            \r\n                            \r\n                                \r\n                                    11.12.4\r\n                                            Fix It Karel\r\n                                \r\n                                \r\n                                    11.12.5\r\n                                            Invert\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.13 Control Structures Example\r\n                            \r\n                            \r\n                                \r\n                                    11.13.4\r\n                                            Random Hurdles\r\n                                \r\n                                \r\n                                    11.13.5\r\n                                            Fix It Karel\r\n                                \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            \r\n                                11.15 How to Indent Your Code\r\n                            \r\n                            \r\n                                \r\n                                    11.15.4\r\n                                            Diagonal\r\n                                \r\n                                \r\n                                    11.15.5\r\n                                            Staircase\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n                Extra Course Assignments\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Assignments\r\n                            \r\n                            \r\n                                \r\n                                    Dinner\r\n                                \r\n                                \r\n                                    Dance\r\n                                            Battle\r\n                                \r\n                            \r\n                        \r\n                    \r\n                \r\n            -->","address":"/codehs/java/"},{"title":"Battleship: The Grid Class","text":"Battleship: The Grid ClassBTW\r\n            The GridTester class is ignored by the autograder. You can just leave it how it is!public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method can be called on your own grid. To add a ship\r\n    * we will go to the ships location and mark a true value\r\n    * in every location that the ship takes up.\r\n    */\r\n   public void addShip(Ship s) {\r\n       int i = s.getRow(), j = s.getCol(), marked = 0;\r\n       while(marked < s.getLength()) {\r\n           setShip(i, j, true);\r\n           if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n           else j++;\r\n           \r\n           marked++;\r\n       }\r\n   }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","address":"/codehs/java/projects/battleship/adding-a-ship-to-the-grid.html"},{"title":"Battleship: Finishing the Game","text":"Battleship: Finishing the Gamepublic class Battleship extends ConsoleProgram {\r\n    \r\n    \r\n                private static final int MAX_COL = 10;\r\n                private static final char MAX_ROW = 'J';\r\n            \r\n                private static final int HORIZONTAL = 0;\r\n                private static final int VERTICAL = 1;\r\n            \r\n                public void run() {\r\n            \r\n                    Player player = new Player();\r\n                    Player cpu = new Player();\r\n            \r\n                    setUpShips(player, cpu);\r\n            \r\n                    readLine(\"Hit enter to start guessing.\");\r\n            \r\n                    boolean gameOver = false;\r\n            \r\n                    while (!gameOver) gameOver = playRound(player, cpu);\r\n            \r\n                    if (player.hasWon()) System.out.println(\"You won!\");\r\n                    else System.out.println(\"You lost!\");\r\n            \r\n                    System.out.println(\"Thanks for playing!\");\r\n                }\r\n            \r\n                private void setUpShips(Player player, Player cpu) {\r\n                    System.out.println(\"Time to place your ships.\");\r\n                    //initializeShipsFromInput(player);\r\n            \r\n                    readLine(\"Hit enter for the enemy to choose their ship locations.\");\r\n            \r\n                    cpu.initializeShipsRandomly();\r\n            \r\n                    System.out.println(\"The enemy has placed their ships.\");\r\n                }\r\n            \r\n                public void initializeShipsFromInput(Player player) {\r\n                    for (int i = 0; i < player.NUM_SHIPS; i++) {\r\n                        readLine(\"Hit enter to place the next ship.\");\r\n                        System.out.println(\"Your current grid of ships.\");\r\n                        player.printMyShips();\r\n            \r\n                        int length = player.SHIP_LENGTHS[i];\r\n                        System.out.println(\"Now you need to place a ship of length \" + length);\r\n                        int row = readRow();\r\n                        int col = readCol();\r\n                        int dir = readDirection();\r\n            \r\n                        player.chooseShipLocation(new Ship(length), row, col, dir);\r\n                    }\r\n                    System.out.println(\"Your current grid of ships.\");\r\n                    player.printMyShips();\r\n                }\r\n            \r\n                private int readDirection() {\r\n                    while (true) {\r\n                        String dir = readLine(\"Horizontal or vertical? \");\r\n                        dir = dir.toUpperCase();\r\n            \r\n                        if (dir.length() > 0) {\r\n                            if (dir.charAt(0) == 'H') {\r\n                                return HORIZONTAL;\r\n                            } else if (dir.charAt(0) == 'V') {\r\n                                return VERTICAL;\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid direction, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readCol() {\r\n                    while (true) {\r\n                        int col = readInt(\"Which column? (1-\" + MAX_COL + \") \");\r\n                        if (col >= 1 && col <= MAX_COL) {\r\n                            return col - 1;\r\n                        }\r\n                        System.out.println(\"Invalid column, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readRow() {\r\n                    while (true) {\r\n                        String row = readLine(\"Which row? (A-\" + MAX_ROW + \") \");\r\n                        row = row.toUpperCase();\r\n                        if (row.length() > 0) {\r\n                            char ch = row.charAt(0);\r\n                            if (ch >= 'A' && ch <= MAX_ROW) {\r\n                                return ch - 'A';\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid row, please try again.\");\r\n                    }\r\n                }\r\n                private boolean playRound(Player player, Player cpu) {\r\n                    readLine(\"Hit enter for your turn.\");\r\n                    humanTurn(player, cpu);\r\n            \r\n                    if (player.hasWon()) {\r\n                        return true;\r\n                    }\r\n            \r\n                    readLine(\"Hit enter for the cpu turn.\");\r\n                    computerTurn(player, cpu);\r\n            \r\n                    return cpu.hasWon();\r\n                }\r\n            \r\n                private void computerTurn(Player player, Player cpu) {\r\n                    int row = cpu.getRandomRowGuess();\r\n                    int col = cpu.getRandomColGuess();\r\n                    System.out.println(\"Computer player guesses row \" + (row + 1) + \" and column \" + (col + 1));\r\n            \r\n                    boolean hit = cpu.makeGuess(row, col, player);\r\n            \r\n                    if (hit) {\r\n                        System.out.println(\"Computer hit!\");\r\n                    } else {\r\n                        System.out.println(\"Computer missed.\");\r\n                    }\r\n            \r\n                    cpu.printMyGuesses();\r\n                }\r\n            \r\n                private void humanTurn(Player player, Player cpu) {\r\n                    System.out.println(\"Enemy grid\");\r\n                    player.printMyGuesses();\r\n                    System.out.println(\"It's your turn to guess.\");\r\n                    int row = readRow();\r\n                    int col = readCol();\r\n            \r\n                    boolean hit = player.makeGuess(row, col, cpu);\r\n            \r\n                    if (hit) {\r\n                        System.out.println(\"You got a hit!\");\r\n                    } else {\r\n                        System.out.println(\"Nope, that was a miss.\");\r\n                    }\r\n            \r\n                    player.printMyGuesses();\r\n                }\r\n            }import java.util.*;\r\npublic class Player\r\n{\r\n    public static final int[] SHIP_LENGTHS = {2, 3, 3, 4, 5};\r\n    public static final int NUM_SHIPS = 5;\r\n    \r\n    private ArrayList<Ship> ships;\r\n    \r\n    private Grid selfGrid;\r\n    private Grid otherGrid;\r\n    \r\n    public Player() {\r\n        this.ships = new ArrayList<Ship>();\r\n        this.selfGrid = new Grid();\r\n        this.otherGrid = new Grid();\r\n    }\r\n    \r\n    public void chooseShipLocation(Ship s, int row, int col, int direction) {\r\n        if(ships.size() < 5) {\r\n            s.setDirection(direction);\r\n            s.setLocation(row, col);\r\n            selfGrid.addShip(s);\r\n            ships.add(s);\r\n        }\r\n    }\r\n    \r\n    public void initializeShipsRandomly() {\r\n        //chosen by fair dice roll\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[0]), 0, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[1]), 1, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[2]), 2, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[3]), 3, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[4]), 4, 0, 0);\r\n    }\r\n    \r\n    // Print your ships on the grid\r\n    public void printMyShips() {\r\n        selfGrid.printShips();\r\n    }\r\n    \r\n    // Print opponent guesses\r\n    public void printOpponentGuesses() {\r\n        selfGrid.printStatus();\r\n    }\r\n    \r\n    // Print your guesses\r\n    public void printMyGuesses() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    public int getRandomRowGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    public int getRandomColGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    \r\n    public boolean hasWon() {\r\n        int total = 0;\r\n        for(int i = 0; i < Grid.NUM_ROWS; i++) {\r\n            for(int j = 0; j < Grid.NUM_COLS; j++) {\r\n                if(otherGrid.getStatus(i, j) == Location.HIT) total++;\r\n            }\r\n        }\r\n        return total >= 17;\r\n    }\r\n    \r\n    public boolean makeGuess(int row, int col, Player other) {\r\n        boolean guessHit = other.recordOpponentGuess(row, col);\r\n        \r\n        if(guessHit) {\r\n            otherGrid.markHit(row, col);\r\n        } else {\r\n            otherGrid.markMiss(row, col);\r\n        }\r\n        \r\n        return guessHit;\r\n    }\r\n    \r\n    public void printHitsDelivered() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    // Record a guess from the opponent\r\n    public boolean recordOpponentGuess(int row, int col) {\r\n        if(selfGrid.hasShip(row, col)) {\r\n            selfGrid.markHit(row, col);\r\n            return true;\r\n        }\r\n        else {\r\n            selfGrid.markMiss(row, col);\r\n            return false;\r\n        }\r\n    }\r\n}import java.util.*;\r\n\r\npublic class Randomizer{\r\n\r\n\tpublic static Random theInstance = null;\r\n\t\r\n\tpublic Randomizer(){\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic static Random getInstance(){\r\n\t\tif(theInstance == null){\r\n\t\t\ttheInstance = new Random();\r\n\t\t}\r\n\t\treturn theInstance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return a random boolean value.\r\n\t * @return True or false value simulating a coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(){\r\n\t\treturn Randomizer.getInstance().nextBoolean();\r\n\t}\r\n\r\n\t/**\r\n\t * This method simulates a weighted coin flip which will return\r\n\t * true with the probability passed as a parameter.\r\n\t * \r\n\t * @param\tprobability\tThe probability that the method returns true, a value between 0 to 1 inclusive. \r\n\t * @return True or false value simulating a weighted coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(double probability){\r\n\t\treturn Randomizer.nextDouble() < probability;\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method returns a random integer.\r\n\t * @return A random integer.\r\n\t */\r\n\tpublic static int nextInt(){\r\n\t\treturn Randomizer.getInstance().nextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * This method returns a random integer between 0 and n, exclusive.\r\n\t * @param n\tThe maximum value for the range.\r\n\t * @return A random integer between 0 and n, exclusive.\r\n\t */\r\n\tpublic static int nextInt(int n){\r\n\t\treturn Randomizer.getInstance().nextInt(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a number between min and max, inclusive.\r\n\t * @param min\tThe minimum integer value of the range, inclusive.\r\n\t * @param max\tThe maximum integer value in the range, inclusive.\r\n\t * @return A random integer between min and max.\r\n\t */\r\n\tpublic static int nextInt(int min, int max){\r\n\t\treturn min + Randomizer.nextInt(max - min + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between 0 and 1.\r\n\t * @return A random double between 0 and 1.\r\n\t */\r\n\tpublic static double nextDouble(){\r\n\t\treturn Randomizer.getInstance().nextDouble();\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between min and max.\r\n\t * @param min The minimum double value in the range.\r\n\t * @param max The maximum double value in the rang.\r\n\t * @return A random double between min and max.\r\n\t */\r\n\tpublic static double nextDouble(double min, double max){\r\n\t\treturn min + (max - min) * Randomizer.nextDouble();\r\n\t}\r\n\r\n\t\r\n}public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}public class Location\r\n{\r\n    public static final int UNGUESSED = 0;\r\n    public static final int HIT = 1;\r\n    public static final int MISSED = 2;\r\n    \r\n    private int status;\r\n    private boolean hasShip;\r\n    \r\n    // Location constructor. \r\n    public Location() {\r\n        this.status = UNGUESSED;\r\n    }\r\n    \r\n    // Was this Location a hit?\r\n    public boolean checkHit() {\r\n        return status == HIT;\r\n    }\r\n    \r\n    // Was this location a miss?\r\n    public boolean checkMiss() {\r\n        return status == MISSED;\r\n    }\r\n    \r\n    // Was this location unguessed?\r\n    public boolean isUnguessed() {\r\n        return status == UNGUESSED;\r\n    }\r\n    \r\n    // Mark this location a hit.\r\n    public void markHit() {\r\n        status = HIT;\r\n    }\r\n    \r\n    // Mark this location a miss.\r\n    public void markMiss() {\r\n        status = MISSED;\r\n    }\r\n    \r\n    // Return whether or not this location has a ship.\r\n    public boolean hasShip() {\r\n        return hasShip;\r\n    }\r\n    \r\n    // Set the value of whether this location has a ship.\r\n    public void setShip(boolean val) {\r\n        this.hasShip = val;\r\n    }\r\n    \r\n    // Set the status of this Location.\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n    \r\n    // Get the status of this Location.\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n}public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method can be called on your own grid. To add a ship\r\n     * we will go to the ships location and mark a true value\r\n     * in every location that the ship takes up.\r\n     */\r\n    public void addShip(Ship s) {\r\n        int i = s.getRow(), j = s.getCol(), marked = 0;\r\n        while(marked < s.getLength()) {\r\n            setShip(i, j, true);\r\n            if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n            else j++;\r\n            \r\n            marked++;\r\n        }\r\n    }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","address":"/codehs/java/projects/battleship/finishing-the-game.html"},{"title":"Battleship: The Battleship Class","text":"Battleship: The Battleship Classpublic class Battleship extends ConsoleProgram {\r\n    \r\n    \r\n                private static final int MAX_COL = 10;\r\n                private static final char MAX_ROW = 'J';\r\n            \r\n                private static final int HORIZONTAL = 0;\r\n                private static final int VERTICAL = 1;\r\n            \r\n                public void run() {\r\n            \r\n                    Player player = new Player();\r\n                    Player cpu = new Player();\r\n            \r\n            \r\n                    readLine(\"Hit enter to start guessing.\");\r\n            \r\n                    boolean playing = true;\r\n            \r\n                    while (playing) playRound(player, cpu);\r\n            \r\n                    if (player.hasWon()) System.out.println(\"You won!\");\r\n                    else System.out.println(\"You lost!\");\r\n            \r\n                    System.out.println(\"Thanks for playing!\");\r\n                }\r\n            \r\n                private int readDirection() {\r\n                    while (true) {\r\n                        String dir = readLine(\"Horizontal or vertical? \").toUpperCase();\r\n            \r\n                        if (dir.length() > 0) {\r\n                            if (dir.charAt(0) == 'H') {\r\n                                return HORIZONTAL;\r\n                            } else if (dir.charAt(0) == 'V') {\r\n                                return VERTICAL;\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid direction, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readCol() {\r\n                    while (true) {\r\n                        int col = readInt(\"Which column? (1-\" + MAX_COL + \") \");\r\n                        if (col >= 1 && col <= MAX_COL) {\r\n                            return col - 1;\r\n                        }\r\n                        System.out.println(\"Invalid column, please try again.\");\r\n                    }\r\n                }\r\n            \r\n                private int readRow() {\r\n                    while (true) {\r\n                        String row = readLine(\"Which row? (A-\" + MAX_ROW + \") \");\r\n                        row = row.toUpperCase();\r\n                        if (row.length() > 0) {\r\n                            char ch = row.charAt(0);\r\n                            if (ch >= 'A' && ch <= MAX_ROW) {\r\n                                return ch - 'A';\r\n                            }\r\n                        }\r\n                        System.out.println(\"Invalid row, please try again.\");\r\n                    }\r\n                }\r\n                private void playRound(Player player, Player cpu) {\r\n                    readLine(\"Hit enter for your turn.\");\r\n                    humanTurn(player, cpu);\r\n                }\r\n            \r\n                private void humanTurn(Player player, Player cpu) {\r\n                    System.out.println(\"Enemy grid\");\r\n                    player.printMyGuesses();\r\n                    System.out.println(\"It's your turn to guess.\");\r\n                    int row = readRow();\r\n                    int col = readCol();\r\n            \r\n                    boolean hit = player.makeGuess(row, col, cpu);\r\n            \r\n                    if (hit) {\r\n                        System.out.println(\"You got a hit!\");\r\n                    } else {\r\n                        System.out.println(\"Nope, that was a miss.\");\r\n                    }\r\n            \r\n                    player.printMyGuesses();\r\n                }\r\n            }import java.util.*;\r\npublic class Player\r\n{\r\n    public static final int[] SHIP_LENGTHS = {2, 3, 3, 4, 5};\r\n    public static final int NUM_SHIPS = 5;\r\n    \r\n    private ArrayList<Ship> ships;\r\n    \r\n    private Grid selfGrid;\r\n    private Grid otherGrid;\r\n    \r\n    public Player() {\r\n        this.ships = new ArrayList<Ship>();\r\n        this.selfGrid = new Grid();\r\n        this.otherGrid = new Grid();\r\n    }\r\n    \r\n    public void chooseShipLocation(Ship s, int row, int col, int direction) {\r\n        if(ships.size() < 5) {\r\n            s.setDirection(direction);\r\n            s.setLocation(row, col);\r\n            selfGrid.addShip(s);\r\n            ships.add(s);\r\n        }\r\n    }\r\n    \r\n    public void initializeShipsRandomly() {\r\n        //chosen by fair dice roll\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[0]), 0, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[1]), 1, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[2]), 2, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[3]), 3, 0, 0);\r\n        this.chooseShipLocation(new Ship(SHIP_LENGTHS[4]), 4, 0, 0);\r\n    }\r\n    \r\n    // Print your ships on the grid\r\n    public void printMyShips() {\r\n        selfGrid.printShips();\r\n    }\r\n    \r\n    // Print opponent guesses\r\n    public void printOpponentGuesses() {\r\n        selfGrid.printStatus();\r\n    }\r\n    \r\n    // Print your guesses\r\n    public void printMyGuesses() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    public int getRandomRowGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    public int getRandomColGuess() {\r\n        return Randomizer.nextInt(0, 10);\r\n    }\r\n    \r\n    public boolean hasWon() {\r\n        int total = 0;\r\n        for(int i = 0; i < Grid.NUM_ROWS; i++) {\r\n            for(int j = 0; j < Grid.NUM_COLS; j++) {\r\n                if(otherGrid.getStatus(i, j) == Location.HIT) total++;\r\n            }\r\n        }\r\n        return total >= 17;\r\n    }\r\n    \r\n    public boolean makeGuess(int row, int col, Player other) {\r\n        boolean guessHit = other.recordOpponentGuess(row, col);\r\n        \r\n        if(guessHit) {\r\n            otherGrid.markHit(row, col);\r\n        } else {\r\n            otherGrid.markMiss(row, col);\r\n        }\r\n        \r\n        return guessHit;\r\n    }\r\n    \r\n    public void printHitsDelivered() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    // Record a guess from the opponent\r\n    public boolean recordOpponentGuess(int row, int col) {\r\n        if(selfGrid.hasShip(row, col)) {\r\n            selfGrid.markHit(row, col);\r\n            return true;\r\n        }\r\n        else {\r\n            selfGrid.markMiss(row, col);\r\n            return false;\r\n        }\r\n    }\r\n}import java.util.*;\r\n\r\npublic class Randomizer{\r\n\r\n\tpublic static Random theInstance = null;\r\n\t\r\n\tpublic Randomizer(){\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic static Random getInstance(){\r\n\t\tif(theInstance == null){\r\n\t\t\ttheInstance = new Random();\r\n\t\t}\r\n\t\treturn theInstance;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return a random boolean value.\r\n\t * @return True or false value simulating a coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(){\r\n\t\treturn Randomizer.getInstance().nextBoolean();\r\n\t}\r\n\r\n\t/**\r\n\t * This method simulates a weighted coin flip which will return\r\n\t * true with the probability passed as a parameter.\r\n\t * \r\n\t * @param\tprobability\tThe probability that the method returns true, a value between 0 to 1 inclusive. \r\n\t * @return True or false value simulating a weighted coin flip.\r\n\t */\r\n\tpublic static boolean nextBoolean(double probability){\r\n\t\treturn Randomizer.nextDouble() < probability;\r\n\t}\r\n\t\r\n\t/**\r\n\t * This method returns a random integer.\r\n\t * @return A random integer.\r\n\t */\r\n\tpublic static int nextInt(){\r\n\t\treturn Randomizer.getInstance().nextInt();\r\n\t}\r\n\r\n\t/**\r\n\t * This method returns a random integer between 0 and n, exclusive.\r\n\t * @param n\tThe maximum value for the range.\r\n\t * @return A random integer between 0 and n, exclusive.\r\n\t */\r\n\tpublic static int nextInt(int n){\r\n\t\treturn Randomizer.getInstance().nextInt(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a number between min and max, inclusive.\r\n\t * @param min\tThe minimum integer value of the range, inclusive.\r\n\t * @param max\tThe maximum integer value in the range, inclusive.\r\n\t * @return A random integer between min and max.\r\n\t */\r\n\tpublic static int nextInt(int min, int max){\r\n\t\treturn min + Randomizer.nextInt(max - min + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between 0 and 1.\r\n\t * @return A random double between 0 and 1.\r\n\t */\r\n\tpublic static double nextDouble(){\r\n\t\treturn Randomizer.getInstance().nextDouble();\r\n\t}\r\n\r\n\t/**\r\n\t * Return a random double between min and max.\r\n\t * @param min The minimum double value in the range.\r\n\t * @param max The maximum double value in the rang.\r\n\t * @return A random double between min and max.\r\n\t */\r\n\tpublic static double nextDouble(double min, double max){\r\n\t\treturn min + (max - min) * Randomizer.nextDouble();\r\n\t}\r\n\r\n\t\r\n}public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}public class Location\r\n{\r\n    public static final int UNGUESSED = 0;\r\n    public static final int HIT = 1;\r\n    public static final int MISSED = 2;\r\n    \r\n    private int status;\r\n    private boolean hasShip;\r\n    \r\n    // Location constructor. \r\n    public Location() {\r\n        this.status = UNGUESSED;\r\n    }\r\n    \r\n    // Was this Location a hit?\r\n    public boolean checkHit() {\r\n        return status == HIT;\r\n    }\r\n    \r\n    // Was this location a miss?\r\n    public boolean checkMiss() {\r\n        return status == MISSED;\r\n    }\r\n    \r\n    // Was this location unguessed?\r\n    public boolean isUnguessed() {\r\n        return status == UNGUESSED;\r\n    }\r\n    \r\n    // Mark this location a hit.\r\n    public void markHit() {\r\n        status = HIT;\r\n    }\r\n    \r\n    // Mark this location a miss.\r\n    public void markMiss() {\r\n        status = MISSED;\r\n    }\r\n    \r\n    // Return whether or not this location has a ship.\r\n    public boolean hasShip() {\r\n        return hasShip;\r\n    }\r\n    \r\n    // Set the value of whether this location has a ship.\r\n    public void setShip(boolean val) {\r\n        this.hasShip = val;\r\n    }\r\n    \r\n    // Set the status of this Location.\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n    \r\n    // Get the status of this Location.\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n}public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method can be called on your own grid. To add a ship\r\n     * we will go to the ships location and mark a true value\r\n     * in every location that the ship takes up.\r\n     */\r\n    public void addShip(Ship s) {\r\n        int i = s.getRow(), j = s.getCol(), marked = 0;\r\n        while(marked < s.getLength()) {\r\n            setShip(i, j, true);\r\n            if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n            else j++;\r\n            \r\n            marked++;\r\n        }\r\n    }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}","address":"/codehs/java/projects/battleship/the-battleship-class.html"},{"title":"Battleship: The Grid Class","text":"Battleship: The Grid ClassBTW\r\n            The GridTester class is ignored by the autograder. You can just leave it how it is!public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","address":"/codehs/java/projects/battleship/the-grid-class.html"},{"title":"Battleship: The Location Class","text":"Battleship: The Location ClassBTW\r\n            The LocationTester class is ignored by the autograder. You can just leave it how it is!public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }","address":"/codehs/java/projects/battleship/the-location-class.html"},{"title":"Battleship: The Player Class","text":"Battleship: The Player ClassBTW\r\n            The PlayerTester class is ignored by the autograder. You can just leave it how it is!import java.util.*;\r\npublic class Player\r\n{\r\n    private static final int[] SHIP_LENGTHS = {2, 3, 3, 4, 5};\r\n    \r\n    private ArrayList<Ship> ships;\r\n    \r\n    private Grid selfGrid;\r\n    private Grid otherGrid;\r\n    \r\n    public Player() {\r\n        this.ships = new ArrayList<Ship>();\r\n        this.selfGrid = new Grid();\r\n        this.otherGrid = new Grid();\r\n    }\r\n    \r\n    public void chooseShipLocation(Ship s, int row, int col, int direction) {\r\n        if(ships.size() < 5) {\r\n            s.setDirection(direction);\r\n            s.setLocation(row, col);\r\n            selfGrid.addShip(s);\r\n            ships.add(s);\r\n        }\r\n    }\r\n    \r\n    // Print your ships on the grid\r\n    public void printMyShips() {\r\n        selfGrid.printShips();\r\n    }\r\n    \r\n    // Print opponent guesses\r\n    public void printOpponentGuesses() {\r\n        selfGrid.printStatus();\r\n    }\r\n    \r\n    // Print your guesses\r\n    public void printMyGuesses() {\r\n        otherGrid.printStatus();\r\n    }\r\n    \r\n    // Record a guess from the opponent\r\n    public boolean recordOpponentGuess(int row, int col) {\r\n        if(selfGrid.hasShip(row, col)) {\r\n            selfGrid.markHit(row, col);\r\n            return true;\r\n        }\r\n        else {\r\n            selfGrid.markMiss(row, col);\r\n            return false;\r\n        }\r\n    }\r\n}public class Grid\r\n{\r\n    private Location[][] grid;\r\n\r\n    // Constants for number of rows and columns.\r\n    public static final int NUM_ROWS = 10;\r\n    public static final int NUM_COLS = 10;\r\n    \r\n    // Create a new Grid. Initialize each Location in the grid\r\n    // to be a new Location object.\r\n    public Grid() {\r\n        this.grid = new Location[NUM_ROWS][NUM_COLS];\r\n        for(int i = 0; i < NUM_ROWS; i++) {\r\n            for(int j = 0; j < NUM_COLS; j++) {\r\n                grid[i][j] = new Location();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * This method can be called on your own grid. To add a ship\r\n    * we will go to the ships location and mark a true value\r\n    * in every location that the ship takes up.\r\n    */\r\n   public void addShip(Ship s) {\r\n       int i = s.getRow(), j = s.getCol(), marked = 0;\r\n       while(marked < s.getLength()) {\r\n           setShip(i, j, true);\r\n           if(s.getDirection() == 1/*Ship.HORIZONTAL*/) i++;\r\n           else j++;\r\n           \r\n           marked++;\r\n       }\r\n   }\r\n    \r\n    // Mark a hit in this location by calling the markHit method\r\n    // on the Location object.  \r\n    public void markHit(int row, int col) {\r\n        grid[row][col].markHit();\r\n    }\r\n    \r\n    // Mark a miss on this location.    \r\n    public void markMiss(int row, int col) {\r\n        grid[row][col].markMiss();\r\n    }\r\n    \r\n    // Set the status of this location object.\r\n    public void setStatus(int row, int col, int status) {\r\n        grid[row][col].setStatus(status);\r\n    }\r\n    \r\n    // Get the status of this location in the grid  \r\n    public int getStatus(int row, int col) {\r\n        return grid[row][col].getStatus();\r\n    }\r\n    \r\n    // Return whether or not this Location has already been guessed.\r\n    public boolean alreadyGuessed(int row, int col) {\r\n        return !grid[row][col].isUnguessed();\r\n    }\r\n    \r\n    // Set whether or not there is a ship at this location to the val   \r\n    public void setShip(int row, int col, boolean val) {\r\n        grid[row][col].setShip(val);\r\n    }\r\n    \r\n    // Return whether or not there is a ship here   \r\n    public boolean hasShip(int row, int col) {\r\n        return grid[row][col].hasShip();\r\n    }\r\n    \r\n    \r\n    // Get the Location object at this row and column position\r\n    public Location get(int row, int col) {\r\n        return grid[row][col];\r\n    }\r\n    \r\n    // Return the number of rows in the Grid\r\n    public int numRows() {\r\n        return NUM_ROWS;\r\n    }\r\n    \r\n    // Return the number of columns in the grid\r\n    public int numCols() {\r\n        return NUM_COLS;\r\n    }\r\n    \r\n    \r\n    // Print the Grid status including a header at the top\r\n    // that shows the columns 1-10 as well as letters across\r\n    // the side for A-J\r\n    // If there is no guess print a -\r\n    // If it was a miss print a O\r\n    // If it was a hit, print an X\r\n    // A sample print out would look something like this:\r\n    // \r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - - - - - - - - - - \r\n    // C - - - O - - - - - - \r\n    // D - O - - - - - - - - \r\n    // E - X - - - - - - - - \r\n    // F - X - - - - - - - - \r\n    // G - X - - - - - - - - \r\n    // H - O - - - - - - - - \r\n    // I - - - - - - - - - - \r\n    // J - - - - - - - - - - \r\n    public void printStatus() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((getStatus(i, j) == Location.MISSED ? \"O\" : getStatus(i, j) == Location.HIT ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    \r\n    // Print the grid and whether there is a ship at each location.\r\n    // If there is no ship, you will print a - and if there is a\r\n    // ship you will print a X. You can find out if there was a ship\r\n    // by calling the hasShip method.\r\n    //\r\n    //   1 2 3 4 5 6 7 8 9 10 \r\n    // A - - - - - - - - - - \r\n    // B - X - - - - - - - - \r\n    // C - X - - - - - - - - \r\n    // D - - - - - - - - - - \r\n    // E X X X - - - - - - - \r\n    // F - - - - - - - - - - \r\n    // G - - - - - - - - - - \r\n    // H - - - X X X X - X - \r\n    // I - - - - - - - - X - \r\n    // J - - - - - - - - X - \r\n    public void printShips() {\r\n        for(int i = -1; i < NUM_ROWS; i++) {\r\n            for(int j = -1; j < NUM_COLS; j++) {\r\n                \r\n                if(i == -1 && j == -1) System.out.print(\"  \");\r\n                else if(i == -1 && j == 9) System.out.print((j+1));\r\n                else if(i == -1) System.out.print((j+1) + \" \");\r\n                else if(j == -1) System.out.print((char)(65 + i) + \" \");\r\n                else System.out.print((hasShip(i, j) ? \"X\" : \"-\") + \" \");\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n}public class Location\r\n            {\r\n                public static final int UNGUESSED = 0;\r\n                public static final int HIT = 1;\r\n                public static final int MISSED = 2;\r\n                \r\n                private int status;\r\n                private boolean hasShip;\r\n                \r\n                // Location constructor. \r\n                public Location() {\r\n                    this.status = UNGUESSED;\r\n                }\r\n                \r\n                // Was this Location a hit?\r\n                public boolean checkHit() {\r\n                    return status == HIT;\r\n                }\r\n                \r\n                // Was this location a miss?\r\n                public boolean checkMiss() {\r\n                    return status == MISSED;\r\n                }\r\n                \r\n                // Was this location unguessed?\r\n                public boolean isUnguessed() {\r\n                    return status == UNGUESSED;\r\n                }\r\n                \r\n                // Mark this location a hit.\r\n                public void markHit() {\r\n                    status = HIT;\r\n                }\r\n                \r\n                // Mark this location a miss.\r\n                public void markMiss() {\r\n                    status = MISSED;\r\n                }\r\n                \r\n                // Return whether or not this location has a ship.\r\n                public boolean hasShip() {\r\n                    return hasShip;\r\n                }\r\n                \r\n                // Set the value of whether this location has a ship.\r\n                public void setShip(boolean val) {\r\n                    this.hasShip = val;\r\n                }\r\n                \r\n                // Set the status of this Location.\r\n                public void setStatus(int status) {\r\n                    this.status = status;\r\n                }\r\n                \r\n                // Get the status of this Location.\r\n                public int getStatus() {\r\n                    return status;\r\n                }\r\n            }public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","address":"/codehs/java/projects/battleship/the-player-class.html"},{"title":"Battleship: The Ship Class","text":"Battleship: The Ship ClassBTW\r\n            The ShipTester class is ignored by the autograder. You can just leave it how it is!public class Ship\r\n{\r\n    public static final int UNSET = -1;\r\n    public static final int HORIZONTAL = 0;\r\n    public static final int VERTICAL = 1;\r\n    \r\n    private int row;\r\n    private int col;\r\n    private int length;\r\n    private int direction;\r\n\r\n    // Constructor. Create a ship and set the length.\r\n    public Ship(int length) {\r\n        this.row = -1;\r\n        this.col = -1;\r\n        this.direction = UNSET;\r\n        this.length = length;\r\n    }\r\n    \r\n    // Has the location been initialized\r\n    public boolean isLocationSet() {\r\n        return row != -1 && this.col != -1;\r\n    }\r\n    \r\n    // Has the direction been initialized\r\n    public boolean isDirectionSet() {\r\n        return direction != UNSET;\r\n    }\r\n    \r\n    // Set the location of the ship \r\n    public void setLocation(int row, int col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    \r\n    // Set the direction of the ship\r\n    public void setDirection(int direction) {\r\n        this.direction = direction;\r\n    }\r\n    \r\n    // Getter for the row value\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n    \r\n    // Getter for the column value\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n    \r\n    // Getter for the length of the ship\r\n    public int getLength() {\r\n        return length;\r\n    }\r\n    \r\n    // Getter for the direction\r\n    public int getDirection() {\r\n        return direction;\r\n    }\r\n    \r\n    // Helper method to get a string value from the direction\r\n    private String directionToString() {\r\n        if(direction == HORIZONTAL) return \"horizontal\";\r\n        else if(direction == VERTICAL) return \"vertical\";\r\n        else return \"unset direction\";\r\n    }\r\n    \r\n    // Helper method to get a (row, col) string value from the location\r\n    private String locationToString() {\r\n        if(row == -1 && col == -1) return \"(unset location)\";\r\n        else return \"(\" + row + \", \" + col + \")\";\r\n    }\r\n    \r\n    // toString value for this Ship\r\n    public String toString() {\r\n        return directionToString() + \" ship of length \" + length + \" at \" + locationToString();\r\n    }\r\n}","address":"/codehs/java/projects/battleship/the-ship-class.html"},{"title":"CodeHS Projects","text":"CodeHS ProjectsJava Projects\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Battleship\r\n                            \r\n                            \r\n                                \r\n                                    The Ship Class\r\n                                \r\n                                \r\n                                    The Location Class\r\n                                \r\n                                \r\n                                    The Grid Class\r\n                                \r\n                                \r\n                                    Adding a Ship to the Grid\r\n                                \r\n                                \r\n                                    The Player Class\r\n                                \r\n                                \r\n                                    Finishing the Game","address":"/codehs/java/projects/"},{"title":"10.1.2 Guess the Word, Part 1","text":"10.1.2 Guess the Word, Part 1","address":"/codehs/python3/10/1/guess-the-word-part-1.html"},{"title":"10.1.3 Guess the Word, Part 2","text":"10.1.3 Guess the Word, Part 2","address":"/codehs/python3/10/1/guess-the-word-part-2.html"},{"title":"10.1.4 Guess the Word, Part 3","text":"10.1.4 Guess the Word, Part 3","address":"/codehs/python3/10/1/guess-the-word-part-3.html"},{"title":"10.1.5 Guess the Word, Part 4","text":"10.1.5 Guess the Word, Part 4","address":"/codehs/python3/10/1/guess-the-word-part-4.html"},{"title":"2.1.4 Stretched Slinky","text":"2.1.4 Stretched Slinkycircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)\r\ncircle(35)\r\nforward(40)","address":"/codehs/python3/2/1/stretched-slinky.html"},{"title":"2.10.4 Bubble Wrap 2.0","text":"2.10.4 Bubble Wrap 2.0\"\"\"\r\nThis code will fill the canvas with light blue circles.\r\n\r\nNow add a function that will draw a white highlight on each bubble.\r\n\"\"\"\r\nspeed(0)\r\n\r\n# This function will draw one row of 10 circles\r\ndef draw_circle_row():\r\n    for i in range(10):\r\n        pendown()\r\n        begin_fill()\r\n        color(\"light blue\")\r\n        circle(20)\r\n        end_fill()\r\n        penup()\r\n        forward(40)\r\n\r\n# This function will move Tracy from end of row up to beginning of the row on top        \r\ndef move_up_a_row():\r\n    left(90)\r\n    forward(40)\r\n    right(90)\r\n    backward(400)\r\n    \r\n# Send Tracy to starting position in bottom left corner\r\npenup()\r\nsetposition(-180,-200)\r\n\r\n# Call circle drawing function 10 times to fill ten rows\r\nfor i in range(10):\r\n    draw_circle_row()\r\n    move_up_a_row()","address":"/codehs/python3/2/10/bubble-wrap-2-0.html"},{"title":"2.10.5 Sidewalk","text":"2.10.5 Sidewalkspeed(0)\r\npenup()\r\nsetposition(-200,-200)\r\n\r\ndef square():\r\n    \r\n    for i in range(8):\r\n\r\n        pendown()\r\n        \r\n        right(45)\r\n        \r\n        circle(35,360,4)\r\n        \r\n        left(45)\r\n        \r\n        forward(50)\r\n        \r\n        penup()\r\n        \r\nsetposition(-200,-200)\r\n        \r\nfor i in range(4):\r\n            \r\n    square()\r\n            \r\n    left(90)","address":"/codehs/python3/2/10/sidewalk.html"},{"title":"2.11.4 Dartboard","text":"2.11.4 Dartboardspeed(9)\r\nradius = 25\r\npenup()\r\nsetposition(0,-25)\r\ndef draw_dart_board():\r\n    pendown()\r\n    circle(radius)\r\n    right(90)\r\n    penup()\r\n    forward(25)\r\n    pendown()\r\n    left(90)\r\nfor i in range(4):\r\n    draw_dart_board()\r\n    radius = radius + 25","address":"/codehs/python3/2/11/dartboard.html"},{"title":"2.11.5 Line of Increasing Blocks","text":"2.11.5 Line of Increasing Blocksspeed(0)\r\nlength = 10\r\n\r\ndef draw_block():\r\n    pendown()\r\n    for i in range(4):\r\n        forward(length)\r\n        left(90)\r\n    penup()\r\n    forward(length*2)\r\npenup()\r\nsetposition(-150,0)\r\n\r\nfor i in range(5):\r\n    draw_block()\r\n    length = length + 10","address":"/codehs/python3/2/11/line-of-increasing-blocks.html"},{"title":"2.12.4 Colored Dartboard","text":"2.12.4 Colored Dartboardradius=100\r\nfor i in range(4):\r\n    penup()\r\n    setposition(0,0)\r\n    right(90)\r\n    forward(radius)\r\n    left(90)\r\n    color_choice= input(\"what color should the circle be?\")\r\n    color(color_choice)\r\n    begin_fill()\r\n    circle(radius)\r\n    end_fill()\r\n    radius=radius-25","address":"/codehs/python3/2/12/colored-dartboard.html"},{"title":"2.12.5 Four Corners","text":"2.12.5 Four Cornersint(input(\"square_length\"))\r\npenup()\r\nsetposition(-200,-200)\r\npendown()\r\nleft(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)\r\n    penup()\r\n    forward(400)\r\n    pendown()\r\n    right(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)\r\n    forward(400)\r\n    pendown()\r\n    right(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)\r\n    forward(400)\r\n    pendown()\r\n    right(90)\r\nfor i in range(4):\r\n    forward(50)\r\n    right(90)","address":"/codehs/python3/2/12/four-corners.html"},{"title":"2.13.5 Circle in a Square","text":"2.13.5 Circle in a Squarefirst_radius=int(input(\"what is the first circle's radius?:\"))\r\ndef draw_square_big(color_choice, radius_choice):\r\n    penup()\r\n    backward(first_radius)\r\n    pendown()\r\n    color(color_choice)\r\n    begin_fill()\r\nfor i in range(4):\r\n    forward(first_radius*2)\r\n    left(90)\r\n    end_fill()\r\ndef draw_circle_wide(color_choice, radius_choice):\r\n    pendown()\r\n    color(color_choice)\r\n    begin_fill()\r\n    circle(radius_choice)\r\n    end_fill()\r\n    penup()\r\n    setposition(0,-first_radius)\r\ndraw_square_big(\"red\", first_radius)\r\npenup()\r\nsetposition(0,-first_radius)\r\ndraw_circle_wide(\"blue\", first_radius)","address":"/codehs/python3/2/13/circle-in-a-square.html"},{"title":"2.13.4 Colorful Caterpillar","text":"2.13.4 Colorful Caterpillarpenup()\r\nbackward(140)\r\ndef draw_circle(color_choice):\r\n    begin_fill()\r\n    color(color_choice)\r\n    circle(20)\r\n    end_fill()\r\n    forward(40)\r\nfor i in range (8):\r\n    color_choice = input(\"Enter color: \")\r\n    draw_circle(color_choice)","address":"/codehs/python3/2/13/colorful-caterpillar.html"},{"title":"2.13.6 Snowman","text":"2.13.6 Snowman# put imput\r\ninputs = [100]\r\n#functions\r\ndef draw_circle(radius):\r\n    pendown()\r\n    begin_fill()\r\n    circle(radius)\r\n    end_fill()\r\n    penup()\r\n    left(90)\r\n    forward(radius*2)\r\n    right(90)\r\n    penup()\r\nsetposition(0,-200)\r\ncolor(\"gray\")\r\nbottom_radius = int(input(\"What should the radius of the bottom circle be?: \"))\r\n#parameters\r\ndraw_circle(bottom_radius)\r\ndraw_circle(bottom_radius/2)\r\ndraw_circle(bottom_radius/4)","address":"/codehs/python3/2/13/snowman.html"},{"title":"2.14.4 Geometry 2.0","text":"2.14.4 Geometry 2.0penup()\r\nsetposition(0,-100)\r\npendown()\r\nradius = 20\r\nfor i in range(7):\r\n    circle(radius,360,i)\r\n    radius=(radius + 20)","address":"/codehs/python3/2/14/geometry-2-0.html"},{"title":"2.15.4 Dartboard using i","text":"2.15.4 Dartboard using iradius = 25\r\npenup()\r\nsetposition(0,-25)\r\ndef draw_dart_board():\r\n    pendown()\r\n    circle(radius)\r\n    right(90)\r\n    penup()\r\n    forward(25)\r\n    pendown()\r\n    left(90)\r\nfor i in range(4):\r\n    draw_dart_board()\r\n    radius = radius + 25","address":"/codehs/python3/2/15/dartboard-using-i.html"},{"title":"2.15.5 Phone Signal","text":"2.15.5 Phone Signalheight = 10\r\n\r\nfor i in range(5):\r\n    for i in range(2):\r\n        forward(10)\r\n        left(90)\r\n        forward(height)\r\n        left(90)\r\n    penup()\r\n    forward(25)\r\n    pendown()\r\n    height = height + 10","address":"/codehs/python3/2/15/phone-signal.html"},{"title":"2.16.5 Black and White Squares","text":"2.16.5 Black and White Squaresinputs = [\"Yes\"]\r\ndef draw_black_square():\r\n    color(\"black\")\r\n    begin_fill()\r\n    pendown()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\nblack = input(\"Is square black? (Yes/No): \")\r\nif black %\"Yes\":\r\n    penup()\r\n    right(90)\r\nfor i in range(1):\r\n     pendown()","address":"/codehs/python3/2/16/black-and-white-squares.html"},{"title":"2.16.4 Happy Face","text":"2.16.4 Happy Faceinputs = [\"Yes\"]\r\ndef draw_eye():\r\n    color(\"black\")\r\n    begin_fill()\r\n    pendown()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\nhappy = input(\"Are you happy? (Yes/No): \")\r\nif happy == \"Yes\":\r\n    penup()\r\n    right(90)","address":"/codehs/python3/2/16/happy-face.html"},{"title":"2.17.5 Happy/ Sad Face","text":"2.17.5 Happy/ Sad Faceinputs = [\"Yes\"]\r\ndef draw_eye():\r\n    color(\"black\")\r\n    begin_fill()\r\n    pendown()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\nhappy = input(\"Are you happy? (Yes/No): \")\r\nif happy == \"Yes\":\r\n    penup()\r\n    right(90)","address":"/codehs/python3/2/17/happy-sad-face.html"},{"title":"2.17.4 Rating","text":"2.17.4 Ratingrating= 8\r\ndef red_ex():\r\n    pensize(5)\r\n    color(\"red\")\r\n    left(45)\r\n    for i in range(4):\r\n        forward(100)\r\n        backward(100)\r\n        left(90)\r\ndef yellow_line():\r\n    pensize(5)\r\n    color(\"yellow\")\r\n    forward(100)\r\ndef green_check():\r\n    pensize(5)\r\n    color(\"green\")\r\n    left(45)\r\n    for i in range(2):\r\n        forward(100)\r\n        backward(100)\r\nnumber = int(input(\"Enter a number: \"))\r\nif number < 5:\r\n    red_ex()\r\nelif number == 7:\r\n    yellow_line()\r\nelse:\r\n    green_check()","address":"/codehs/python3/2/17/rating.html"},{"title":"2.18.5 Guess a Number","text":"2.18.5 Guess a Numberuser_number= int(input(\"Pick a number from 1-10?:\"))\r\nsecret_number=7\r\ndef draw_checkmark():\r\n    penup()\r\n    backward(50)\r\n    right(90)\r\n    pendown()\r\n    pensize(15)\r\n    color(\"green\")\r\n    left(45)\r\n    forward(50)\r\n    left(90)\r\n    forward(100)\r\n    penup()\r\ndraw_checkmark()","address":"/codehs/python3/2/18/guess-a-number.html"},{"title":"2.18.4 Increasing Squares","text":"2.18.4 Increasing Squareslength = 50\r\nspeed(0)\r\n#while loop for drawing the squares\r\ndef drawSquare(l):\r\n    \r\n    for i in range(4):\r\n        forward(l)\r\n        left(90)\r\nwhile length < 400:\r\n    penup()\r\n    backward(length/2)\r\n    right(90)\r\n    forward(length/2)\r\n    left(90)\r\n    pendown()\r\n    drawSquare(length)\r\n    penup()\r\n    forward(length/2)\r\n    left(90)\r\n    forward(length/2)\r\n    right(90)\r\n    length = length + 50","address":"/codehs/python3/2/18/increasing-squares.html"},{"title":"2.19.5 Circle Pyramid 2.0","text":"2.19.5 Circle Pyramid 2.0radius = int(input(\"What is the radius of the circle? \"))\r\nrow_value= int(input(\"What is the row value of the circle? \"))\r\ndef row_value():\r\n    setposition(0, radius)\r\nfor i in range(15):\r\n    circle(25)\r\n    row_value()","address":"/codehs/python3/2/19/circle-pyramid-2-0.html"},{"title":"2.19.4 Guess a Number 2.0","text":"2.19.4 Guess a Number 2.0user_number= int(input(\"Pick a number from 1-10?:\"))\r\nsecret_number=7\r\ndef draw_checkmark():\r\n    penup()\r\n    backward(50)\r\n    right(90)\r\n    pendown()\r\n    pensize(15)\r\n    color(\"green\")\r\n    left(45)\r\n    forward(50)\r\n    left(90)\r\n    forward(100)\r\n    penup()\r\ndraw_checkmark()\r\nif user_number < 5:\r\n    circle(50)\r\nelif count > 5:\r\n    circle(50,360,4)\r\nelse:\r\n    forward(50)","address":"/codehs/python3/2/19/guess-a-number-2-0.html"},{"title":"2.2.5 Caterpillar","text":"2.2.5 Caterpillarcircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()\r\ncircle(20)\r\npenup()\r\nforward(40)\r\npendown()","address":"/codehs/python3/2/2/caterpillar.html"},{"title":"2.2.4 Shorter Dashed Line","text":"2.2.4 Shorter Dashed Linepenup()\r\nbackward(200)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)\r\npendown()\r\nforward(50)\r\npenup()\r\nforward(50)","address":"/codehs/python3/2/2/shorter-dashed-line.html"},{"title":"2.3.6 4 Columns","text":"2.3.6 4 Columnspenup()\r\nleft(90)\r\nforward(200)\r\npendown()\r\nright(180)\r\nforward(400)\r\npenup()\r\nleft(90)\r\npenup()\r\nforward(100)\r\npendown()\r\nleft(90)\r\nforward(400)\r\nleft(90)\r\npenup()\r\nforward(200)\r\npendown()\r\nleft(90)\r\nforward(400)","address":"/codehs/python3/2/3/4-columns.html"},{"title":"2.3.5 Rectangle","text":"2.3.5 Rectangleforward(50)\r\nleft(90)\r\nforward(100)\r\nleft(90)\r\nforward(50)\r\nleft(90)\r\nforward(100)\r\nleft(90)","address":"/codehs/python3/2/3/rectangle.html"},{"title":"2.4.6 4 Columns 2.0","text":"2.4.6 4 Columns 2.0penup()\r\nbackward(100)\r\nright(90)\r\nforward(200)\r\nleft(180)\r\nfor i in range(2):\r\n    pendown()\r\n    forward(400)\r\n    right(90)\r\n    forward(400)\r\n    penup()\r\n    right(90)\r\n    forward(50)\r\n    right(90)","address":"/codehs/python3/2/4/4-columns-2-0.html"},{"title":"2.4.5 Row of Circles","text":"2.4.5 Row of Circlespenup()\r\nbackward(200)\r\nforward(10)\r\nfor i in range(20):\r\n    pendown()\r\n    circle(10)\r\n    penup()\r\n    forward(20)","address":"/codehs/python3/2/4/row-of-circles.html"},{"title":"2.5.7 Circle Pyramid","text":"2.5.7 Circle Pyramidspeed(5)\r\npenup()\r\nsetposition(-100, -200)\r\nfor i in range(3):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\nsetposition(-50,-100)\r\nfor i in range(2):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\nsetposition(0,0)\r\npendown()\r\ncircle(50)","address":"/codehs/python3/2/5/circle-pyramid.html"},{"title":"2.5.5 Hexagon","text":"2.5.5 Hexagonspeed(5)\r\nfor i in range(6):\r\n    forward(50)\r\n    left(60)","address":"/codehs/python3/2/5/hexagon.html"},{"title":"2.5.6 'X' Marks the Spot","text":"2.5.6 'X' Marks the Spotspeed(5)\r\nright(45)\r\nfor i in range(4):\r\n    forward(100)\r\n    backward(100)\r\n    left(90)","address":"/codehs/python3/2/5/x-marks-the-spot.html"},{"title":"2.6.4 Circle Pyramid with Comments","text":"2.6.4 Circle Pyramid with Comments\"\"\"\r\nMoves Tracy to place the bottom row of circles\r\n\"\"\"\r\n\r\nspeed(5)\r\npenup()\r\nsetposition(-100, -200)\r\n\r\n# Tells tracy to draw 3 circles\r\nfor i in range(3):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\n\r\n# Sets tracy up to place the middle row of circles\r\nsetposition(-50, -100)\r\n\r\n# Tells tracy to place the middle row of circles\r\nfor i in range (2):\r\n    pendown()\r\n    circle(50)\r\n    penup()\r\n    forward(100)\r\n\r\n# Sets up Tracy to place the final ball at the top\r\nsetposition(0,0)\r\n\r\n#tracy placing the final ball\r\npendown()\r\ncircle(50)","address":"/codehs/python3/2/6/circle-pyramid-with-comments.html"},{"title":"2.8.4 Beaded Bracelet","text":"2.8.4 Beaded Braceletpenup()\r\n\r\nforward(-100)\r\n\r\nright(90)\r\n\r\npendown()\r\n\r\ndef beaded_bracelet():\r\n\r\n    circle(10)\r\n\r\n    penup()\r\n\r\n    forward(20)\r\n\r\n    left(10)\r\n\r\n    pendown()\r\n\r\nfor i in range(36):\r\n\r\n    beaded_bracelet()","address":"/codehs/python3/2/8/beaded-bracelet.html"},{"title":"2.8.5 Shape Stack","text":"2.8.5 Shape Stackspeed(0)\r\n\r\npenup()\r\nsetposition(-25,200)\r\n\r\ndef circle_twenty_five():\r\n    circle(25)\r\ndef square_fifty():\r\n    forward(25)\r\n    left(90)\r\n    forward(50)\r\n    left(90)\r\n    forward(50)\r\n    left(90)\r\n    forward(50)\r\n    left(90)\r\n    forward(25)\r\n         \r\npenup()\r\nsetposition(-25,200)\r\nright(90)\r\nforward(25)\r\npendown()\r\n         \r\nfor i in range(4):\r\n    pendown()\r\n    circle_twenty_five()\r\n    penup()\r\n    forward(50)\r\n    pendown()\r\n    square_fifty()\r\n    penup()\r\n    forward(50)\r\n             \r\nsetposition(-25,200)\r\nleft(90)","address":"/codehs/python3/2/8/shape-stack.html"},{"title":"2.9.6 Colorful Bracelet","text":"2.9.6 Colorful Braceletspeed(0)\r\n \r\n\r\ndef make_purple_bead():\r\n     penup()\r\n     forward(100)\r\n     pendown()\r\n     color(\"purple\")\r\n     begin_fill()\r\n     circle(10)\r\n     end_fill()\r\n     penup()\r\n     backward(100)\r\n     left(10)\r\n     \r\ndef make_red_bead():\r\n    penup()\r\n    forward(100)\r\n    pendown()\r\n    color(\"red\")\r\n    begin_fill()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\n    backward(100)\r\n    left(10)\r\n          \r\ndef make_blue_bead():\r\n    penup()\r\n    forward(100)\r\n    pendown()\r\n    color(\"blue\")\r\n    begin_fill()\r\n    circle(10)\r\n    end_fill()\r\n    penup()\r\n    backward(100)\r\n    left(10)\r\nfor i in range(12):\r\n    make_purple_bead()\r\n    make_blue_bead()\r\n    make_red_bead()","address":"/codehs/python3/2/9/colorful-bracelet.html"},{"title":"2.9.5 Four Colored Triangles","text":"2.9.5 Four Colored Trianglesspeed(5)\r\npensize(5)\r\n\r\ndef draw_triangle():\r\n    pendown()\r\n    color(\"red\")\r\n    forward(50)\r\n    left(120)\r\n    color(\"blue\")\r\n    forward(50)\r\n    left(120)\r\n    color(\"green\")\r\n    forward(50)\r\n    left(120)\r\npenup()\r\nbackward(100)\r\nfor i in range (4):\r\n    draw_triangle()\r\n    penup()\r\n    forward(50)","address":"/codehs/python3/2/9/four-colored-triangles.html"},{"title":"2.9.7: Kid's Shapes Toy","text":"2.9.7: Kid's Shapes Toydef red_diamond():\r\n    color(\"red\")\r\n    pendown()\r\n    begin_fill()\r\n    circle(60, 360, 4)\r\n    end_fill()\r\n    penup()\r\n\r\ndef blue_circle():\r\n    pendown()\r\n    color(\"blue\")\r\n    begin_fill()\r\n    circle(60)\r\n    end_fill()\r\n    penup()\r\n\r\ndef green_pentagon():\r\n    pendown()\r\n    color(\"green\")\r\n    begin_fill()\r\n    circle(60, 360, 5)\r\n    end_fill()\r\n    penup()\r\n\r\ndef yellow_half_circle():\r\n    pendown()\r\n    color(\"yellow\")\r\n    begin_fill()\r\n    circle(60, 180)\r\n    end_fill()\r\n    penup()\r\n\r\npenup()\r\nbackward(100)\r\nleft(90)\r\nforward(40)\r\nright(90)\r\n\r\nred_diamond()\r\nforward(200)\r\nblue_circle()\r\nright(90)\r\nforward(200)\r\nleft(90)\r\ngreen_pentagon()\r\nbackward(200)\r\nyellow_half_circle()","address":"/codehs/python3/2/9/kids-shapes-toy.html"},{"title":"3.1.5 Introduce Yourself","text":"3.1.5 Introduce Yourselfprint(\"My name is Elle\")\r\nprint(\"I like writing python coding\")","address":"/codehs/python3/3/1/introduce-yourself.html"},{"title":"3.1.7 Vertical name","text":"3.1.7 Vertical nameprint(\"S\")\r\nprint(\"a\")\r\nprint(\"m\")\r\nprint(\"m\")\r\nprint(\"y\")","address":"/codehs/python3/3/1/vertical-name.html"},{"title":"3.2.6 Make Some Variables!","text":"3.2.6 Make Some Variables!name = \"Alen\"\r\nnumber = 45\r\n\r\nprint(name)\r\nprint(number)","address":"/codehs/python3/3/2/make-some-variables.html"},{"title":"3.3.7 Age","text":"3.3.7 Ageage = int(input(\"Enter your age:\"))\r\nbdaycandels = age + 1\r\nprint(\"You will need this many candles for your birthday cake:\")\r\nprint(bdaycandels)","address":"/codehs/python3/3/3/age.html"},{"title":"3.3.6 Hello","text":"3.3.6 Hellouser_name = input(\"What is your name?:\")\r\nprint(\"Hello\")\r\nprint(user_name)","address":"/codehs/python3/3/3/hello-name.html"},{"title":"3.4.5 Add Parentheses","text":"3.4.5 Add Parenthesesprint(2 + 3 * (4 + 8))","address":"/codehs/python3/3/4/add-parentheses.html"},{"title":"3.4.8 Rectangle","text":"3.4.8 Rectangle","address":"/codehs/python3/3/4/rectangle.html"},{"title":"3.5.6 Introduce Yourself, Part 2","text":"3.5.6 Introduce Yourself, Part 2name= \"Otis\"\r\nage= 14\r\nprint(\"Hi!\" + \" My name is \" + name +\" and I am \" + str(age) + \" years old.\")","address":"/codehs/python3/3/5/introduce-yourself-part-2.html"},{"title":"3.5.7 Rectangle, Part 2","text":"3.5.7 Rectangle, Part 2length= 50\r\nwidth= 30\r\nprint(\"Area:\" + str(length))\r\nprint(\"Perimeter:\" + str(width))","address":"/codehs/python3/3/5/rectangle-part-2.html"},{"title":"3.5.8 Rectangle, Part 3","text":"3.5.8 Rectangle, Part 3length = int(input(\"Length: \"))\r\nwidth = int(input(\"Width: \"))\r\nprint (\"Area: \" + str(length * width))\r\nprint (\"Perimeter: \" + str(2 * (length + width)))","address":"/codehs/python3/3/5/rectangle-part-3.html"},{"title":"3.6.5 Add Comments!","text":"3.6.5 Add Comments!\"\"\"this code will ask user imput on what is your name\"\"\"\r\n\r\nfirst_name = input(\"Enter your first name: \")\r\nmiddle_name = input(\"Enter your middle name: \")\r\nlast_name = input(\"Enter your last name: \")\r\n#the code will write your full name at the end\r\nfull_name = first_name + \" \" + middle_name + \" \" + last_name\r\nprint(full_name)","address":"/codehs/python3/3/6/add-comments.html"},{"title":"4.1.5 Plants","text":"4.1.5 Plantsneeds_water = True\r\nneeds_to_be_repotted = False\r\nprint(\"Needs water: \" + str(needs_water))\r\nprint (str(needs_to_be_repotted))\r\nprint(needs_water)","address":"/codehs/python3/4/1/plants.html"},{"title":"4.2.6 Is It Raining?","text":"4.2.6 Is It Raining?raining= True\r\nif raining:\r\n    print(\"I'm going to dance in the rain!\")\r\nelse:\r\n    print(str(\"I'm going to dance in the sun!\"))","address":"/codehs/python3/4/2/is-it-raining.html"},{"title":"4.3.6 Old Enough to Vote?","text":"4.3.6 Old Enough to Vote?your_age = int(input(\"How old are you?: \"))\r\nage_requirement = 18\r\ncan_vote= your_age >= age_requirement\r\nif can_vote:\r\n    print(\"old enough to vote\")\r\nelse:\r\n    print(\"not old enough to vote\")","address":"/codehs/python3/4/3/old-enough-to-vote.html"},{"title":"4.3.7 Positive, Zero, or Negative?","text":"4.3.7 Positive, Zero, or Negative?random_number = int(input(\"Enter a number: \"))\r\nif random_number < 0:\r\n    print(\"That number is negative!\")\r\nelif random_number > 0:\r\n    print(\"That number is positive!\")\r\nelse:\r\n    print(\"That number is zero!\")","address":"/codehs/python3/4/3/positive-zero-or-negative.html"},{"title":"4.3.9 Table Reservation","text":"4.3.9 Table Reservationreservation_name = \"Shonda\"\r\nname = input(\"Name: \")\r\nif name == reservation_name:\r\n    print (\"Right this way!\")\r\nelse:\r\n    print (\"Sorry, we don't have a reservation under that name.\")","address":"/codehs/python3/4/3/table-reservation.html"},{"title":"4.4.4 Administrators, Teachers, and Students","text":"4.4.4 Administrators, Teachers, and Studentsrole = input(\"Are you an administrator, teacher, or student? \")\r\nif role == \"teacher\" or role == \"administrator\":\r\n    print (\"Administrators and teachers get keys!\")\r\nelif role == \"student\":\r\n    print (\"Students do not get keys!\")\r\nelse:\r\n    print (\"You can only be an administrator, a teacher, or a student!\")","address":"/codehs/python3/4/4/administrators-teachers-and-students.html"},{"title":"4.4.5 Presidential Eligibility","text":"4.4.5 Presidential Eligibilityage = int(input(\"Age: \"))\r\nif age >= 35:\r\n    print (\"You are eligible to run for president.\")\r\nelse:\r\n    print (\"You are not eligible to run for president.\")","address":"/codehs/python3/4/4/presidential-eligibility.html"},{"title":"4.5.4 Correct Portion","text":"4.5.4 Correct Portion# Amount of food and number of people\r\ntons_of_food = 0.07\r\nnum_people = 25\r\n# Determine how much food each person gets\r\ntons_of_food_per_person =round(tons_of_food)/ round(num_people)\r\nprint(tons_of_food_per_person)\r\n# Ask the user how much food they took\r\ntons_taken = float(input(\"How many tons of food did you take? \"))\r\nif round(tons_taken, 5) == round(tons_of_food_per_person, 5):\r\n    print (\"Good job, you took the right amount of food!\")\r\nelse:\r\n    print (\"You took the wrong amount of food!\")","address":"/codehs/python3/4/5/correct-portion.html"},{"title":"5.1.6 2 Through 20 Even","text":"5.1.6 2 Through 20 Evennum = 2\r\n\r\nwhile num <= 20:\r\n    print(num)\r\n    num = num + 2","address":"/codehs/python3/5/1/2-through-20-even.html"},{"title":"5.1.7 Divisibility","text":"5.1.7 Divisibilitynumerator = int(input(\"Enter a numerator: \"))\r\ndenominator = int(input(\"Enter denominator: \"))\r\n\r\n# Use a while loop here to repeatedly ask the user for\r\n# a denominator for as long as the denominator is 0\r\n# (or, put another way, until the denominator is not\r\n# equal to 0).\r\n\r\nwhile denominator == 0:\r\n    denominator = int(input(\"Enter denominator: \"))\r\n\r\nif int(numerator / denominator) * denominator == numerator:\r\n    print(\"Divides evenly!\")\r\nelse:\r\n    print(\"Doesn't divide evenly.\")","address":"/codehs/python3/5/1/divisibility.html"},{"title":"5.2.8 Average Test Score","text":"5.2.8 Average Test Scoresum = 0\r\n\r\nfor i in range(3):\r\n    next = int(input(\"Enter a number: \"))\r\n    sum = sum + next\r\n    \r\nprint (\"Average: \" + str(sum/ 3))","address":"/codehs/python3/5/2/average-test-score.html"},{"title":"5.2.5 Counting 10 to 100 by Tens","text":"5.2.5 Counting 10 to 100 by Tensfor i in range(10, 101, 10):\r\n    print(i)","address":"/codehs/python3/5/2/counting-10-to-100-by-tens.html"},{"title":"5.2.9 How Many Names?","text":"5.2.9 How Many Names?names = \"\"\r\nn = int(input(\"How many names would you like to say? \"))\r\n\r\nfor i in range(n):\r\n    next = input(\"Enter a name: \")\r\n    names = names + next + \" \"\r\nprint(names)","address":"/codehs/python3/5/2/how-many-names.html"},{"title":"5.3.7 Higher/ Lower","text":"5.3.7 Higher/ Lowermagic_number = 3\r\n\r\nwhile True:\r\n    guess = int(input(\"Guess my number: \"))\r\n    if guess == magic_number:\r\n        print(\"You got it!\")\r\n        break\r\n    elif guess > magic_number:\r\n        print(\"Too high!\")\r\n    else:\r\n        print(\"Too Low!\")\r\nprint(\"Correct!\")","address":"/codehs/python3/5/3/higher-lower.html"},{"title":"5.4.7 Categories","text":"5.4.7 Categoriesall_names= \":\"\r\nfor i in range(3):\r\n    category = input(\"Enter a category: \")\r\nfor x in range(3):\r\n    names = input(\"name something in that category: \")\r\nall_names= all_names +\" \"+ names\r\n\r\nprint(category + all_names)\r\n\r\nall_names = \":\"","address":"/codehs/python3/5/4/categories.html"},{"title":"5.4.6 Rolling Dice","text":"5.4.6 Rolling Dicefor i in range(1, 7, 1):\r\n    for j in range(1, 7, 1):\r\n        print(str(i) + \", \" + str(j))","address":"/codehs/python3/5/4/rolling-dice.html"},{"title":"6.1.5 Weather","text":"6.1.5 Weather\"\"\"\r\nThis code will print out a greeting based on the time of day.\r\n\"\"\"\r\n\r\n# This function will print a greeting for the morning\r\ndef sunny_greeting():\r\n    print(\"If it is sunny, you should suggest I wear sandals\")\r\n    \r\n# This function will print a greeting for the afternoon\r\ndef rainy_greeting():\r\n    print(\"If it is rainy, you should suggest I wear galoshes\")\r\n    \r\n# This function will print a greeting for the evening\r\ndef snowy_greeting():\r\n    print(\"If it is snowy, you should suggest I wear boots\")\r\n    \r\n\r\n# Get input from the user and print matching greeting\r\n# If other option, print that it is invalid\r\nweather = input(\"What is the weather? (sunny, rainy, snowy):\")\r\n\r\nif weather == \"sunny\":\r\n    sunny_greeting()\r\nelif weather == \"rainy\":\r\n    rainy_greeting()\r\nelif weather == \"snowy\":\r\n    snowy_greeting()\r\nelse:\r\n    print(\"Invalid option.\")","address":"/codehs/python3/6/1/weather.html"},{"title":"6.2.8 Area of a Square with Default Parameters","text":"6.2.8 Area of a Square with Default Parametersdef calculate_area(side_length=10):\r\n    area = side_length ** 2\r\n    print(\"The area of a square with sides of length \" + str(side_length) + \" is \" + str(area))\r\n    \r\n    \r\nside_length = int(input(\"Enter a number: \"))\r\nif side_length <= 0:\r\n    calculate_area()\r\nelse:\r\n    calculate_area(side_length)","address":"/codehs/python3/6/2/area-of-a-square-with-default-parameters.html"},{"title":"6.2.6 Print Multiple Times","text":"6.2.6 Print Multiple Times\"\"\"\r\nThis function takes two arguments. It expects the first to be a string and\r\nthe second to be a number.\r\n\"\"\"\r\n\r\ndef print_name_and_age(name, age):\r\n    print(\"Hi, my name is \" + name + \" and I am \" + str(age) + \" years old.\")\r\n\r\nprint_name_and_age(\"Sierra\", 34)\r\nprint_name_and_age(\"Marcus\", 19)","address":"/codehs/python3/6/2/print-multiple-times.html"},{"title":"6.2.5 Print Product","text":"6.2.5 Print Product\"\"\"\r\nThis function takes two arguments. It expects the first to be a string and\r\nthe second to be a number.\r\n\"\"\"\r\n\r\ndef print_name_and_age(name, age):\r\n    print(\"Hi, my name is \" + name + \" and I am \" + str(age) + \" years old.\")\r\n\r\nprint_name_and_age(\"Sierra\", 34)\r\nprint_name_and_age(\"Marcus\", 19)","address":"/codehs/python3/6/2/print-product.html"},{"title":"6.3.7 Add, Subtract, or Multiply","text":"6.3.7 Add, Subtract, or Multiply","address":"/codehs/python3/6/3/add-subtract-or-multiply.html"},{"title":"6.3.6 Adding to a Value","text":"6.3.6 Adding to a Value","address":"/codehs/python3/6/3/adding-to-a-value.html"},{"title":"6.4.4 Add One","text":"6.4.4 Add One","address":"/codehs/python3/6/4/add-one.html"},{"title":"6.4.8 Sum Two Numbers","text":"6.4.8 Sum Two Numbers","address":"/codehs/python3/6/4/sum-two-numbers.html"},{"title":"6.4.9 Temperature Converter","text":"6.4.9 Temperature Converter","address":"/codehs/python3/6/4/temperature-converter.html"},{"title":"6.5.6 Enter a Positive Number","text":"6.5.6 Enter a Positive Number","address":"/codehs/python3/6/5/enter-a-positive-number.html"},{"title":"6.5.5 Temperature Converter, Part 2","text":"6.5.5 Temperature Converter, Part 2","address":"/codehs/python3/6/5/temperature-converter-part-2.html"},{"title":"7.3.4 Find the Error","text":"7.3.4 Find the Error","address":"/codehs/python3/7/3/find-the-error.html"},{"title":"7.4.7 Spelling Bee","text":"7.4.7 Spelling Bee","address":"/codehs/python3/7/4/spelling-bee.html"},{"title":"7.6.10 Part 2, Remove All From String","text":"7.6.10 Part 2, Remove All From String","address":"/codehs/python3/7/6/part-2-remove-all-from-string.html"},{"title":"8.1.7 Fix This Tuple","text":"8.1.7 Fix This Tuple","address":"/codehs/python3/8/1/fix-this-tuple.html"},{"title":"8.4.5 Five Numbers","text":"8.4.5 Five Numbers","address":"/codehs/python3/8/4/five-numbers.html"},{"title":"8.4.4 How Many Names?","text":"8.4.4 How Many Names?","address":"/codehs/python3/8/4/how-many-names.html"},{"title":"8.4.7 Librarian","text":"8.4.7 Librarian","address":"/codehs/python3/8/4/librarian.html"},{"title":"9.1.6 Checkerboard, v1","text":"9.1.6 Checkerboard, v1","address":"/codehs/python3/9/1/checkerboard-v1.html"},{"title":"9.1.7 Checkerboard, v2","text":"9.1.7 Checkerboard, v2","address":"/codehs/python3/9/1/checkerboard-v2.html"},{"title":"9.1.8 Checkerboard, v3","text":"9.1.8 Checkerboard, v3","address":"/codehs/python3/9/1/checkerboard-v3.html"},{"title":"9.2.5 Divisible by 3","text":"9.2.5 Divisible by 3","address":"/codehs/python3/9/2/divisible-by-3.html"},{"title":"9.2.8 Last Names","text":"9.2.8 Last Names","address":"/codehs/python3/9/2/last-names.html"},{"title":"9.2.9 Strings To Integers","text":"9.2.9 Strings To Integers","address":"/codehs/python3/9/2/strings-to-integers.html"},{"title":"9.3.6 Coordinate Pair","text":"9.3.6 Coordinate Pair","address":"/codehs/python3/9/3/coordinate-pair.html"},{"title":"9.3.9 Full Name & Citation","text":"9.3.9 Full Name & Citation","address":"/codehs/python3/9/3/full-name-citation.html"},{"title":"9.3.7 Slopes","text":"9.3.7 Slopes","address":"/codehs/python3/9/3/slopes.html"},{"title":"9.4.5 Phone Book","text":"9.4.5 Phone Book","address":"/codehs/python3/9/4/phone-book.html"},{"title":"9.4.6 Word Counts","text":"9.4.6 Word Counts","address":"/codehs/python3/9/4/word-counts.html"},{"title":"9.5.6 Swapping","text":"9.5.6 Swapping","address":"/codehs/python3/9/5/swapping.html"},{"title":"9.5.7 Word Counts, Part 2","text":"9.5.7 Word Counts, Part 2","address":"/codehs/python3/9/5/word-counts-part-2.html"},{"title":"Codehs: Python 3","text":"Codehs: Python 3Below are all Python 3 CodeHS lessons on this site. Only exercises are included, so you won't see any\r\n            videos, examples, or tests-- if you are confused by an example, feel free to ask in the Discord!Introduction to Programming with Turtle\r\n                    Graphics\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Intro to Python with Tracy the Turtle \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.1.4 Stretched Slinky \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Tracy's Grid World \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.2.4 Shorter Dashed Line\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.2.5 Caterpillar \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Turning Tracy \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.3.5 Rectangle \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.3.6 4 Columns \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.4.5 Row of Circles \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.4.6 4 Columns 2.0 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Turning Tracy Using Angles \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.5.5 Hexagon \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.5.6 'X' Marks the Spot \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.5.7 Circle Pyramid \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Comments \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.6.4 Circle Pyramid\r\n                                            with Comments \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.8.4 Beaded Bracelet \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.8.5 Shape Stack \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Artistic Effects \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.9.5 Four Colored\r\n                                            Triangles \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.9.6 Colorful Bracelet \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Top Down Design \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.10.4 Bubble Wrap 2.0 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.10.5 Sidewalk \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Variables \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.11.4 Dartboard \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.11.5 Line of\r\n                                            Increasing Blocks \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 User Input \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.12.4 Colored Dartboard \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.12.5 Four Corners \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Parameters \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.13.4 Colorful Caterpillar\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.13.5 Circle in a Square\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.13.6 Snowman \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Using i in For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.14.4 Geometry 2.0 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Extended Loop Control \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.15.4 Dartboard using i \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.15.5 Phone Signal \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 If Statements \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.16.4 Happy Face \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.16.5 Black and White\r\n                                            Squares \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 If/ Else Statements \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.17.4 Rating \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.17.5 Happy/ Sad Face \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 While Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.18.4 Increasing Squares\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.18.5 Guess a Number \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Putting Together Control Structures \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         2.19.4 Guess a Number 2.0\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         2.19.5 Circle Pyramid 2.0\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Basic Python and Console Interaction\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Printing in Python \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.1.5 Introduce Yourself \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.1.7 Vertical name \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Variables and Types \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.2.6 Make Some Variables!\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 User Input \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.3.6 Hello  \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.3.7 Age \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Mathematical Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.4.5 Add Parentheses \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.4.8 Rectangle \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 String Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.5.6 Introduce\r\n                                            Yourself, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.5.7 Rectangle, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         3.5.8 Rectangle, Part 3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Comments \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         3.6.5 Add Comments! \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Conditionals\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Booleans \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.1.5 Plants \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 If Statements \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.2.6 Is It Raining? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Comparison Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.3.6 Old Enough to Vote? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         4.3.7 Positive, Zero,\r\n                                            or Negative? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         4.3.9 Table Reservation \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Logical Operators \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.4.4\r\n                                            Administrators, Teachers, and Students \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         4.4.5 Presidential\r\n                                            Eligibility \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Floating Point Numbers and Rounding \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         4.5.4 Correct Portion \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Looping\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 While Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.1.6 2 Through 20 Even \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.1.7 Divisibility \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.2.5 Counting 10 to\r\n                                            100 by Tens \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.2.8 Average Test Score \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.2.9 How Many Names? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Break and Continue \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.3.7 Higher/ Lower \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Nested Control Structures \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         5.4.6 Rolling Dice \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         5.4.7 Categories \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Functions and Exceptions\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.1.5 Weather \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions and Parameters \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.2.5 Print Product \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.2.6 Print Multiple Times\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.2.8\r\n                                            Area of a Square with Default Parameters \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Namespaces in Functions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.3.6 Adding to a Value \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.3.7 Add, Subtract, or\r\n                                            Multiply \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Functions and Return Values \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.4.4 Add One \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.4.8 Sum Two Numbers \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.4.9 Temperature Converter\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Exceptions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         6.5.5 Temperature\r\n                                            Converter, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         6.5.6 Enter a Positive\r\n                                            Number \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Strings\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Immutability \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         7.3.4 Find the Error \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Strings and For Loops \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         7.4.7 Spelling Bee \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 String Methods \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         7.6.10 Part 2,\r\n                                            Remove All From String \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Creating and Altering Data Structures\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Tuples \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         8.1.7 Fix This Tuple \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 List Methods \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         8.4.4 How Many Names? \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         8.4.5 Five Numbers \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         8.4.7 Librarian \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Extending Data Structures\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 2d Lists \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.1.6 Checkerboard, v1 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.1.7 Checkerboard, v2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.1.8 Checkerboard, v3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 List Comprehensions \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.2.5 Divisible by 3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.2.8 Last Names \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.2.9 Strings To Integers\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Packing and Unpacking \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.3.6 Coordinate Pair \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.3.7 Slopes \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.3.9 Full Name & Citation\r\n                                        \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Dictionaries \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.4.5 Phone Book \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.4.6 Word Counts \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Equivalence vs. Identity \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         9.5.6 Swapping \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         9.5.7 Word Counts, Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                            \r\n                        \r\n                    \r\n\r\n                \r\n            \r\n\r\n            \r\n                Project: Guess the Word\r\n                \r\n\r\n                    \r\n                        \r\n                            \r\n                                 Project: Guess the Word \r\n                            \r\n                            \r\n\r\n                                \r\n                                    \r\n                                         10.1.2 Guess the Word,\r\n                                            Part 1 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         10.1.3 Guess the Word,\r\n                                            Part 2 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         10.1.4 Guess the Word,\r\n                                            Part 3 \r\n                                    \r\n                                    \r\n                                \r\n\r\n                                \r\n                                    \r\n                                         10.1.5 Guess the Word,\r\n                                            Part 4","address":"/codehs/python3/"},{"title":"CodeHS Bookmarklet","text":"CodeHS BookmarkletA bookmarklet is a special bookmark that automatically runs a small snippet of code when you click it. This\r\n            bookmarklet magically gets the solutions to CodeHS problems and inserts them! All credit for the code goes to ExplosiveNight on the Discord\r\n        \r\n        To add it to your browser, follow the instructions below. To use it, go to any CodeHS assignment\r\n            page and click on its icon in your favorites bar.\r\n        \r\n            CodeHS Bookmarklet Link\r\n        \r\n        Please note that this is not an intended feature of CodeHS. It might get removed at any time. In addition,\r\n            please be responsible with this power :) We trust you to handle your learning best, but make sure that you understand the concepts behind the annoying problems that CodeHS builds.\r\n        \r\n            JSYK\r\n            Some solutions have been written incorrectly. Sadly, we can't fix them, as it's on CodeHS's end. In general,\r\n                the problem is just a typo or a missing word, but if you need any help, please contact us via email or Discord!\r\n        \r\n        Chrome\r\n        On Chrome, drag the CodeHS Bookmarklet Link above into your bookmark bar. If you don't see\r\n            the bookmark bar, you can press CTRL + SHIFT + B to open it.\r\n        \r\n        Edge\r\n        On Chrome, drag the CodeHS Bookmarklet Link above into your favorites bar. If you don't see\r\n            the favorites bar, you can press CTRL + SHIFT + B to open it.\r\n        \r\n        Firefox\r\n        On Firefox, drag the CodeHS Bookmarklet Link above into your favorites bar. If you don't see\r\n            the favorites bar, you can press CTRL + SHIFT + B to open it.\r\n        \r\n        Other Browsers\r\n        If you need help and don't see your browser here, please get in touch via email or Discord","address":"/codehs-bookmarklet.html"},{"title":"Loading, please wait...","text":"Edit Java\r\n            Add Annotations\r\n            Review & PublishLoading, please wait...🎉 Published! 🎉\r\n                    \r\n                    \r\n                        Please send this link in the Discord. You can also visit this link to preview the final assignment.Creating Assignment...\r\n                    \r\n                    \r\n                        Please wait; this may take a few seconds.Review Annotations\r\n                Because of technical limitations, annotations are not connected to lines. Instead, they're connected\r\n                    to specific statements in the code. For these purposes, classes, imports, and methods are all\r\n                    grouped under the general definition of \"statement\".\r\n                If you note your annotations being attached incorrectly, please let me know!\r\n                \r\n            \r\n            \r\n                Tip\r\n                A \"tip\" appears at the top of the assignment. This is a good place to let people know about a\r\n                    Grader.java quirk, a tricky way the assignment is worded, or something else that doesn't really fit\r\n                    in an annotation.\r\n                Include a tip in this\r\n                    assignment\r\n                \r\n                    TIP\r\n                    Edit me!\r\n                \r\n            \r\n            \r\n                Export & Publish\r\n                Input your name\r\n                I want to give you credit! This doesn't have to be your real name-- it could be your Discord username\r\n                    or your Twitter handle. Whatever you want! (as long as it's appropriate, ofc).\r\n                If you would prefer an air of mystery, you can also leave this blank.\r\n                Name: \r\n                If you'd like to link to your website, Twitter, GitHub, or whatever, feel free to do that here! This\r\n                    is completely optional.\r\n                Website: \r\n\r\n                Legal Junk\r\n                In order to legally host your work, you technically need to agree to grant the site a license.\r\n                \r\n                    I agree to grant an exclusive Creative\r\n                            Commons Attribution 4.0 International license to host my content.\r\n                    \r\n                    I agree that the site is\r\n                        not obligated to host any content that may be seen as objectionable or inappropriate.\r\n                    \r\n                    I affirm that this should not qualify as\r\n                        user-generated content, and that I am acting as a volunteer\r\n                \r\n            \r\n            \r\n                Submit for Publication\r\n                Please accept all legal items before publishing!","address":"/contribute/edit/exercise.html"},{"title":"Loading, please wait...","text":"Edit\n            Review & PublishLoading, please wait...🎉 Published! 🎉\n                    \n                    \n                        Please send this link in the Discord. You can also visit this link to preview the final assignment.Creating Assignment...\n                    \n                    \n                        Please wait; this may take a few seconds.Export & Publish\n                Input your name\n                I want to give you credit! This doesn't have to be your real name-- it could be your Discord username\n                    or your Twitter handle. Whatever you want! (as long as it's appropriate, ofc).\n                If you would prefer an air of mystery, you can also leave this blank.\n                Name: \n                If you'd like to link to your website, Twitter, GitHub, or whatever, feel free to do that here! This\n                    is completely optional.\n                Website: \n\n                Legal Junk\n                In order to legally host your work, you technically need to agree to grant the site a license.\n                \n                    I agree to grant an exclusive Creative\n                            Commons Attribution 4.0 International license to host my content.\n                    \n                    I agree that the site is\n                        not obligated to host any content that may be seen as objectionable or inappropriate.\n                    \n                    I affirm that this should not qualify as\n                        user-generated content, and that I am acting as a volunteer\n                \n            \n            \n                Submit for Publication\n                Please accept all legal items before publishing!","address":"/contribute/edit/sheet.html"},{"title":"Contributing Guidelines","text":"Contributing GuidelinesThese guidelines are intended to:Help explanations have the same general style. I'm not picky about grammar, dw\r\n            Make sure that people can read explanations well\r\n            Tell you about advanced features & how to use them\r\n            Ensure that explanations use non-discouraging languageOf course, you're not beholden to them. There are some things that I'll enforce (which will all be\r\n            noted), but the vast majority is up to you. I trust you <3StyleAlice & BobIf you need example names for an explanation or for code (e.g. 'the Student object is named x'), please use\r\n            these (in no particular order):Alice\r\n            Bob\r\n            Carol\r\n            Danny\r\n            Otis\r\n            Sam\r\n            Quin\r\n            ElleWhy?\r\n            Alice, Bob, Carol, and Dan are standard example names. If you go further into the alphabet (e.g. Eve),\r\n                then they start to have special meanings-- 'Eve' is 'the eavesdropper'. In order to have more names and\r\n                to have a distinct feel\r\n                to DCT examples, I came up with Sam, Quin, Otis, and Elle. If you want more information, you can read\r\n                about it on Wikipedia here :)GrammarJust... generally make sure that people can read it. You don't have to adhere to any standard :)Demeaning & Discouraging LanguageSome words will nearly always be read as patronising or confusing. Implying that an assignment is\r\n            'simple' or 'basic' when someone has been having trouble is incredibly discouraging for them. Please do not\r\n            use these thoughtlessly.If you have a usage, please read it through to make sure. These words aren't bad; they're just used\r\n            a lot. I trust you to use them well.\"Just\"\r\n                As in, \"just print out the array\". That implies it's easy, when it might not be easy for\r\n                    some people. Either remove it, or make it more clear using 'only' (\"This assignment\r\n                    only wants you to print out the array\").\r\n            \r\n            \r\n                \"Only\"\r\n                Depending on context, this can imply the same things as 'just'. Please make sure that your context is\r\n                    closer to 'Singly; alone; only; without another' than it is to 'easily; without difficulty'. It\r\n                    may not be 'without difficulty' for someone reading, and they may be discouraged if it is.\r\n            \r\n            \r\n                \"Basically\"\r\n                \r\n                    It may not be 'basic' for your reader.\r\n                \r\n            \r\n            \r\n                \"Easily\"\r\n                It may not be 'easy' for your reader.\r\n            \r\n            \r\n                \"Of course\"\r\n                It might not be self-evident for your reader.Advanced FeaturesMarkdown!!!Want formatting in your annotations? You can use Markdown! It's just like the formatting that Discord and\r\n            Reddit use. For more detail, see this cheat sheetHTML!If you want to embed HTML into your annotations for more control, you can do\r\n            that. However, the list of tags available is severely limited.When using any illegal elements, your annotations will be rejected by the preview system and trimmed when\r\n            published.Globally allowed stylesYou can style elements with CSS.CSS styles may only be applied by putting them in the style property.Style Attribute Format\r\n            background-colorcolor\r\n            colorcolor\r\n            border-radiuspixel units only, 0px-9px\r\n            border-top-colorcolor\r\n            border-top-styleword\r\n            border-top-widthpixel units only, 0px-9px\r\n            border-right-colorcolor\r\n            border-right-styleword\r\n            border-right-widthpixel units only, 0px-9px\r\n            border-bottom-colorcolor\r\n            border-bottom-styleword\r\n            border-bottom-widthpixel units only, 0px-9px\r\n            border-left-colorcolor\r\n            border-left-styleword\r\n            border-left-widthpixel units only, 0px-9pxSome elements have other styles allowed too! See below for all allowed elements.Allowed elementsAllowed Element\r\n                    Allowed Attributes\r\n                    Allowed Styles\r\n                \r\n            \r\n            \r\n                \r\n                    SVG\r\n                    \r\n                    \r\n                \r\n                \r\n                    PATH\r\n                    d\r\n                    fill, stroke\r\n                \r\n                \r\n                    A\r\n                    target, rel, href\r\n                    \r\n                \r\n                \r\n                    P\r\n                    \r\n                    \r\n                \r\n                \r\n                    SPAN\r\n                    class, data-address, data-annotation-connector-id. AUTO-GENERATED IDs ONLY\r\n                    \r\n                    \r\n                \r\n                \r\n                    S\r\n                    \r\n                    \r\n                \r\n                \r\n                    B\r\n                    \r\n                    \r\n                \r\n                \r\n                    STRONG\r\n                    \r\n                    \r\n                \r\n                \r\n                    I\r\n                    \r\n                    \r\n                \r\n                \r\n                    EM\r\n                    \r\n                    \r\n                \r\n                \r\n                    U\r\n                    \r\n                    \r\n                \r\n                \r\n                    CODE\r\n                    \r\n                    \r\n                \r\n                \r\n                    PRE\r\n                    \r\n                    \r\n                \r\n                \r\n                    DIV\r\n                    class -- 'annotation' only\r\n                    \r\n                \r\n                \r\n                    TABLE\r\n                    \r\n                    \r\n                \r\n                \r\n                    TBODY\r\n                    \r\n                    \r\n                \r\n                \r\n                    TH\r\n                    \r\n                    \r\n                \r\n                \r\n                    TR\r\n                    \r\n                    \r\n                \r\n                \r\n                    TD\r\n                    \r\n                    \r\n                \r\n                \r\n                    HR\r\n                    \r\n                    \r\n                \r\n                \r\n                    H1\r\n                    \r\n                    \r\n                \r\n                \r\n                    H2\r\n                    \r\n                    \r\n                \r\n                \r\n                    H3\r\n                    \r\n                    \r\n                \r\n                \r\n                    H4\r\n                    \r\n                    \r\n                \r\n                \r\n                    H5\r\n                    \r\n                    \r\n                \r\n                \r\n                    H6\r\n                    \r\n                    \r\n                \r\n                \r\n                    BR","address":"/contribute/guidelines.html"},{"title":"Contributing to Dinner Coding Time","text":"New Assignment\r\n                    \r\n                    \r\n                        Folder\r\n                        \r\n                        Should be one word, with\r\n                            no symbols except for dashes\r\n                        The top-level folder, like\r\n                            \"codehs\" or \"classwork\"\r\n\r\n                        Name\r\n                        \r\n                        May only have letters,\r\n                            numbers, dashes, or slashes\r\n                        The unique ID of the\r\n                            assignment; its web address.\r\n\r\n                        Type\r\n                        \r\n                            Exercise\r\n                            Sheet\r\n                        \r\n                        WORK IN PROGRESS! The type of page. Exercises look like code editors, while sheets look more like normal webpages.\r\n                    \r\n                    \r\n                        CreateJSYK\r\n            Before you contribute, please review the Contribution Guidelines. A\r\n                lot of these are optional, but please take a look!Contributing to Dinner Coding TimeAdd New AssignmentAssignments that Need ExplanationLoading Un-Annotated CodeHS Assignments...","address":"/contribute/"},{"title":"Publish Recipt","text":"Publish ReciptYour page may not be published yet. Please send this page to @coleh on Discord or email it!You can preview your page here.","address":"/contribute/status.html"},{"title":"Donations","text":"DonationsI pay $31.84 per month to keep this site up. I'm happy to pay in order to help\r\n            everyone. However, I'd be grateful for charitable donations to help me offset the costs.This site will always remain free. Any donations are just helpful assistance to run it.Please consider donating, even just a small amount. At the moment, you can only donate through Venmo, but I'm working on other methods.Thank you so much! I appreciate your help endlessly <3","address":"/donate.html"},{"title":"Error Almananc","text":"Error AlmanancSome common errors on CodeHS are hard to pin down and fix. To aid with those, here are some easy solutions.NoSuchElementException","address":"/error-almanac/"},{"title":"NoSuchElementException on CodeHS","text":"NoSuchElementException on CodeHSNoSuchElementException is an error typically caused by the Scanner class. It shows up consistently on some activities, inconsistently on others-- there's really no way to tell until you see it.public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = scanner.nextLine();\r\n                }\r\n            \r\n            On some assignments, this code snippet can cause a NoSuchElementException.This isn't your fault. As far as I can tell, it happens when the Grader.java doesn't correctly send the test input to your code. However, there are some annoyingly esoteric ways to fix it.Try/Catchtry & catch tell Java to ignore specific errors. It's not good coding practice to use this too much, but for this problem, there's not much else you can do.public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = \"\"; \r\n                    try {\r\n                        inputLine = scanner.nextLine();\r\n                    }\r\n                    catch(Exception e) {\r\n                    /* \r\n                    if you want to include some intelligent error handling, you can do that here.\r\n                        otherwise, just leave this block empty\r\n                    */\r\n                    }\r\n                }\r\n            \r\n            \r\n                Using try/catch will have the runtime ignore the error.\r\n                Note that the inputLine variable is declared outside the try. This makes sure it'll be accessible later in the method.Scanner Checking MethodsThe Scanner class includes some methods for when you can't be sure about the user's input. This is better practice, but doesn't work on CodeHS sometimes.public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = \"\"; \r\n                    if(scanner.hasNextLine()) {\r\n                        inputLine = scanner.nextLine();\r\n                    }\r\n                }\r\n            \r\n            \r\n                Using hasNextLine() to avoid the error.\r\n                Note that the inputLine variable is declared outside the if. This makes sure it'll be accessible later in the method.Combining SolutionsIf you're still having the error or your code isn't working the way it's supposed to, try combining both solutions. This is a bit overkill, but it shows your teacher that you know both the proper solution and the practical one!public static void main(String[] args) {\r\n                    Scanner scanner = new Scanner(System.in);\r\n                    \r\n                    String inputLine = \"\"; \r\n                    try {\r\n                        if(scanner.hasNextLine()) {\r\n                            inputLine = scanner.nextLine();\r\n                        }\r\n                    }\r\n                    //this time, i just left the `catch` block empty\r\n                    catch(Exception e) {}\r\n                }\r\n            \r\n            \r\n                Combining try/catch with hasNextLine() to avoid the error.","address":"/error-almanac/NoSuchElementException.html"},{"title":"Dinner Coding Time","text":"","address":"/"},{"title":"Fair Use","text":"Fair UseThis site is for educational purposes only. All content is curated from other sources with original commentary, explaination, or annotations added.Fair UseCopyright Disclaimer: under section 107 of the Copyright Act of 1976, allowance is made for “fair use” for\r\n            purposes such as criticism, comment, news reporting, teaching, scholarship, education and research.Fair use is a use permitted by copyright statute that might otherwise be infringing.Fair Use DefinitionFair use is a doctrine in United States copyright law that allows limited use of copyrighted material\r\n            without requiring permission from the rights holders, such as commentary, criticism, news reporting,\r\n            research, teaching or scholarship. It provides for the legal, non-licensed citation or incorporation of\r\n            copyrighted material in another author’s work under a four-factor balancing test.","address":"/legal/fairuse.html"},{"title":"Open-Source Software Licenses","text":"Open-Source Software LicensesDinner Coding Time uses select open-source projects, libraries, tools, etc. in order to make sure everything\r\n            works smoothly. Some projects might require attribution and some may not, but either way it's\r\n            polite to include it. All projects used are linked below!chevrotain-javachevrotain-java lets us parse the Java code, making code intelligence and pretty highlighting possible. You\r\n            can find it here.\r\n            The copy used has minor modifications in order to run a WebWorker for performance.\r\n            chevrotain-java is\r\n            available under a Apache 2.0 license, available hereTwemojiFor emoji on the homepage testemonials, we use Twemoji! Twemoji is an amazing project from Twitter that makes\r\n            standard emojis available on the web! Twemoji is available under a CC-BY 4.0 license, available hereSaramaJSSaramaJS parses Python code, allowing code intelligence to be expanded to Python. The copy of SaramaJS used\r\n            on DCT has minor modifications in\r\n            order to run in a WebWorker environment. It is available under a\r\n            (modified) MIT license, available here.","address":"/legal/foss-usage.html"},{"title":"Legal Stuff","text":"Legal StuffThere's some stuff that I have to include for legal reasons. That stuff lives here!Fair Use Statement\r\n            OSS Licenses\r\n            DCT's License\r\n            Terms & Conditions\r\n            Privacy Policy","address":"/legal/"},{"title":"Creative Commons Attribution 4.0 International License","text":"Creative Commons Attribution 4.0 International LicenseCreative Commons Corporation (“Creative Commons”) is not a law firm and\r\n    does not provide legal services or legal advice. Distribution of\r\n    Creative Commons public licenses does not create a lawyer-client or\r\n    other relationship. Creative Commons makes its licenses and related\r\n    information available on an “as-is” basis. Creative Commons gives no\r\n    warranties regarding its licenses, any material licensed under their\r\n    terms and conditions, or any related information. Creative Commons\r\n    disclaims all liability for damages resulting from their use to the\r\n    fullest extent possible.Using Creative Commons Public LicensesCreative Commons public licenses provide a standard set of terms and\r\n    conditions that creators and other rights holders may use to share\r\n    original works of authorship and other material subject to copyright\r\n    and certain other rights specified in the public license below. The\r\n    following considerations are for informational purposes only, are not\r\n    exhaustive, and do not form part of our licenses.Considerations for licensors: Our public licenses are\r\n        intended for use by those authorized to give the public\r\n        permission to use material in ways otherwise restricted by\r\n        copyright and certain other rights. Our licenses are\r\n        irrevocable. Licensors should read and understand the terms\r\n        and conditions of the license they choose before applying it.\r\n        Licensors should also secure all rights necessary before\r\n        applying our licenses so that the public can reuse the\r\n        material as expected. Licensors should clearly mark any\r\n        material not subject to the license. This includes other CC-\r\n        licensed material, or material used under an exception or\r\n        limitation to copyright. More considerations for licensors:\r\n        wiki.creativecommons.org/Considerations_for_licensors\r\n    Considerations for the public: By using one of our public\r\n        licenses, a licensor grants the public permission to use the\r\n        licensed material under specified terms and conditions. If\r\n        the licensor’s permission is not necessary for any reason–for\r\n        example, because of any applicable exception or limitation to\r\n        copyright–then that use is not regulated by the license. Our\r\n        licenses grant only permissions under copyright and certain\r\n        other rights that a licensor has authority to grant. Use of\r\n        the licensed material may still be restricted for other\r\n        reasons, including because others have copyright or other\r\n        rights in the material. A licensor may make special requests,\r\n        such as asking that all changes be marked or described.\r\n        Although not required by our licenses, you are encouraged to\r\n        respect those requests where reasonable. More considerations\r\n        for the public:\r\n        wiki.creativecommons.org/Considerations_for_licenseesCreative Commons Attribution 4.0 International Public LicenseBy exercising the Licensed Rights (defined below), You accept and agree\r\n    to be bound by the terms and conditions of this Creative Commons\r\n    Attribution 4.0 International Public License (“Public License”). To the\r\n    extent this Public License may be interpreted as a contract, You are\r\n    granted the Licensed Rights in consideration of Your acceptance of\r\n    these terms and conditions, and the Licensor grants You such rights in\r\n    consideration of benefits the Licensor receives from making the\r\n    Licensed Material available under these terms and conditions.Section 1 – Definitions.Adapted Material means material subject to Copyright and Similar\r\n            Rights that is derived from or based upon the Licensed Material\r\n            and in which the Licensed Material is translated, altered,\r\n            arranged, transformed, or otherwise modified in a manner requiring\r\n            permission under the Copyright and Similar Rights held by the\r\n            Licensor. For purposes of this Public License, where the Licensed\r\n            Material is a musical work, performance, or sound recording,\r\n            Adapted Material is always produced where the Licensed Material is\r\n            synched in timed relation with a moving image.\r\n    \r\n    \r\n        Adapter’s License means the license You apply to Your Copyright\r\n            and Similar Rights in Your contributions to Adapted Material in\r\n            accordance with the terms and conditions of this Public License.\r\n    \r\n    \r\n        Copyright and Similar Rights means copyright and/or similar rights\r\n            closely related to copyright including, without limitation,\r\n            performance, broadcast, sound recording, and Sui Generis Database\r\n            Rights, without regard to how the rights are labeled or\r\n            categorized. For purposes of this Public License, the rights\r\n            specified in Section 2(b)(1)-(2) are not Copyright and Similar\r\n            Rights.\r\n    \r\n    \r\n        Effective Technological Measures means those measures that, in the\r\n            absence of proper authority, may not be circumvented under laws\r\n            fulfilling obligations under Article 11 of the WIPO Copyright\r\n            Treaty adopted on December 20, 1996, and/or similar international\r\n            agreements.\r\n    \r\n    \r\n        Exceptions and Limitations means fair use, fair dealing, and/or\r\n            any other exception or limitation to Copyright and Similar Rights\r\n            that applies to Your use of the Licensed Material.\r\n    \r\n    \r\n        Licensed Material means the artistic or literary work, database,\r\n            or other material to which the Licensor applied this Public\r\n            License.\r\n    \r\n    \r\n        Licensed Rights means the rights granted to You subject to the\r\n            terms and conditions of this Public License, which are limited to\r\n            all Copyright and Similar Rights that apply to Your use of the\r\n            Licensed Material and that the Licensor has authority to license.\r\n    \r\n    \r\n        Licensor means the individual(s) or entity(ies) granting rights\r\n            under this Public License.\r\n    \r\n    \r\n        Share means to provide material to the public by any means or\r\n            process that requires permission under the Licensed Rights, such\r\n            as reproduction, public display, public performance, distribution,\r\n            dissemination, communication, or importation, and to make material\r\n            available to the public including in ways that members of the\r\n            public may access the material from a place and at a time\r\n            individually chosen by them.j. Sui Generis Database Rights means rights other than copyright\r\n    resulting from Directive 96/9/EC of the European Parliament and of\r\n    the Council of 11 March 1996 on the legal protection of databases,\r\n    as amended and/or succeeded, as well as other essentially\r\n    equivalent rights anywhere in the world.k. You means the individual or entity exercising the Licensed Rights\r\n    under this Public License. Your has a corresponding meaning.Section 2 – Scope.License grant.\r\n        \r\n            \r\n                Subject to the terms and conditions of this Public License,\r\n                    the Licensor hereby grants You a worldwide, royalty-free,\r\n                    non-sublicensable, non-exclusive, irrevocable license to\r\n                    exercise the Licensed Rights in the Licensed Material to:\r\n                a. reproduce and Share the Licensed Material, in whole or\r\n                    in part; and\r\n                b. produce, reproduce, and Share Adapted Material.\r\n            \r\n            \r\n                Exceptions and Limitations. For the avoidance of doubt, where\r\n                    Exceptions and Limitations apply to Your use, this Public\r\n                    License does not apply, and You do not need to comply with\r\n                    its terms and conditions.\r\n            \r\n            \r\n                Term. The term of this Public License is specified in Section\r\n                    6(a).\r\n            \r\n            \r\n                Media and formats; technical modifications allowed. The\r\n                    Licensor authorizes You to exercise the Licensed Rights in\r\n                    all media and formats whether now known or hereafter created,\r\n                    and to make technical modifications necessary to do so. The\r\n                    Licensor waives and/or agrees not to assert any right or\r\n                    authority to forbid You from making technical modifications\r\n                    necessary to exercise the Licensed Rights, including\r\n                    technical modifications necessary to circumvent Effective\r\n                    Technological Measures. For purposes of this Public License,\r\n                    simply making modifications authorized by this Section 2(a)\r\n                    (4) never produces Adapted Material.\r\n            \r\n            \r\n                Downstream recipients.\r\n                a. Offer from the Licensor – Licensed Material. Every\r\n                    recipient of the Licensed Material automatically\r\n                    receives an offer from the Licensor to exercise the\r\n                    Licensed Rights under the terms and conditions of this\r\n                    Public License.\r\n                b. No downstream restrictions. You may not offer or impose\r\n                    any additional or different terms or conditions on, or\r\n                    apply any Effective Technological Measures to, the\r\n                    Licensed Material if doing so restricts exercise of the\r\n                    Licensed Rights by any recipient of the Licensed\r\n                    Material.\r\n            \r\n            \r\n                No endorsement. Nothing in this Public License constitutes or\r\n                    may be construed as permission to assert or imply that You\r\n                    are, or that Your use of the Licensed Material is, connected\r\n                    with, or sponsored, endorsed, or granted official status by,\r\n                    the Licensor or others designated to receive attribution as\r\n                    provided in Section 3(a)(1)(A)(i).\r\n            \r\n        \r\n    \r\n    \r\n        Other rights.\r\n        \r\n            \r\n                Moral rights, such as the right of integrity, are not\r\n                    licensed under this Public License, nor are publicity,\r\n                    privacy, and/or other similar personality rights; however, to\r\n                    the extent possible, the Licensor waives and/or agrees not to\r\n                    assert any such rights held by the Licensor to the limited\r\n                    extent necessary to allow You to exercise the Licensed\r\n                    Rights, but not otherwise.\r\n            \r\n            \r\n                Patent and trademark rights are not licensed under this\r\n                    Public License.\r\n            \r\n            \r\n                To the extent possible, the Licensor waives any right to\r\n                    collect royalties from You for the exercise of the Licensed\r\n                    Rights, whether directly or through a collecting society\r\n                    under any voluntary or waivable statutory or compulsory\r\n                    licensing scheme. In all other cases the Licensor expressly\r\n                    reserves any right to collect such royalties.Section 3 – License Conditions.Your exercise of the Licensed Rights is expressly made subject to the\r\n    following conditions.Attribution.\r\n        \r\n            \r\n                If You Share the Licensed Material (including in modified\r\n                    form), You must:\r\n                \r\n                    \r\n                        retain the following if it is supplied by the Licensor\r\n                            with the Licensed Material:\r\n                        \r\n                            \r\n                                identification of the creator(s) of the Licensed\r\n                                    Material and any others designated to receive\r\n                                    attribution, in any reasonable manner requested by\r\n                                    the Licensor (including by pseudonym if\r\n                                    designated);\r\n                            \r\n                            \r\n                                a copyright notice;\r\n                            \r\n                            \r\n                                a notice that refers to this Public License;\r\n                            \r\n                            \r\n                                a notice that refers to the disclaimer of\r\n                                    warranties;\r\n                            \r\n                            \r\n                                a URI or hyperlink to the Licensed Material to the\r\n                                    extent reasonably practicable;\r\n                            \r\n                        \r\n                    \r\n                    \r\n                        indicate if You modified the Licensed Material and\r\n                            retain an indication of any previous modifications; and\r\n                    \r\n                    \r\n                        indicate the Licensed Material is licensed under this\r\n                            Public License, and include the text of, or the URI or\r\n                            hyperlink to, this Public License.\r\n                    \r\n                \r\n            \r\n            \r\n                You may satisfy the conditions in Section 3(a)(1) in any\r\n                    reasonable manner based on the medium, means, and context in\r\n                    which You Share the Licensed Material. For example, it may be\r\n                    reasonable to satisfy the conditions by providing a URI or\r\n                    hyperlink to a resource that includes the required\r\n                    information.\r\n            \r\n            \r\n                If requested by the Licensor, You must remove any of the\r\n                    information required by Section 3(a)(1)(A) to the extent\r\n                    reasonably practicable.\r\n            \r\n            \r\n                If You Share Adapted Material You produce, the Adapter’s\r\n                    License You apply must not prevent recipients of the Adapted\r\n                    Material from complying with this Public License.Section 4 – Sui Generis Database Rights.Where the Licensed Rights include Sui Generis Database Rights that\r\n    apply to Your use of the Licensed Material:for the avoidance of doubt, Section 2(a)(1) grants You the right\r\n            to extract, reuse, reproduce, and Share all or a substantial\r\n            portion of the contents of the database;\r\n    \r\n    \r\n        if You include all or a substantial portion of the database\r\n            contents in a database in which You have Sui Generis Database\r\n            Rights, then the database in which You have Sui Generis Database\r\n            Rights (but not its individual contents) is Adapted Material; and\r\n    \r\n    \r\n        You must comply with the conditions in Section 3(a) if You Share\r\n            all or a substantial portion of the contents of the database.For the avoidance of doubt, this Section 4 supplements and does not\r\n    replace Your obligations under this Public License where the Licensed\r\n    Rights include other Copyright and Similar Rights.Section 5 – Disclaimer of Warranties and Limitation of Liability.UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\r\n            EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\r\n            AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\r\n            ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\r\n            IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\r\n            WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\r\n            PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\r\n            ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\r\n            KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\r\n            ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\r\n    \r\n    \r\n        TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\r\n            TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\r\n            NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\r\n            INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\r\n            COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\r\n            USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\r\n            ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\r\n            DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\r\n            IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\r\n    \r\n    \r\n        The disclaimer of warranties and limitation of liability provided\r\n            above shall be interpreted in a manner that, to the extent\r\n            possible, most closely approximates an absolute disclaimer and\r\n            waiver of all liability.Section 6 – Term and Termination.This Public License applies for the term of the Copyright and\r\n            Similar Rights licensed here. However, if You fail to comply with\r\n            this Public License, then Your rights under this Public License\r\n            terminate automatically.\r\n    \r\n    \r\n        Where Your right to use the Licensed Material has terminated under\r\n            Section 6(a), it reinstates:\r\n        \r\n            \r\n                automatically as of the date the violation is cured, provided\r\n                    it is cured within 30 days of Your discovery of the\r\n                    violation; or\r\n            \r\n            \r\n                upon express reinstatement by the Licensor.\r\n            \r\n        \r\n        For the avoidance of doubt, this Section 6(b) does not affect any\r\n            right the Licensor may have to seek remedies for Your violations\r\n            of this Public License.\r\n    \r\n    \r\n        For the avoidance of doubt, the Licensor may also offer the\r\n            Licensed Material under separate terms or conditions or stop\r\n            distributing the Licensed Material at any time; however, doing so\r\n            will not terminate this Public License.\r\n    \r\n    \r\n        Sections 1, 5, 6, 7, and 8 survive termination of this Public\r\n            License.Section 7 – Other Terms and Conditions.The Licensor shall not be bound by any additional or different\r\n            terms or conditions communicated by You unless expressly agreed.\r\n    \r\n    \r\n        Any arrangements, understandings, or agreements regarding the\r\n            Licensed Material not stated herein are separate from and\r\n            independent of the terms and conditions of this Public License.Section 8 – Interpretation.For the avoidance of doubt, this Public License does not, and\r\n            shall not be interpreted to, reduce, limit, restrict, or impose\r\n            conditions on any use of the Licensed Material that could lawfully\r\n            be made without permission under this Public License.\r\n    \r\n    \r\n        To the extent possible, if any provision of this Public License is\r\n            deemed unenforceable, it shall be automatically reformed to the\r\n            minimum extent necessary to make it enforceable. If the provision\r\n            cannot be reformed, it shall be severed from this Public License\r\n            without affecting the enforceability of the remaining terms and\r\n            conditions.\r\n    \r\n    \r\n        No term or condition of this Public License will be waived and no\r\n            failure to comply consented to unless expressly agreed to by the\r\n            Licensor.\r\n    \r\n    \r\n        Nothing in this Public License constitutes or may be interpreted\r\n            as a limitation upon, or waiver of, any privileges and immunities\r\n            that apply to the Licensor or You, including from the legal\r\n            processes of any jurisdiction or authority.Creative Commons is not a party to its public licenses.\r\n    Notwithstanding, Creative Commons may elect to apply one of its public\r\n    licenses to material it publishes and in those instances will be\r\n    considered the “Licensor.” The text of the Creative Commons public\r\n    licenses is dedicated to the public domain under the CC0 Public Domain\r\n    Dedication. Except for the limited purpose of indicating that material\r\n    is shared under a Creative Commons public license or as otherwise\r\n    permitted by the Creative Commons policies published at\r\n    creativecommons.org/policies, Creative Commons does not authorize\r\n    the\r\n    use of the trademark “Creative Commons” or any other trademark or logo\r\n    of Creative Commons without its prior written consent including,\r\n    without limitation, in connection with any unauthorized modifications\r\n    to any of its public licenses or any other arrangements,\r\n    understandings, or agreements concerning use of licensed material. For\r\n    the avoidance of doubt, this paragraph does not form part of the public\r\n    licenses.Creative Commons may be contacted at creativecommons.org.","address":"/legal/license.html"},{"title":"Privacy Policy","text":"Privacy PolicyThank you for choosing to be part of our community at Dinner Coding Time (\"Company\", \"we\", \"us\",\r\n            \"our\"). We are committed to protecting your personal information and your right to privacy. If you have\r\n            any questions or concerns about this privacy notice, or our practices with regards to your personal\r\n            information, please contact us at contact@dinnercodingtime.com.When you visit our website dinnercodingtime.com (the \"Website\"), and more generally, use any of our\r\n            services (the \"Services\", which include the Website), we appreciate that you are trusting us with your\r\n            personal information. We take your privacy very seriously. In this privacy notice, we seek to explain to you\r\n            in the clearest way possible what information we collect, how we use it and what rights you have in relation\r\n            to it. We hope you take some time to read through it carefully, as it is important. If there are any terms\r\n            in this privacy notice that you do not agree with, please discontinue use of our Services immediately.This privacy notice applies to all information collected through our Services (which, as described above,\r\n            includes our Website), as well as, any related services, sales, marketing or events.Information CollectedWe automatically collect certain information when you visit, use or navigate the Website. This information\r\n            does\r\n            not reveal your specific identity (like your name or contact information) but may include device and usage\r\n            information, such as your IP address, browser and device characteristics, operating system, language\r\n            preferences, referring URLs, device name, country, location, information about how and when you use our\r\n            Website\r\n            and other technical information. This information is primarily needed to maintain the security and operation\r\n            of\r\n            our Website, and for our internal analytics and reporting purposes.The information we collect includes:Log and Usage Data\r\n                Log and usage data is service-related, diagnostic, usage and performance information our\r\n                    servers automatically collect when you access or use our Website and which we record in log files.\r\n                    Depending on\r\n                    how you interact with us, this log data may include your device information, browser\r\n                    type, and information about your activity in the Website (such as the date/time stamps associated\r\n                    with your usage, error reports, pages and files viewed, searches, and other actions you take such as\r\n                    which features are used).\r\n                    We do not remember you from visit to visit, and all inter-visit data is completely\r\n                        removed.\r\n                \r\n                \r\n            \r\n            \r\n                Device Data\r\n                We collect device data such as information about your computer, phone, tablet or other device you\r\n                    use to access the Website. Depending on the device used, this device data may include information\r\n                    such as the first 3 bytes of your IP address (or proxy server),\r\n                    your device and browser identification numbers, your approximate location, browser type,\r\n                    hardware model, Internet service provider and/or mobile carrier, and operating system.\r\n                    This data is anonymized in order to ensure that none of the data can be related specifically\r\n                        to you.\r\n                \r\n            \r\n            \r\n                Location Data\r\n                \r\n                    We collect location data such as information about your device's location. This data is\r\n                        imprecise and anonymized.How do we use your information?Monitor usage\r\n                We use analytics to learn which pages are commonly used, what features are useful, and what we should focus on in the future.\r\n            \r\n            \r\n                Site Activity\r\n                We count the number of pageviews on the website in order to keep metrics on site activity.\r\n            \r\n            \r\n                Feedback\r\n                Certain active interactions (for example, clicking the \"Was this page helpful\" box) will record an event in order to give accurate feedback.Do we share your information with anyone?Unless legally or contracturally obligated, we don't. Aggregate information, such as total pageviews, may be made publicly available.Do Not Track (DNT) PolicyWe proudly support DNT and the DNT header setting. Because of the fact that we do not track anyone\r\n            or record any personal information, your privacy is still preserved if you do not have this header\r\n            set.Special Rights by Region or CountryAll users are afforded equal data privacy rights. These rights encompass all applicable laws and regulations (e.g. GDPR).Rights to access and removal of dataWe do not have the technical capability to discern what data originated with which user. For this reason, we do not provide serivces for access or removal of data","address":"/legal/privacy.html"},{"title":"Oh No It Got Taken Down","text":"Oh No It Got Taken DownI've said that this site was entirely legal, and it is. However, I've also said that I'd take it down if my teacher asked me to, and he did.Apparently, CodeHS had contacted him, which is a weird and bad position for him to be in,\r\n            so I don't begrudge him one bit for asking me to take it down.I'm sorry for the inconvenience to everyone who uses this site for help. If you want to join the Discord, I'd still love to\r\n            help you with any questions you have.Thank you!GitHub\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                        \r\n                    \r\n                    Discord\r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                        \r\n                    \r\n                    Email","address":"/legal/takedown.html"},{"title":"Terms and Conditions","text":"Terms and ConditionsLast updated: January 04, 2021Please read these terms and conditions carefully before using Our Service.Interpretation and DefinitionsInterpretationThe words of which the initial letter is capitalized have meanings defined under the following conditions.\r\n            The following definitions shall have the same meaning regardless of whether they appear in singular or in\r\n            plural.DefinitionsFor the purposes of these Terms and Conditions:Affiliate means an entity that controls, is controlled by or is under common control\r\n                    with a party, where \"control\" means ownership of 50% or more of the shares, equity\r\n                    interest or other securities entitled to vote for election of directors or other managing authority.\r\n                \r\n            \r\n            \r\n                Country refers to: Massachusetts, United States\r\n            \r\n            \r\n                Company (referred to as either \"the Company\", \"We\",\r\n                    \"Us\" or \"Our\" in this Agreement) refers to Dinner Coding Time.\r\n            \r\n            \r\n                Device means any device that can access the Service such as a computer, a cellphone\r\n                    or a digital tablet.\r\n            \r\n            \r\n                Service refers to the Website.\r\n            \r\n            \r\n                Terms and Conditions (also referred as \"Terms\") mean these Terms and\r\n                    Conditions that form the entire agreement between You and the Company regarding the use of the\r\n                    Service. This Terms and Conditions agreement has been created with the help of the Terms and\r\n                        Conditions Generator.\r\n            \r\n            \r\n                Third-party Social Media Service means any services or content (including data,\r\n                    information, products or services) provided by a third-party that may be displayed, included or made\r\n                    available by the Service.\r\n            \r\n            \r\n                Website refers to Dinner Coding Time, accessible from https://dinnercodingtime.com\r\n            \r\n            \r\n                You means the individual accessing or using the Service, or the company, or other\r\n                    legal entity on behalf of which such individual is accessing or using the Service, as applicable.AcknowledgmentThese are the Terms and Conditions governing the use of this Service and the agreement that operates between\r\n            You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding\r\n            the use of the Service.Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms\r\n            and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the\r\n            Service.By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with\r\n            any part of these Terms and Conditions then You may not access the Service.You represent that you are over the age of 18. The Company does not permit those under 18 to use the Service.Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the\r\n            Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection,\r\n            use and disclosure of Your personal information when You use the Application or the Website and tells You\r\n            about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before\r\n            using Our Service.Links to Other WebsitesOur Service may contain links to third-party web sites or services that are not owned or controlled by the\r\n            Company.The Company has no control over, and assumes no responsibility for, the content, privacy policies, or\r\n            practices of any third party web sites or services. You further acknowledge and agree that the Company shall\r\n            not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused\r\n            by or in connection with the use of or reliance on any such content, goods or services available on or\r\n            through any such web sites or services.We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or\r\n            services that You visit.TerminationWe may terminate or suspend Your access immediately, without prior notice or liability, for any reason\r\n            whatsoever, including without limitation if You breach these Terms and Conditions.Upon termination, Your right to use the Service will cease immediately.Limitation of LiabilityNotwithstanding any damages that You might incur, the entire liability of the Company and any of its\r\n            suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be\r\n            limited to the amount actually paid by You through the Service or 100 USD if You haven't purchased anything\r\n            through the Service.To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable\r\n            for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to,\r\n            damages for loss of profits, loss of data or other information, for business interruption, for personal\r\n            injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service,\r\n            third-party software and/or third-party hardware used with the Service, or otherwise in connection with any\r\n            provision of this Terms), even if the Company or any supplier has been advised of the possibility of such\r\n            damages and even if the remedy fails of its essential purpose.Some states do not allow the exclusion of implied warranties or limitation of liability for incidental or\r\n            consequential damages, which means that some of the above limitations may not apply. In these states, each\r\n            party's liability will be limited to the greatest extent permitted by law.\"AS IS\" and \"AS AVAILABLE\" DisclaimerThe Service is provided to You \"AS IS\" and \"AS AVAILABLE\" and with all faults and defects\r\n            without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own\r\n            behalf and on behalf of its Affiliates and its and their respective licensors and service providers,\r\n            expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the\r\n            Service, including all implied warranties of merchantability, fitness for a particular purpose, title and\r\n            non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or\r\n            trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and\r\n            makes no representation of any kind that the Service will meet Your requirements, achieve any intended\r\n            results, be compatible or work with any other software, applications, systems or services, operate without\r\n            interruption, meet any performance or reliability standards or be error free or that any errors or defects\r\n            can or will be corrected.Without limiting the foregoing, neither the Company nor any of the company's provider makes any\r\n            representation or warranty of any kind, express or implied: (i) as to the operation or availability of the\r\n            Service, or the information, content, and materials or products included thereon; (ii) that the Service will\r\n            be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or\r\n            content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent\r\n            from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or\r\n            other harmful components.Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable\r\n            statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You.\r\n            But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest\r\n            extent enforceable under applicable law.Governing LawThe laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the\r\n            Service. Your use of the Application may also be subject to other local, state, national, or international\r\n            laws.Disputes ResolutionIf You have any concern or dispute about the Service, You agree to first try to resolve the dispute\r\n            informally by contacting the Company.For European Union (EU) UsersIf You are a European Union consumer, you will benefit from any mandatory provisions of the law of the\r\n            country in which you are resident in.United States Legal ComplianceYou represent and warrant that (i) You are not located in a country that is subject to the United States\r\n            government embargo, or that has been designated by the United States government as a \"terrorist\r\n            supporting\" country, and (ii) You are not listed on any United States government list of prohibited or\r\n            restricted parties.Severability and WaiverSeverabilityIf any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and\r\n            interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable\r\n            law and the remaining provisions will continue in full force and effect.WaiverExcept as provided herein, the failure to exercise a right or to require performance of an obligation under\r\n            this Terms shall not effect a party's ability to exercise such right or require such performance at any time\r\n            thereafter nor shall be the waiver of a breach constitute a waiver of any subsequent breach.Translation InterpretationThese Terms and Conditions may have been translated if We have made them available to You on our Service.\r\n            You agree that the original English text shall prevail in the case of a dispute.Changes to These Terms and ConditionsWe reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is\r\n            material We will make reasonable efforts to provide at least 30 days' notice prior to any new terms taking\r\n            effect. What constitutes a material change will be determined at Our sole discretion.By continuing to access or use Our Service after those revisions become effective, You agree to be bound by\r\n            the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website\r\n            and the Service.Contact UsIf you have any questions about these Terms and Conditions, You can contact us:By email: contact@dinnercodingtime.com","address":"/legal/terms.html"},{"title":"Flights Miles and Points","text":"Flights Miles and Pointspublic class Flight {\r\n                private String departureCity;\r\n                private String destinationCity;\r\n                private double miles;\r\n                \r\n                public Flight(String departureCity, String destinationCity, double miles) {\r\n                    this.departureCity = departureCity;\r\n                    this.destinationCity = destinationCity;\r\n                    this.miles = miles;\r\n                }\r\n                \r\n                public double getMiles() {\r\n                    return miles;\r\n                }\r\n                public double creditCardPointsEarned() {\r\n                    double points = 0;\r\n                    \r\n                    if(miles <= 500) {\r\n                        //for the first 500 miles, you just get 1 point per mile.\r\n                        points = miles;\r\n                    }\r\n                    else if(miles <= 1500) {\r\n                        //here's where it starts getting tricky-- you need 500 (from the first 500 miles), plus 2*the remaining miles (so miles - 500)\r\n                        points = 500 + 2 * (miles - 500);\r\n                    }\r\n                    else {\r\n                        //same theory, just with 5 and 1500 instead of 2 and 500. add (500+((1500-500)*2))\r\n                        points = (500+1000*2) + 5 * (miles - 1500);\r\n                    }\r\n                    \r\n                    //maximum of 10000 points per flight; use Math.min method for that.\r\n                    return Math.min(10000, points);\r\n                }\r\n            }public class FlightTester {\r\n                public static void main(String[] args) {\r\n                    //idk geography, idec if these are accurate\r\n                    Flight flight1 = new Flight(\"Boston\", \"Tokyo\", 3000);\r\n                    Flight flight2 = new Flight(\"New York City\", \"Vancouver\", 100);\r\n                    Flight flight3 = new Flight(\"Austin\", \"San Diego\", 700);\r\n                    \r\n                    //compute total flight miles & points\r\n                    double totalMiles = 0;\r\n                    double totalPoints = 0;\r\n                    \r\n                    totalMiles += flight1.getMiles();\r\n                    totalPoints += flight1.creditCardPointsEarned();\r\n                    \r\n                    totalMiles += flight2.getMiles();\r\n                    totalPoints += flight2.creditCardPointsEarned();\r\n                    \r\n                    totalMiles += flight3.getMiles();\r\n                    totalPoints += flight3.creditCardPointsEarned();\r\n                    \r\n                    //print out totals\r\n                    System.out.println(\"Total Miles: \" + totalMiles);\r\n                    System.out.println(\"Total Points: \" + totalPoints);\r\n                }\r\n            }","address":"/on-request-from-discord/first-quarter-final-spring-2021/flights.html"},{"title":"1st Quarter Final: Spring 2021","text":"1st Quarter Final: Spring 2021Here are the answers for the First Quarter Final: Spring 2021, asked by Nikaido on the Discord.Spring 2021\r\n                \r\n                    \r\n                        \r\n                            \r\n                                Answers\r\n                            \r\n                            \r\n                                \r\n                                    Flights Miles and Points\r\n                                \r\n                                \r\n                                    Word Count","address":"/on-request-from-discord/first-quarter-final-spring-2021/"},{"title":"Word Count","text":"Word Countimport java.util.Scanner;\r\npublic class WordCount {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        System.out.println(\"Give me a string of text\");\r\n        String text = sc.nextLine();\r\n        \r\n        System.out.println(\"Give me a single character\");\r\n        \r\n        //this is weird but char doesn't have its own method. this is how you'd do it instead\r\n        char letter = sc.next().charAt(0);\r\n        \r\n        System.out.println(\"Word count: \" + wordCount(text));\r\n        System.out.println(\"Percent of words that start with letter: \" + (percentStartWith(text, letter)*100) + \"%\");\r\n        \r\n    }\r\n    public static int wordCount(String text) {\r\n        //it'll always have at least 1 word\r\n        int words = 1;\r\n        \r\n        for(int i = 0; i < text.length(); i++) {\r\n            if(text.charAt(i) == ' ') {\r\n                words++;\r\n            }\r\n        }\r\n        return words;\r\n    }\r\n    public static double percentStartWith(String text, char letter) {\r\n        int totalWordsCount = wordCount(text);\r\n        int wordsThatStartWith = 0;\r\n        \r\n        //the first letter will always start a word, so this starts as `true`\r\n        boolean nextCharacterStartsWord = true;\r\n        \r\n        for(int i = 0; i < text.length(); i++) {\r\n            //if this is the start of the word, process it\r\n            if(nextCharacterStartsWord) {\r\n                if(text.charAt(i) == letter) {\r\n                    wordsThatStartWith++;\r\n                }\r\n            }\r\n            //when this character is a space, remember that the next character will be the start of a word;\r\n            //this will be checked in the next iteration.\r\n            //reset it to false when this character *isn't* a space\r\n            if(text.charAt(i) == ' ') {\r\n                nextCharacterStartsWord = true;\r\n            }\r\n            else {\r\n                nextCharacterStartsWord = false;\r\n            }\r\n        }\r\n        return wordsThatStartWith / ((double)totalWordsCount);\r\n    }\r\n}","address":"/on-request-from-discord/first-quarter-final-spring-2021/word-count.html"},{"title":"On Request from Discord","text":"On Request from DiscordThis is where I hold random requests from the Discord, for when teachers have implemented their own challenges on CodeHS.For privacy reasons, there's not really a public list of these, but they will be accessible on Google if you know what to look for.If you have a question that Dinner Coding Time can't answer, please ask it on the Discord! I might not be able to answer it right away, but someone should be able to help you ASAP.","address":"/on-request-from-discord/"},{"title":"Report a Bug","text":"Report a BugYou can report bugs through this Google Form, email at bug-report@dinnercodingtime.com, or through the unofficial AP Discord in the #cs channelI'm an AP student too, so I might take a bit to respond to bug reports.","address":"/report-bug.html"},{"title":"Search Results","text":"Search Results","address":"/search.html"},{"title":"Converting Decimal to Binary","text":"Converting Decimal to BinaryThe Easy WayJava gives us a method to convert binary!\n    Of course, teachers usually don't mean\n    for you to use it. They want you to code something yourself. However, methods like this are usually more\n    efficient and bug-tested than anything that a coder could make.You should always feel\n    justified in using a language's features instead of coding your own: that's what they're there for! To\n    use\n    the Integer.toBinaryString() method, pass any integer to it.int foo = 2003040;\nString binaryString = Integer.toBinaryString(foo);\n\n    Using the toBinaryString method to convert an int to\n        binarytoString with radix/baseIf the toBinaryString method doesn't work on your version\nof Java, try using toString with a radix.int foo = 2003040;\nString binaryString = Integer.toString(foo, 2);\n When passed a base of 2, Java converts the int to binary.\n    This also works for other common bases, like octal or hexidecimalThe Boring WaySome teachers don't like this. As in, get-a-zero-if-you-use-those-methods. Here is some\ncode for binary conversion that uses none of those methods!\n\nint foo = 2003040;\nString result = \"\";\nwhile(foo > 0) {\n&nbsp;&nbsp;&nbsp; result = (foo % 2) + result;\n&nbsp;&nbsp;&nbsp; foo /= 2;\n}\n By repeatedly dividing by 2, we can build a binary string\n    digit-by-digit.\n    \n    It's easiest to understand this when you think of how\ndecimal numbers work. Each digit place is 10 times larger (tens; hundreds;\nthousands; et cetera). With binary, each digit place is only two times larger, so dividing by\n    2 \"moves\" the decimal place 1 smaller. Since this code deals with integers, we don't have to worry\nabout numbers past the decimal point.From there, the code uses the modulus operator to add the\nremainder onto the start of the binary string. When it's completed, the result\nvariable will hold a converted binary version!","address":"/snippets/decimal-to-binary.html"}];
/*END INDEX*/

var Fuse;
/**
 * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)
 *
 * Copyright (c) 2021 Kiro Risk (http://kiro.me)
 * All Rights Reserved. Apache Software License 2.0
 *
 * http://www.apache.org/licenses/LICENSE-2.0
*/
var e, t; e = this, t = function () { "use strict"; function e(t) { return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(t) } function t(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") } function n(e, t) { for (var n = 0; n < t.length; n++) { var r = t[n]; r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r) } } function r(e, t, r) { return t && n(e.prototype, t), r && n(e, r), e } function i(e, t, n) { return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e } function o(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var r = Object.getOwnPropertySymbols(e); t && (r = r.filter((function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable }))), n.push.apply(n, r) } return n } function a(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? o(Object(n), !0).forEach((function (t) { i(e, t, n[t]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : o(Object(n)).forEach((function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) })) } return e } function c(e) { return function (e) { if (Array.isArray(e)) return s(e) }(e) || function (e) { if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e) }(e) || function (e, t) { if (e) { if ("string" == typeof e) return s(e, t); var n = Object.prototype.toString.call(e).slice(8, -1); return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? s(e, t) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function s(e, t) { (null == t || t > e.length) && (t = e.length); for (var n = 0, r = new Array(t); n < t; n++)r[n] = e[n]; return r } function h(e) { return Array.isArray ? Array.isArray(e) : "[object Array]" === y(e) } function u(e) { return "string" == typeof e } function l(e) { return "number" == typeof e } function d(t) { return !0 === t || !1 === t || function (t) { return function (t) { return "object" === e(t) }(t) && null !== t }(t) && "[object Boolean]" == y(t) } function f(e) { return null != e } function v(e) { return !e.trim().length } function y(e) { return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(e) } var g = function (e) { return "Pattern length exceeds max of ".concat(e, ".") }, p = Object.prototype.hasOwnProperty, m = function () { function e(n) { var r = this; t(this, e), this._keys = [], this._keyMap = {}; var i = 0; n.forEach((function (e) { var t = b(e); i += t.weight, r._keys.push(t), r._keyMap[t.id] = t, i += t.weight })), this._keys.forEach((function (e) { e.weight /= i })) } return r(e, [{ key: "get", value: function (e) { return this._keyMap[e] } }, { key: "keys", value: function () { return this._keys } }, { key: "toJSON", value: function () { return JSON.stringify(this._keys) } }]), e }(); function b(e) { var t = null, n = null, r = null, i = 1; if (u(e) || h(e)) r = e, t = k(e), n = M(e); else { if (!p.call(e, "name")) throw new Error(function (e) { return "Missing ".concat(e, " property in key") }("name")); var o = e.name; if (r = o, p.call(e, "weight") && (i = e.weight) <= 0) throw new Error(function (e) { return "Property 'weight' in key '".concat(e, "' must be a positive integer") }(o)); t = k(o), n = M(o) } return { path: t, id: n, weight: i, src: r } } function k(e) { return h(e) ? e : e.split(".") } function M(e) { return h(e) ? e.join(".") : e } var x = a({}, { isCaseSensitive: !1, includeScore: !1, keys: [], shouldSort: !0, sortFn: function (e, t) { return e.score === t.score ? e.idx < t.idx ? -1 : 1 : e.score < t.score ? -1 : 1 } }, {}, { includeMatches: !1, findAllMatches: !1, minMatchCharLength: 1 }, {}, { location: 0, threshold: .6, distance: 100 }, {}, { useExtendedSearch: !1, getFn: function (e, t) { var n = [], r = !1; return function e(t, i, o) { if (f(t)) if (i[o]) { var a = t[i[o]]; if (!f(a)) return; if (o === i.length - 1 && (u(a) || l(a) || d(a))) n.push(function (e) { return null == e ? "" : function (e) { if ("string" == typeof e) return e; var t = e + ""; return "0" == t && 1 / e == -1 / 0 ? "-0" : t }(e) }(a)); else if (h(a)) { r = !0; for (var c = 0, s = a.length; c < s; c += 1)e(a[c], i, o + 1) } else i.length && e(a, i, o + 1) } else n.push(t) }(e, u(t) ? t.split(".") : t, 0), r ? n : n[0] }, ignoreLocation: !1, ignoreFieldNorm: !1 }), w = /[^ ]+/g; function L() { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3, t = new Map, n = Math.pow(10, e); return { get: function (e) { var r = e.match(w).length; if (t.has(r)) return t.get(r); var i = 1 / Math.sqrt(r), o = parseFloat(Math.round(i * n) / n); return t.set(r, o), o }, clear: function () { t.clear() } } } var _ = function () { function e() { var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = n.getFn, i = void 0 === r ? x.getFn : r; t(this, e), this.norm = L(3), this.getFn = i, this.isCreated = !1, this.setIndexRecords() } return r(e, [{ key: "setSources", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []; this.docs = e } }, { key: "setIndexRecords", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []; this.records = e } }, { key: "setKeys", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []; this.keys = t, this._keysMap = {}, t.forEach((function (t, n) { e._keysMap[t.id] = n })) } }, { key: "create", value: function () { var e = this; !this.isCreated && this.docs.length && (this.isCreated = !0, u(this.docs[0]) ? this.docs.forEach((function (t, n) { e._addString(t, n) })) : this.docs.forEach((function (t, n) { e._addObject(t, n) })), this.norm.clear()) } }, { key: "add", value: function (e) { var t = this.size(); u(e) ? this._addString(e, t) : this._addObject(e, t) } }, { key: "removeAt", value: function (e) { this.records.splice(e, 1); for (var t = e, n = this.size(); t < n; t += 1)this.records[t].i -= 1 } }, { key: "getValueForItemAtKeyId", value: function (e, t) { return e[this._keysMap[t]] } }, { key: "size", value: function () { return this.records.length } }, { key: "_addString", value: function (e, t) { if (f(e) && !v(e)) { var n = { v: e, i: t, n: this.norm.get(e) }; this.records.push(n) } } }, { key: "_addObject", value: function (e, t) { var n = this, r = { i: t, $: {} }; this.keys.forEach((function (t, i) { var o = n.getFn(e, t.path); if (f(o)) if (h(o)) !function () { for (var e = [], t = [{ nestedArrIndex: -1, value: o }]; t.length;) { var a = t.pop(), c = a.nestedArrIndex, s = a.value; if (f(s)) if (u(s) && !v(s)) { var l = { v: s, i: c, n: n.norm.get(s) }; e.push(l) } else h(s) && s.forEach((function (e, n) { t.push({ nestedArrIndex: n, value: e }) })) } r.$[i] = e }(); else if (!v(o)) { var a = { v: o, n: n.norm.get(o) }; r.$[i] = a } })), this.records.push(r) } }, { key: "toJSON", value: function () { return { keys: this.keys, records: this.records } } }]), e }(); function S(e, t) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, r = n.getFn, i = void 0 === r ? x.getFn : r, o = new _({ getFn: i }); return o.setKeys(e.map(b)), o.setSources(t), o.create(), o } function O(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = t.errors, r = void 0 === n ? 0 : n, i = t.currentLocation, o = void 0 === i ? 0 : i, a = t.expectedLocation, c = void 0 === a ? 0 : a, s = t.distance, h = void 0 === s ? x.distance : s, u = t.ignoreLocation, l = void 0 === u ? x.ignoreLocation : u, d = r / e.length; if (l) return d; var f = Math.abs(c - o); return h ? d + f / h : f ? 1 : d } function A() { for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : x.minMatchCharLength, n = [], r = -1, i = -1, o = 0, a = e.length; o < a; o += 1) { var c = e[o]; c && -1 === r ? r = o : c || -1 === r || ((i = o - 1) - r + 1 >= t && n.push([r, i]), r = -1) } return e[o - 1] && o - r >= t && n.push([r, o - 1]), n } function j(e) { for (var t = {}, n = 0, r = e.length; n < r; n += 1) { var i = e.charAt(n); t[i] = (t[i] || 0) | 1 << r - n - 1 } return t } var E = function () { function e(n) { var r = this, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, o = i.location, a = void 0 === o ? x.location : o, c = i.threshold, s = void 0 === c ? x.threshold : c, h = i.distance, u = void 0 === h ? x.distance : h, l = i.includeMatches, d = void 0 === l ? x.includeMatches : l, f = i.findAllMatches, v = void 0 === f ? x.findAllMatches : f, y = i.minMatchCharLength, g = void 0 === y ? x.minMatchCharLength : y, p = i.isCaseSensitive, m = void 0 === p ? x.isCaseSensitive : p, b = i.ignoreLocation, k = void 0 === b ? x.ignoreLocation : b; if (t(this, e), this.options = { location: a, threshold: s, distance: u, includeMatches: d, findAllMatches: v, minMatchCharLength: g, isCaseSensitive: m, ignoreLocation: k }, this.pattern = m ? n : n.toLowerCase(), this.chunks = [], this.pattern.length) { var M = function (e, t) { r.chunks.push({ pattern: e, alphabet: j(e), startIndex: t }) }, w = this.pattern.length; if (w > 32) { for (var L = 0, _ = w % 32, S = w - _; L < S;)M(this.pattern.substr(L, 32), L), L += 32; if (_) { var O = w - 32; M(this.pattern.substr(O), O) } } else M(this.pattern, 0) } } return r(e, [{ key: "searchIn", value: function (e) { var t = this.options, n = t.isCaseSensitive, r = t.includeMatches; if (n || (e = e.toLowerCase()), this.pattern === e) { var i = { isMatch: !0, score: 0 }; return r && (i.indices = [[0, e.length - 1]]), i } var o = this.options, a = o.location, s = o.distance, h = o.threshold, u = o.findAllMatches, l = o.minMatchCharLength, d = o.ignoreLocation, f = [], v = 0, y = !1; this.chunks.forEach((function (t) { var n = t.pattern, i = t.alphabet, o = t.startIndex, p = function (e, t, n) { var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, i = r.location, o = void 0 === i ? x.location : i, a = r.distance, c = void 0 === a ? x.distance : a, s = r.threshold, h = void 0 === s ? x.threshold : s, u = r.findAllMatches, l = void 0 === u ? x.findAllMatches : u, d = r.minMatchCharLength, f = void 0 === d ? x.minMatchCharLength : d, v = r.includeMatches, y = void 0 === v ? x.includeMatches : v, p = r.ignoreLocation, m = void 0 === p ? x.ignoreLocation : p; if (t.length > 32) throw new Error(g(32)); for (var b, k = t.length, M = e.length, w = Math.max(0, Math.min(o, M)), L = h, _ = w, S = f > 1 || y, j = S ? Array(M) : []; (b = e.indexOf(t, _)) > -1;) { var E = O(t, { currentLocation: b, expectedLocation: w, distance: c, ignoreLocation: m }); if (L = Math.min(E, L), _ = b + k, S) for (var I = 0; I < k;)j[b + I] = 1, I += 1 } _ = -1; for (var C = [], F = 1, P = k + M, N = 1 << k - 1, $ = 0; $ < k; $ += 1) { for (var D = 0, K = P; D < K;) { var z = O(t, { errors: $, currentLocation: w + K, expectedLocation: w, distance: c, ignoreLocation: m }); z <= L ? D = K : P = K, K = Math.floor((P - D) / 2 + D) } P = K; var J = Math.max(1, w - K + 1), R = l ? M : Math.min(w + K, M) + k, T = Array(R + 2); T[R + 1] = (1 << $) - 1; for (var U = R; U >= J; U -= 1) { var q = U - 1, B = n[e.charAt(q)]; if (S && (j[q] = +!!B), T[U] = (T[U + 1] << 1 | 1) & B, $ && (T[U] |= (C[U + 1] | C[U]) << 1 | 1 | C[U + 1]), T[U] & N && (F = O(t, { errors: $, currentLocation: q, expectedLocation: w, distance: c, ignoreLocation: m })) <= L) { if (L = F, (_ = q) <= w) break; J = Math.max(1, 2 * w - _) } } var V = O(t, { errors: $ + 1, currentLocation: w, expectedLocation: w, distance: c, ignoreLocation: m }); if (V > L) break; C = T } var G = { isMatch: _ >= 0, score: Math.max(.001, F) }; if (S) { var H = A(j, f); H.length ? y && (G.indices = H) : G.isMatch = !1 } return G }(e, n, i, { location: a + o, distance: s, threshold: h, findAllMatches: u, minMatchCharLength: l, includeMatches: r, ignoreLocation: d }), m = p.isMatch, b = p.score, k = p.indices; m && (y = !0), v += b, m && k && (f = [].concat(c(f), c(k))) })); var p = { isMatch: y, score: y ? v / this.chunks.length : 1 }; return y && r && (p.indices = f), p } }]), e }(), I = []; function C(e, t) { for (var n = 0, r = I.length; n < r; n += 1) { var i = I[n]; if (i.condition(e, t)) return new i(e, t) } return new E(e, t) } function F(e, t) { var n = t.ignoreFieldNorm, r = void 0 === n ? x.ignoreFieldNorm : n; e.forEach((function (e) { var t = 1; e.matches.forEach((function (e) { var n = e.key, i = e.norm, o = e.score, a = n ? n.weight : null; t *= Math.pow(0 === o && a ? Number.EPSILON : o, (a || 1) * (r ? 1 : i)) })), e.score = t })) } function P(e, t) { var n = e.matches; t.matches = [], f(n) && n.forEach((function (e) { if (f(e.indices) && e.indices.length) { var n = { indices: e.indices, value: e.value }; e.key && (n.key = e.key.src), e.idx > -1 && (n.refIndex = e.idx), t.matches.push(n) } })) } function N(e, t) { t.score = e.score } function $(e, t) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, r = n.includeMatches, i = void 0 === r ? x.includeMatches : r, o = n.includeScore, a = void 0 === o ? x.includeScore : o, c = []; return i && c.push(P), a && c.push(N), e.map((function (e) { var n = e.idx, r = { item: t[n], refIndex: n }; return c.length && c.forEach((function (t) { t(e, r) })), r })) } var D = function () { function e(n) { var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i = arguments.length > 2 ? arguments[2] : void 0; if (t(this, e), this.options = a({}, x, {}, r), this.options.useExtendedSearch) throw new Error("Extended search is not available"); this._keyStore = new m(this.options.keys), this.setCollection(n, i) } return r(e, [{ key: "setCollection", value: function (e, t) { if (this._docs = e, t && !(t instanceof _)) throw new Error("Incorrect 'index' type"); this._myIndex = t || S(this.options.keys, this._docs, { getFn: this.options.getFn }) } }, { key: "add", value: function (e) { f(e) && (this._docs.push(e), this._myIndex.add(e)) } }, { key: "remove", value: function () { for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function () { return !1 }, t = [], n = 0, r = this._docs.length; n < r; n += 1) { var i = this._docs[n]; e(i, n) && (this.removeAt(n), n -= 1, r -= 1, t.push(i)) } return t } }, { key: "removeAt", value: function (e) { this._docs.splice(e, 1), this._myIndex.removeAt(e) } }, { key: "getIndex", value: function () { return this._myIndex } }, { key: "search", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = t.limit, r = void 0 === n ? -1 : n, i = this.options, o = i.includeMatches, a = i.includeScore, c = i.shouldSort, s = i.sortFn, h = i.ignoreFieldNorm, d = u(e) ? u(this._docs[0]) ? this._searchStringList(e) : this._searchObjectList(e) : this._searchLogical(e); return F(d, { ignoreFieldNorm: h }), c && d.sort(s), l(r) && r > -1 && (d = d.slice(0, r)), $(d, this._docs, { includeMatches: o, includeScore: a }) } }, { key: "_searchStringList", value: function (e) { var t = C(e, this.options), n = this._myIndex.records, r = []; return n.forEach((function (e) { var n = e.v, i = e.i, o = e.n; if (f(n)) { var a = t.searchIn(n), c = a.isMatch, s = a.score, h = a.indices; c && r.push({ item: n, idx: i, matches: [{ score: s, value: n, norm: o, indices: h }] }) } })), r } }, { key: "_searchLogical", value: function (e) { throw new Error("Logical search is not available") } }, { key: "_searchObjectList", value: function (e) { var t = this, n = C(e, this.options), r = this._myIndex, i = r.keys, o = r.records, a = []; return o.forEach((function (e) { var r = e.$, o = e.i; if (f(r)) { var s = []; i.forEach((function (e, i) { s.push.apply(s, c(t._findMatches({ key: e, value: r[i], searcher: n }))) })), s.length && a.push({ idx: o, item: r, matches: s }) } })), a } }, { key: "_findMatches", value: function (e) { var t = e.key, n = e.value, r = e.searcher; if (!f(n)) return []; var i = []; if (h(n)) n.forEach((function (e) { var n = e.v, o = e.i, a = e.n; if (f(n)) { var c = r.searchIn(n), s = c.isMatch, h = c.score, u = c.indices; s && i.push({ score: h, key: t, value: n, idx: o, norm: a, indices: u }) } })); else { var o = n.v, a = n.n, c = r.searchIn(o), s = c.isMatch, u = c.score, l = c.indices; s && i.push({ score: u, key: t, value: o, norm: a, indices: l }) } return i } }]), e }(); return D.version = "6.4.6", D.createIndex = S, D.parseIndex = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = t.getFn, r = void 0 === n ? x.getFn : n, i = e.keys, o = e.records, a = new _({ getFn: r }); return a.setKeys(i), a.setIndexRecords(o), a }, D.config = x, D }, Fuse=t();

var options = {
    includeMatches: true,
    ignoreLocation: true,
    minMatchCharLength: 4,
    keys: [
      "title",
      "text",
      "address"
    ]
  };
// initialize Fuse with the index
var fuse = new Fuse(list, options, Fuse.parseIndex(index));

exports.handler = function(event, context, callback) {
    if(!event.queryStringParameters.q || event.queryStringParameters.q.length <= 3) {
        callback(null, {
            statusCode: 400,
            body: JSON.stringify({errorMessage: "Search query must be at least 4 letters long"}),
            headers: {"Content-Type": "application/json"}
        });
        return;
    }
    var r = fuse.search(event.queryStringParameters.q).map(x=>{
        var summary = "", indices;
        for(var i = x.matches.length - 1; i >= 0; i--) {
            if(x.matches[i].key == "text") {
                indices = x.matches[i].indices;
                
                var min = Math.min(...indices.map(y=>y[0]));
                var max = Math.max(...indices.map(y=>y[1]));

                summary = x.matches[i].value.substring(min, max + 1);
                
                indices = indices.map(x=>[x[0] - min, x[1] - min]);
            }
        }
        return { title: x.item.title, address: x.item.address, summary: summary, indices: indices };
    }).slice(0, SEARCH_LIMIT);
    callback(null, {
        statusCode: 200,
        body: JSON.stringify(r),
        headers: {"Content-Type": "application/json"}
    });
}   